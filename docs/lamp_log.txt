------------------------------------------------------2011-04-11-------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
使stm32108w sensor 可以加入em260的网络，网络参数在common.h中
  #define APP_CHANNEL (20)
  #define APP_PANID   (0x1010)
  #define APP_EXTENDED_PANID {'l','i','g','h','t',0,0,0}

修改了配置文件< ember-configuration-defaults.h >
 #define EMBER_SECURITY_LEVEL 0

CONFIGURATION_HEADER其实已经引用，是
在工程――属性――编译器――Defined symbols里面
--------------------------------------
NULL_BTL
BOARD_HEADER="hal/micro/cortexm3/stm32w108/board/MB851.h"
PLATFORM_HEADER="hal/micro/cortexm3/compiler/iar.h"
CORTEXM3
CORTEXM3_STM32W108
PHY_EM3XX
BOARD_MB851
CONFIGURATION_HEADER="app/light/sensor-configuration.h"
SENSOR_APP
EMBER_SERIAL1_MODE=EMBER_SERIAL_FIFO
EMBER_SERIAL1_TX_QUEUE_SIZE=128
EMBER_SERIAL1_RX_QUEUE_SIZE=16
EMBER_SERIAL0_DEBUG
SCAN_DEBUG_PRINT_ENABLE
__SOURCEFILE__="$FILE_FNAME$"
ENABLE_ADC_EXTENDED_RANGE_BROKEN
ST_TEMPERATURE_SENSOR_FIX
--------------------------------------

待解决:如何改变一个Device的属性? coor?router?end device?

 #ifdef USE_HARDCODED_NETWORK_SETTINGS
（1）checkButtonEvents()中按下按钮0时调用：status = emberJoinNetwork(EMBER_ROUTER, &networkParams);
#elseif
（2）emberScanForJoinableNetwork()中emberJoinableNetworkFoundHandler中加入网络
++++++++++++++++
ok，加油，下一个任务！


------------------------------------------------------2011-04-18-------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
下面的任务是把sensor 和sink的程序并在一起。
1)将pre-compile部分移到sea_cfg.h中，并改正了由此产生的bug
2）为将sensor和sink结合在一起，需要知道哪些用了相同的文件，结果是
大部分相同，不同的部分有：
sensor                              sink
-----------------------------------------
node.c		security-address-cache.c
sensor.c                    sink.c
                                source-route-common.c
		source-route.c
3)将几个文件并在一起，sink处，增加了group:led-lamp和lib\HAL
led-lamp里面有：
	ledlamp.c         暂时#if 0  
	lamp.c  
	common.c    
	network.c
lib里面有：
HAL里面有：
util里面有：
4)编译、下载看修改有无成功

------------------------------------------------------2011-04-19-------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
1、总体是先把sink调试好，按照实验室的架构。network.h引用sink.c和sensor.c
2、network.c还有错误，一个个编译，查看编译错误，incoming hanlder
3、sink.h将sink.c全部体现出来


------------------------------------------------------2011-04-20-------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
network.c，编译成功。
===========msg还没加入进来==============
加进来后别忘了//init_msginfo();       // initialize msg_info structure body

++++++++++++++++++++++++++++++++++++++++
ticksSinceLastHeard
EVENT: too long since last heard, deleting address table index 00, status 00
++++++++++++++++++++++++++++++++++++++++
各种消息类型掌握
++++++++++++++++++++++++++++++++++++++++
如果移植led_lamp，需要看watchdog,systick
++++++++++++++++++++++++++++++++++++++++


下面就是把sensor也并进来，用新版本的下载下去
现在的目标就是把原来的sink、sensor功能并在一起，并能实现原来的功能，
不要求把我们的程序并进去。修改的是安装版那里的程序（完全原装）。

 出现了路由器无法加入协调器的情况，将路由器代码修改为
\ZigBee项目总\ledlamp_STM32W108\app\light\ewb之后，可以正常加入。
协调器是我修改的版本

+++++++++++++++++++++++++++++++++++++
需要将incomingHandler等callback独立出来;
 ++ray:重复;
+++++++++++++++++++++++++++++++++++++
sink也有一部分需要改成static形式；
+++++++++++++++++++++++++++++++++++++
备份在新建的backup文件夹里；
+++++++++++++++++++++++++++++++++++++


********************************************************************************************
------------------------------------------------------2011-04-20晚22：00-------------------------------------------------
*********************************************************************************************
因为还要做ppt，移植工作先暂告一段落。
++++已完成的工作++++
1)sink,sensor根据各自的功能需求分开；
2）添加了network.c支持、或者有关修改的代码；
3）增加了ezsp_callback将一些可以共用的callback整合在一起

++++待完成的工作++++
1)msg.c.lamp.c等其他有关应用层代码的移植。
   这里注意一个细节，network.c里/init_msginfo(); 
2）
++++++++++++++++++++++++++++++++++++++++
ticksSinceLastHeard
EVENT: too long since last heard, deleting address table index 00, status 00
++++++++++++++++++++++++++++++++++++++++
各种消息类型稍微浏览
++++++++++++++++++++++++++++++++++++++++
如果移植led_lamp，需要看watchdog,systick
++++++++++++++++++++++++++++++++++++++++
3）另外，led,uart等抽象层不完善
4）callback还有更多，需要进一步理解

另外，20A1（物理号）串口调不出来，用了usb输出；
          用usb时,help菜单打不出来

需要重点照顾的文件：
++++++++++++++++
<senor-configuration.h>
++++++++++++++++
ember-configuration.c
****后面有一些重定义的错误，多来源自此，请多查看
++++++++++++++++
< ember-configuration-defaults.h >
++++++++++++++++
sensor.c
++++++++++++++++
common.c
定义各种常用功能；
++++++++++++++++
ember-types.h
一些协议栈用到的宏定义；
++++++++++++++++
message.h
brief EmberZNet API for sending and receiving messages.
++++++++++++++++
packet-buffer.h
Packet buffer allocation and management routines
incoming \outgoing 消息都是存在buffer里面的,叫做EmberMessageBuffer
emberFillLinkedBuffers\emberFillStackBuffer
++++++++++++++++
在stack-info.h中，
栈信息、网络参数信息、信道信息
+++++++++++++++++
security.h
安全相关emberGetKey()之类
+++++++++++++++++
Bootloader相关：app-bootloader-demo和standalone-demo
注意bootloader有一个专门的格式文件叫做ebl格式
+++++++++++++++++
util文件夹下面,common,bootload,security
+++++++++++++++++

********************************************************************************************
------------------------------------------------------2011-04-28-------------------------------------------------
*********************************************************************************************
1)cmd里面的命令实现弄清楚，两个的；
 ・ticksSinceLastHeard;
・地址表 emberGetAddressTableRemoteEui64
Index  Inuse  NodeId                    Eui64             Age
 00:   FALSE  UNUSED   FFFFFFFFFFFFFFFF  0xFFFF
 01:   FALSE  UNUSED   FFFFFFFFFFFFFFFF  0xFFFF
 02:   FALSE  UNUSED   FFFFFFFFFFFFFFFF  0xFFFF
 03:   FALSE  UNUSED   FFFFFFFFFFFFFFFF  0xFFFF
 04:   FALSE  UNUSED   FFFFFFFFFFFFFFFF  0xFFFF
・token  token-stack.h token.h
`EMBER_APS_OPTION_SOURCE_EUI64
`sinkAppSwitchNetworkKey
小板的程序可以烧进去，但程序上加入机制需要修改，可以进行第二步了
要保留庆科原来的程序版本，因为以后的修改版本都是#include "sea_cfg.h",多个工程共用文件。

2）改名字，删文件。之后再实验、备份
3)把程序改成一个稳定版本，作为修改之前备份
4）在sensor基础上修改，可把260的安全性加上

stm32w_flasher.exe -i rs232 -p COM2 -f -a 0x08000000 C:\sink.s 
注意一定要在jtag没有插的情况下面做
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C:\stm32w_flasher>stm32w_flasher.exe -i rs232 -p COM19 -f -a 0x08000000 C:\sink1
.bin
STM32W flasher utility version 1.0.1b1 (Thu Feb 18 12:07:29 2010)
FTDI device eeprom has incorrect values, fixing it...
Port not ready, still waiting
Port not ready, still waiting
Port not ready, still waiting
Port not ready, still waiting
Done
No reply received
Error while initiliazing interface
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

********************************************************************************************
------------------------------------------------------2011-05-01-------------------------------------------------
*********************************************************************************************
1、可以作为一个基础版本；
2、应用层程序仍未范例，可依据此作为蓝本修改为路灯应用。
3、编译后处理的ebl文件没有成功过。


********************************************************************************************
------------------------------------------------------2011-05-09-------------------------------------------------
*********************************************************************************************
1、event加上了，采用了库EmberEventControl支持；新增加文件event_tick.c，处理事件流程
2、common.c中增加了组播和单播程序，但是尚未调试。
3、sea_singletimevent，LampHandler――――――qsTick,millTick,minTick
sea_setimevent 由在init_singleinfo――LAMP_Configuration（）中调用；改为 qsTickHook中。
4、LAMP_Configuration（）先不用malloc了

********************************************************************************************
------------------------------------------------------2011-05-10-------------------------------------------------
*********************************************************************************************・
――――――――――――――――――――――――――――――
测试sensor_singletimevent
是不是每隔1s调用一次？――是的，较准。
――――――――――――――――――――――――――――――
关于watchdog太快的问题：
WDOG_CFG 、WDOG_KEY、WDOG_RESET 三个寄存器相关联，但无法调整时间；
数据手册上说，The watchdog timer uses the calibrated 1 kHzclock (CLK1K) as its reference and provides a nominal 2.048 s timeout. A low water mark interrupt occurs at 1.792 s and triggers an NMI to the ARM? Cortex-M3 NVIC as an early warning. When enabled, periodically reset the watchdog timer by writing to the WDOG_RESTART register before it expires.
――――――――――――――――――――――――――――――
 UART_Configuration();     // inititialize serial interface 
  LED_Configuration();
  //ADC_Configuration();     // ADC初始化    
  //PWM_Configuration();     // 用来输出pwm的
  //KEY_Configuration();       //用了中断，在common.c里面halButtonIsr
`――――――――――――――――――――――――――――――
token是怎么写进去的？
 *   tokTypeSensorName sensor;
 *   tokTypeSensorParameters params;
 *
 *   halCommonGetToken(&sensor, TOKEN_SENSOR_NAME);
 *   halCommonGetToken(&params, TOKEN_SENSOR_PARAMETERS);
 *   if(params.calibrationValue == 0xBEEF) {
 *     params.reportInterval = 5;
 *   }
 *   halCommonSetToken(TOKEN_SENSOR_PARAMETERS, &params);
――――――――――――――――――――――――――――――
研究bootloader的时候用全版本的范例程序，并且，搜索范围在整个文件夹；
――――――――――――――――――――――――――――――
把common的东西放到network.c里面
――――――――――――――――――――――――――――――
halReboot();或者sensorJoinNetwork()或者原来的rejoin() 处理掉出去的情况。

      if (numberOfFailedDataMessages >= MISS_PACKET_TOLERANCE) 
      {
        emberSerialPrintf(APP_SERIAL,
           "ERROR: too many data msg failures, looking for new sink\r\n");
        mainSinkFound = FALSE;
        numberOfFailedDataMessages = 0;
      }
――――――――――――――――――――――――――――――
sendmsg，都放在栈里，当执行完之后空间不就没了么？
――――在这里要保证要发送的数据一定要是全局数据而不是栈数据，即地址不变。
――――――――――――――――――――――――――――――
emberSendReply(cluster,buffer)协议栈里面专门对单播的reply
――――――――――――――――――――――――――――――
emberGetLastHopRssi(&rssi); 
――――――――――――――――――――――――――――――
发现现象:以LED闪烁为例，放在loop里面不准；放在event里面准确
――――――――――――――――――――――――――――――



********************************************************************************************
------------------------------------------------------2011-05-11-------------------------------------------------
*********************************************************************************************・
修正了printEUI64处的bug
――――――――――――――――――――――――――――――
compareTime 	halCommonGetInt16uMillisecondTick
经过测试，使用system-timer较准。
设定一个时间，然后让两个定时器开始计时，明天来看的记过，4
初步测试是：3:45:15之后，
event_time 	3:42:53
compare time	3:46:27

新的测试在下午五点钟，17:00准时复位，第二天看跟电脑时间是否相同。
这一次共测试了16:24',从晚上17:00――早上9:24
结果是：
event	计时：17:00―――>8:15'40''
compare	计时：17:00―――>8:31'10''   system-timer计时
如果用补偿的话，event共慢1:8'20'';compare共慢52'50''
event每小时慢4'10''
compare每小时慢3'13''
相比较而言，event的数据虽不准确一点，但更整一点，程序中使用！

――――――――――――――――――――――――――――――
#define sinkEUI emberGetEui64()
#define sinkShortAddress emberGetNodeId()
――――――――――――――――――――――――――――――
所有按键后出现的乱码现象
――――――――――――――――――――――――――――
ezspRouterMessageSentHandler()里面处理一下，reset
――――――――――――――――――――――――――――――
emberGetLinkedBuffersPointer实验下和数组方式比较之。用TEST测
――――――――――――――――――――――――――――――
EmberMessageBuffer可以创建、随意插入到指定位置、等
#define LOG_PACKET_BUFFER_SIZE 7
 * Buffers can be linked together to create longer packets.
 * The utility procedures allow you to treat a linked chain
 * of buffers as a single buffer.
试一下大规模数据传输,fragment.c的实验现象。
窗口大小设为 3<8
1）EmberMessageBuffer不能通过append变为大于u8长度；现在的例子是可以传输250bytes的数据
2）数据会经常性的出现不正确，；
第二个问题估计与―― 
* ::EMBER_FRAGMENT_WINDOW_SIZE controls how many blocks are sent at a time.
 * ::EMBER_FRAGMENT_DELAY_MS controls the spacing between blocks.
有关
――――――――――――――――――――――――――――――
如果sensor一开始没有加入，不能一直不断的请求加入，应该每隔一段时间加一次
――――――――――――――――――――――――――――――
借鉴范例程序的某些做法,比如sourceroute、安全、准入机制、地址表	+
emberSendManyToOneRouteRequest，	
若成功加入，则周期性灯亮暗					+
――――――――――――――――――――――――――――――
sink:sendManyToOneRouteRequest				+
sensor:发送数据失败后，请求rejoin				+
――――――――――――――――――――――――――――――
到时间后禁止加入
      if ( trustCenterIsPermittingJoins() ) 
      {
        permitJoinsTimer++;
        
        // permitJoinsTimer is in quarter-seconds, joinTimeout is in seconds
        if ( permitJoinsTimer > (joinTimeout * 4)) 
        {
          trustCenterPermitJoins(FALSE);
          permitJoinsTimer = 0;
        }
      }
――――――――――――――――――――――――――――――
common.c和network.c合并起来,现在，common里面都是边缘函数
――――――――――――――――――――――――――――――
halReboot
注意一下sink地址表的操作


********************************************************************************************
------------------------------------------------------2011-05-16-------------------------------------------------
*********************************************************************************************・
――――――――――――――――――――――――――――――
uart先移植过来
The SC1 UART is enabled by writing 1 to SC1_MODE. 
The SC2 serial controller does not include UART functions.
1)serial.c缓冲区改成两个
2）没用的uart和serial去掉，主要是serial
3）整合pwm
变干净了
――――――――――――――――――――――――――――――
key
――――――――――――――――――――――――――――――
led
――――――――――――――――――――――――――――――
重新整理了frament.c，把相关代码写进ezsp_callback.c
――――――――――――――――――――――――――――――
ami-inter-pan.h整合进来，没有成功，0x40:MAC层没有收到ACK
――――――――――――――――――――――――――――――
emberSendReply(cluster,buffer)协议栈里面专门对单播的reply
――――――――――――――――――――――――――――――
emberGetLastHopRssi(&rssi); 
――――――――――――――――――――――――――――――
********************************************************************************************
------------------------------------------------------2011-05-23-------------------------------------------------
*********************************************************************************************・
――――――――――――――――――――――――――――――
adc写进去
――――――――――――――――――――――――――――――
token,把路灯号拿出来，加电时，先checkToken()；放在AppInit(); 里面，就这样了
token内容：
路灯号；道路号；周期性汇报时间；
开关灯时间stage和auto模式的切换getnetworkinfo()->state = EMBER_NO_NETWORK;时启动该模式
getnetworkinfo()->state =  EMBER_JOINED_NETWORK;时禁止该模式

若已经分配灯号，LAMP_ECHO、LAMP_ER_NP就没有意义了
――――――――――――――――――――――――――――――
get date ：有两个
――――――――――――――――――――――――――――――
adc写进event里面
――――――――――――――――――――――――――――――
clusterID：changnumber



*********************未完成**********************************
――――――――――――――――――――――――――――――
分配灯号，基数处理
――――――――――――――――――――――――――――――
bootloader
――――――――――――――――――――――――――――――
emberSendReply(cluster,buffer);
router里可以用地址表（周围、ZC），但是ZC不应该用；
如果路灯state是没有加入，那么汇报-----------肯定传输错误 的啊――所以只能协调器端处理
int16u ticksSinceLastHeard[SINK_ADDRESS_TABLE_SIZE];
――――――――――――――――――――――――――――――

********************************************************************************************
------------------------------------------------------2011-05-25-------------------------------------------------
*********************************************************************************************
sink增加server_gprs.c  sever_usart.c
增加frame.c
测试frame:
1)  0x68 xxxxxxxx0x43
2)  0x68 xxxxxx
3)  xxxxxxx 0x43
4)  xxxxxx
在SSCOM上测试
93 87 21 (68 5C 06 00 03 00 65 43) 45 48 24 47 00 ----较稳定，但打印之前先delay一下不然乱码；
25 93 （68 5C 06 00 03 00 65 49 78 89             ――没有suffix 0x43,discard；
25 93 5C 06 00 43 03 00 65 49 78 89               ____没有prefix,全部discard；



--------------------测试数据--------------------------------------
全报：
68 15(cmd) 80 00(len) 1D 00（roadid） 0A 00(lamp all) 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
BC(checksum) 43 


68 15(cmd) 80 00(len) 19 00 0A 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
03 00 01 64 08 10 C8 C8 CC 36 8C 30 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
86 43 

68 15 80 00 19 00 0A 00 
01 00 00 00 08 10 C8 C8 CC 36 8C 30
02 00 01 64 08 10 C8 C8 CC 36 8C 30
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 
EC 43 

――――――――――――――――――――――――――――――
关键信息上报key ret:
68 16(cmd) 0A 00(len) 19 00(roadid) 0A 00(lampall) 00 00 43(checksum) 43 
――――――――――――――――――――――――――――――
根据status ，发送ACK   sea_SendAckViaUsart()测试：
68 40 05 00 01 46 43 
68 40 05 00 00 45 43 
――――――――――――――――――――――――――――――


――――――――――――――――――――――――――――――
//全开
65-04-00-69             
――――――――――――――――――――――――――――――
//全关
5A-04-00-5E
――――――――――――――――――――――――――――――
//ICHP_SV_OPEN_SINGLE
68-06-00-09-00-77 	
――――――――――――――――――――――――――――――
//ICHP_SV_CLOSE_SINGLE
5C-06-00-03-00-65	
――――――――――――――――――――――――――――――
//改变电流大小
33-05-00-50-88          
――――――――――――――――――――――――――――――
--------------------测试数据--------------------------------------






********************************************************************************************
------------------------------------------------------2011-05-29-------------------------------------------------
*********************************************************************************************

――――――――――――――――――――――――――――――
将关键数据配置如MAXLAMPS等，写入sea_cfg.h 
CURRENTLAMPS
・・・分配灯号；
・・・key rpt
――――――――――――――――――――――――――――――
网站的问题：
1）按钮按下时，提示框：发送串口命令失败；
2）不能定时刷新，所以显示不出效果；
   效果包括：开灯关灯图片；数据库表示；
3）添加或删除用户；
――――――――――――――――――――――――――――――
********************************************************************************************
------------------------------------------------------2011-05-31-------------------------------------------------
*********************************************************************************************
EMZ3118         ： 太近了，李立轩那里都不到；
开发板那种红的  ： 打卡电脑处，若没有障碍物（抬起来）可以组网成功；
                   若中间有障碍，则不可以组网。
EMZ3018A        ： 太近，最多到李立轩；
――――――――――――――――――――――――――――――
增加了PA，但PA3、PA6要求不能用。所以暂时不能用（0,3,7）
#define EMZ3118，该功能慎用，必须EMZ3118才能使能；
――――――――――――――――――――――――――――――

********************************************************************************************
------------------------------------------------------2011-06-01-------------------------------------------------
*********************************************************************************************
1)把assignLampNumberMethord 放进 road_info里面,在init中随时更改；

********************************************************************************************
------------------------------------------------------2011-06-06-------------------------------------------------
*********************************************************************************************
#define EMZ3118_A         没天线，距离比较近，但很稳定；
#define EMZ3118_B         ST_RadioSetPowerMode( 0x0002 );没有该函数
――――――――――――――――――――――――――――――
void init_singleinfo ( void ) 
路灯号――道路号――汇报周期   从flash里面取token
――――――――――――――――――――――――――――――


――――――――――――――――――――――――――――――
下面把单机版部署起来；协调器就放在机子那里
――――――――――――――――――――――――――――――
命令接收后，转发不能成功，出现0xA1的错误解决方法：
1）sea_sendunimsg半径改小一点；
2）transfer_error支持
3）串口接收程序会出错，重写了个简单的，可行。

――――――――――――――――――――――――――――――
拔掉后，mdb仍然没有变化；
漏命令；__解决
漏刷新；――――解决
――――――――――――――――――――――――――――――
串口接收命令修改；
重新调试 增加单灯控制；
EMZ3118天线的问题；
rawMessage
――――――――――――――――――――――――――――――
emberSetTxPowerMode()参数如何选择；
天线问题基本弄懂
――――――――――――――――――――――――――――――
network.h中分配给每个同学的网络参数需要不同
――――――――――――――――――――――――――――――


――――――――2011-06-15――――――――――――――――――――――
修改开关灯和亮度变化
――――――――2011-06-20――――――――――――――――――――――
增加单灯改变百分比
0x68(prefix) 0x39(cmd) 0x07  0x00(len) 0x80(persent) 0x02 0x00(nodeid) 0xc2 (checksum) 0x43(suffix)

服务器请求协调器当前时间：
0x68 0x51 0x04 0x00 0x55 0x43 

协调器请求服务器时间同步
68 42 04 00 46 43 

服务器向协调器反馈同步时间
68 21 0B 00 （DB 07 06 01 06 06 02） 23 43
68 21 0B 00 DB 07 06 01 06 06 02 24 43

――――――――2011-06-28――――――――――――――――――――――
pwm()的参数值有修改过；
因为板子以前改过
没有PA时，pwm用PA6，开关灯用PA4；
但用PA时，PA占用了PA3、PA6，pwm用_______，开关灯用PA4；



――――――――2011-07-17――――――――――――――――――――――
地图一直有亮的灯时，路灯服务程序应该判断，多久没修改过，就将它置0；
或者协调器这边也可以判断；

――――――――2011-07-25――――――――――――――――――――――
1)网关程序修改。

--问题：
    spi发现问题，只有在连接情形下，第一次发数据，可以收到。其他情形均不能启动spi传输。
    下次需要在莫雪娟的帮助下，测下引脚电平情况；
--剩下工作：
    1）zigbee数据传输部分；
      下一步写好，可自定一个协议。n 1 .... ；n 2.....n是共有的包数；
      收到ack后，才能继续n,m....的发送；
      收到n n....后，置位
      
    2）co：填充lamppkg_info置位，一类是自己网络数据；另一类是传输来的。
           cmdpkg_info若busy，那么，解析后，广播或者单播
    
       zr：收到开、关、亮度调节命令之后，网关设备需要make a cmdframe，并在cmdpkg_info的busy置位；
           lamppkg.status若为busy，那么转给自己的0x0000
    
    3）每次hanlder之后，reset一遍命令或者数据
    
2）协调器自动检查上报情况，以查找掉灯的情形；所谓的8分钟

------------------------------------------------------2011-10-07-------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
增加和修改了许多功能：
1、修改通信协议:
    prefix command length roadid body ... sum;
    prefix---0x68
    command---unsigned char
    length---unsigned char, only for body, it means 0~255 chars
    roadid---unsigned short
    body---protocol body for communication
    sum---unsinged char, all bytes sum exception prefix
    增加道路编号在每帧中为了让服务器可以将收到的帧放入队列，每帧数据都是一个整体，数据的长度有255的限制，事实由于RAM空间
    问题我们给每帧数据的长度要求<0x40，由于使用了位图表在报告中，对于最多灯为500的道路，需要帧数据的长度500/8=62.5。
    
    修改帧接收函数sea_putframebyte(ch);接收完成给出recv标志，分析帧数据后必须用sea_releaseframe()将帧数据释放，否则不能接
    收以后数据。
    
    修改了帧数据发送函数sea_sendframe ( u8 id, u8 len, u8 * msg )；删除数据sframe，将数据直接发送到串口，同时也修改了另外
    一个帧发送函数sea_makeframe( u8 cmd, const char * format, ... )。
    
2、增加系统信息文件sysinfo.c/h保存系统主要数据，同时将这些数据写入flash：
    u16       mark;            // system information mark
    u16       maxdev;          // max. devices in ember network
    u16       road;            // 该组路灯所属的道路ID
    u16       number;          // 路灯物理编号，灯号(2 bytes(1~65535))
    u16       version;         // software version
    u32       open;            // 当前开灯时间和路灯需要持续时间(minute)
    u16       period;          // report time period (minute)
    u16       devid;           // device id for coordinator, router, enddevice and gateway
    u8        contents[EUI64_SIZE]; // physical address
    mode_t    mode;            // lamp works mode, manual, auto, test mode etc
    key_t     key;             // link and netwrok key
    channel_t channel;         // network channel information
    每次系统重起时读入到系统结构中，用户修改这些数据时需要调用sea_updatesysconfig()保存数据。

    