//------------------------------------------------------------------------------
// @file hal/micro/cortexm3/bootloader/cstartup-iar-boot.s79
// @brief Defines halEntryPoint in raw assembly since we must process
//        deep sleep reset events manually to ensure the stack is handled
//        properly.
//
//
// Copyright 2009 by Ember Corporation. All rights reserved.                *80*
//------------------------------------------------------------------------------

#include "../compiler/asm.h"
//Define our own copy of the reset event register (just what we need).
__EQU__(RESET_EVENT_ADDR, 0x4000002C)   //RESET_EVENT register address
__EQU__(RESET_DSLEEP_MASK, 0x00000020)  //Deep Sleep reset event mask
        
        //Export the halEntryPoint to the rest of the system, including linker
        __EXPORT__ halEntryPoint
        
        //These symbols are found in cstartup-iar-boot.c
        __IMPORT__ checkAppJumpToApp
        __IMPORT__ bootloaderEntryPoint
        __IMPORT__ halAppAddressTable
        

        __CODE__
        __THUMB__


checkDSleepJumpToApp:
        //Load the RESET_EVENT register and compare it against RESET_DSLEEP
        LDR  R0, =RESET_EVENT_ADDR
        LDR  R0, [R0]
        LDR  R1, =RESET_DSLEEP_MASK
        AND  R0, R0, R1
        //If RESET_DSLEEP is not set, bypass the jump to the app
        CBZ  R0, doNotJumpToApp
        //Grab the address of the halAppAddressTable
        LDR  R0, =halAppAddressTable
        //Load halAppAddressTable.baseTable.topOfStack (SP is first word)
        LDR  R1, [R0, #+0]
        //Load halAppAddressTable.baseTable.resetVector (PC is second word)
        LDR  R2, [R0, #+4]
        //Set the SP to the application's stack
        MOVS SP, R1
        //Branch to the app's reset vector
        BX   R2

doNotJumpToApp:
        BX   LR //it was not a deep sleep, so return back to halEntryPoint


//=============================================================================
// This is the entry point from a reset where code execution begins.  This
// function is defined in the vector table as the Reset Handler.
//
// The bootloader entry point must be instantiated in assembly to guarantee
// the stack pointer is handled properly when we are context restoring out of
// deep sleep.
//
// When we are reset due to deep sleep we need to switch the stack pointer
// to the applications stack before any other operation occures (that could
// use the stack).  Additionally, since we know we're context restoring
// then we can bypass the rest of the bootloader's startup and directly
// invoke the app's startup which will perform the context restore.
//
// NOTE: When we are invoking the app, we have to ensure that our stack usage
//       during bootloader's cstartup stays below the normal application
//       stack usage needed to performa  context restore so that we do
//       not interfere with live app memory.
//=============================================================================
halEntryPoint:
        //If we woke up from DeepSleep, jump to app to trigger context restore
        BL checkDSleepJumpToApp
        //It was not a DeepSleep, so check if we're not going to run the
        //bootloader and jump to the app's hal entry if we're not going to.
        BL checkAppJumpToApp
        //We're executing the bootloader, jump to the bootloader's hal entry.
        BL bootloaderEntryPoint
        //One of the above three will trigger, so we'll never return here
        
        
        __END__
