###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\lamp\fragment.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\lamp\fragment.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\fragment.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\fragment.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\lamp\fragment.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "hal.h"
      5          #include "fragment.h"
      6          
      7          // This is defined in hal/ember-configuration.c.
      8          extern int8u emberFragmentWindowSize;
      9          
     10          // DEBUG - Needed for Golden Unit Compliance
     11          // This bitmask controls how the node will respond to a set of
     12          // fragmented data.  It can be used to artifically set a number
     13          // of missed blocks in a fragmented transmission so that the sender
     14          // will retransmit.  It directly relates to the ACK bitmask field
     15          // sent by the receiver.  0xFF means that no blocks will be 
     16          // artifically specified as missed.  If set to something other than 0xFF
     17          // it will send back that bitmask for the first APS Ack and then reset
     18          // the bitmask to 0xFF.
     19          int8u emMissedBlocks = 0xFF;
     20          
     21          #define FRAGMENT_DEBUG(x)    do { } while (0)
     22          
     23          //------------------------------------------------------------------------------
     24          // Forward declarations.
     25          
     26          static EmberStatus sendNextFragments(void);
     27          static void abortTransmission(EmberStatus status);
     28          static void releaseFragments(EmberMessageBuffer *fragments);
     29          static void abortReception(void);
     30          
     31          //------------------------------------------------------------------------------
     32          // Sending
     33          
     34          // Information needed to actually send the messages.
     35          static EmberOutgoingMessageType fragmentOutgoingType = 0xFF;
     36          static int16u fragmentIndexOrDestination;
     37          static EmberApsFrame fragmentApsFrame;
     38          static int8u totalTxBlocks;
     39          static int8u txWindowBase;
     40          static EmberMessageBuffer txFragments[MAX_TOTAL_BLOCKS];
     41          static int8u blocksInTransit;              // How many payloads are in the air.
     42          

   \                                 In section .text, align 2, keep-with-next
     43          EmberStatus emberFragmentSendUnicast ( EmberOutgoingMessageType type,
     44                                                 int16u indexOrDestination,
     45                                                 EmberApsFrame *apsFrame,
     46                                                 EmberMessageBuffer payload,
     47                                                 int8u maxFragmentSize )
     48          {
   \                     emberFragmentSendUnicast: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4606             MOV      R6,R0
     49              int8u length = emberMessageBufferLength(payload);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x4699             MOV      R9,R3
   \   0000000E   0x468A             MOV      R10,R1
   \   00000010   0xF819 0x5000      LDRB     R5,[R9, R0]
     50              if (length == 0x00 || emberFragmentWindowSize == 0x00) 
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xBF1D             ITTTE    NE 
   \   00000018   0x.... 0x....      LDRNE.W  R0,??DataTable7_1
   \   0000001C   0x7800             LDRBNE   R0,[R0, #+0]
   \   0000001E   0x2800             CMPNE    R0,#+0
   \   00000020   0x2070             MOVEQ    R0,#+112
   \   00000022   0x4693             MOV      R11,R2
     51                  return EMBER_INVALID_CALL;
   \   00000024   0xD054             BEQ.N    ??emberFragmentSendUnicast_0
   \   00000026   0xF8DD 0x8028      LDR      R8,[SP, #+40]
     52              totalTxBlocks = (length + maxFragmentSize - 0x01) / maxFragmentSize;
   \   0000002A   0x.... 0x....      LDR.W    R7,??DataTable7_2
   \   0000002E   0x4644             MOV      R4,R8
   \   00000030   0x1960             ADDS     R0,R4,R5
   \   00000032   0x1E40             SUBS     R0,R0,#+1
   \   00000034   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000038   0x7078             STRB     R0,[R7, #+1]
     53              FRAGMENT_DEBUG(simPrint("sending %d fragments to %04X", totalTxBlocks, indexOrDestination););
     54          
     55              abortTransmission(EMBER_ERR_FATAL);   // Clear out any existing traffic.
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       abortTransmission
     56              MEMSET(txFragments, EMBER_NULL_MESSAGE_BUFFER, MAX_TOTAL_BLOCKS);
   \   00000040   0x220A             MOVS     R2,#+10
   \   00000042   0x21FF             MOVS     R1,#+255
   \   00000044   0x1D38             ADDS     R0,R7,#+4
   \   00000046   0x.... 0x....      BL       halCommonMemSet
     57              if (totalTxBlocks > MAX_TOTAL_BLOCKS) 
   \   0000004A   0x7878             LDRB     R0,[R7, #+1]
   \   0000004C   0x280B             CMP      R0,#+11
   \   0000004E   0xBFA8             IT       GE 
   \   00000050   0x2074             MOVGE    R0,#+116
     58                  return EMBER_MESSAGE_TOO_LONG;
   \   00000052   0xDA3D             BGE.N    ??emberFragmentSendUnicast_0
     59              
     60              fragmentOutgoingType = type;
   \   00000054   0x703E             STRB     R6,[R7, #+0]
     61              fragmentIndexOrDestination = indexOrDestination;
   \   00000056   0xF8A7 0xA01C      STRH     R10,[R7, #+28]
     62              MEMCOPY(&fragmentApsFrame, apsFrame, sizeof(EmberApsFrame));
   \   0000005A   0x220C             MOVS     R2,#+12
   \   0000005C   0x4659             MOV      R1,R11
   \   0000005E   0xF107 0x0010      ADD      R0,R7,#+16
   \   00000062   0x.... 0x....      BL       halCommonMemCopy
     63              {
     64                  int8u i = totalTxBlocks - 0x01;
   \   00000066   0x7878             LDRB     R0,[R7, #+1]
   \   00000068   0x1E46             SUBS     R6,R0,#+1
     65                  int8u fragmentSize = length - ((totalTxBlocks - 0x01) * maxFragmentSize);
   \   0000006A   0x1E40             SUBS     R0,R0,#+1
   \   0000006C   0xFB04 0x5410      MLS      R4,R4,R0,R5
     66                  int8u index = length;
     67          
     68                  do 
     69                  {
     70                      EmberMessageBuffer temp = emberFillLinkedBuffers(NULL, fragmentSize);
   \                     ??emberFragmentSendUnicast_1: (+1)
   \   00000070   0xB2E1             UXTB     R1,R4
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       emberFillLinkedBuffers
     71                      if (temp == EMBER_NULL_MESSAGE_BUFFER) 
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xD104             BNE.N    ??emberFragmentSendUnicast_2
     72                      {
     73                          releaseFragments(txFragments);
   \   0000007C   0x1D38             ADDS     R0,R7,#+4
   \   0000007E   0x.... 0x....      BL       releaseFragments
     74                          return EMBER_NO_BUFFERS;
   \   00000082   0x2018             MOVS     R0,#+24
   \   00000084   0xE024             B.N      ??emberFragmentSendUnicast_0
     75                      }
     76                      txFragments[i] = temp;
   \                     ??emberFragmentSendUnicast_2: (+1)
   \   00000086   0xB2F6             UXTB     R6,R6
   \   00000088   0x19F1             ADDS     R1,R6,R7
     77                      index -= fragmentSize;
   \   0000008A   0x1B2D             SUBS     R5,R5,R4
   \   0000008C   0x7108             STRB     R0,[R1, #+4]
   \   0000008E   0xB2ED             UXTB     R5,R5
     78                      emberCopyBufferBytes(temp, 0, payload, index, fragmentSize);
   \   00000090   0xB2E4             UXTB     R4,R4
   \   00000092   0x9400             STR      R4,[SP, #+0]
   \   00000094   0x462B             MOV      R3,R5
   \   00000096   0x464A             MOV      R2,R9
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x.... 0x....      BL       emberCopyBufferBytes
     79                      emberSetLinkedBuffersLength(payload, index);
   \   0000009E   0x4629             MOV      R1,R5
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x.... 0x....      BL       emberSetLinkedBuffersLength
     80                      fragmentSize = maxFragmentSize;
     81                      i--;
   \   000000A6   0x1E76             SUBS     R6,R6,#+1
     82                  } while (0x00 < index);
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0x4644             MOV      R4,R8
   \   000000AC   0xD1E0             BNE.N    ??emberFragmentSendUnicast_1
     83              }
     84              fragmentApsFrame.options |= (EMBER_APS_OPTION_FRAGMENT | EMBER_APS_OPTION_RETRY);
   \   000000AE   0x8AF8             LDRH     R0,[R7, #+22]
   \   000000B0   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000000B4   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000000B8   0x82F8             STRH     R0,[R7, #+22]
     85              txWindowBase    = 0x00;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x70B8             STRB     R0,[R7, #+2]
     86              blocksInTransit = 0x00;
   \   000000BE   0x70F8             STRB     R0,[R7, #+3]
     87              {
     88                  EmberStatus status = sendNextFragments();
   \   000000C0   0x.... 0x....      BL       sendNextFragments
   \   000000C4   0x0004             MOVS     R4,R0
     89                  if (status != EMBER_SUCCESS)
   \   000000C6   0xBF1C             ITT      NE 
     90                      releaseFragments(txFragments);
   \   000000C8   0x1D38             ADDNE    R0,R7,#+4
   \   000000CA   0x.... 0x....      BLNE     releaseFragments
     91                  return status;
   \   000000CE   0x4620             MOV      R0,R4
   \                     ??emberFragmentSendUnicast_0: (+1)
   \   000000D0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
     92              }
     93          }
     94          
     95          #if 0    // last version, i think the function has some bugs about return true and false! 
     96          boolean emberFragmentMessageSent(EmberApsFrame *apsFrame,
     97                                           EmberMessageBuffer buffer,
     98                                           EmberStatus status)
     99          {
    100            if (apsFrame->options & EMBER_APS_OPTION_FRAGMENT) 
    101            {
    102              int8u i;
    103              FRAGMENT_DEBUG(simPrint("fragment %d sent", buffer););
    104              for (i = 0; i < MAX_TOTAL_BLOCKS; i++)
    105                if (buffer == txFragments[i]) 
    106          	  {
    107                  FRAGMENT_DEBUG(simPrint("have status %02X for fragment %d",
    108                                          status, i););
    109                  if (status == EMBER_SUCCESS) 
    110          		{
    111                     txFragments[i] = EMBER_NULL_MESSAGE_BUFFER;
    112                     emberReleaseMessageBuffer(buffer);
    113                     blocksInTransit -= 1;
    114                     if (blocksInTransit == 0) 
    115          		   {
    116                       txWindowBase += emberFragmentWindowSize;
    117                       abortTransmission(sendNextFragments());
    118                     }
    119                  } 
    120          		else 
    121          		{
    122                    abortTransmission(status);
    123                  }
    124                }
    125              return TRUE;
    126            } 
    127            else
    128              return FALSE;
    129          }
    130          #endif

   \                                 In section .text, align 2, keep-with-next
    131          boolean emberFragmentMessageSent ( EmberApsFrame *apsFrame,
    132                                             EmberMessageBuffer buffer,
    133                                             EmberStatus status )
    134          {
   \                     emberFragmentMessageSent: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    135              if (apsFrame->options & EMBER_APS_OPTION_FRAGMENT) 
   \   00000002   0x88C0             LDRH     R0,[R0, #+6]
   \   00000004   0x0400             LSLS     R0,R0,#+16
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0xD522             BPL.N    ??emberFragmentMessageSent_0
    136              {
    137                  FRAGMENT_DEBUG(simPrint("fragment %d sent", buffer););
    138                  for (int8u i = 0x00; i < MAX_TOTAL_BLOCKS; i ++)
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0x....             LDR.N    R5,??DataTable7_2
    139                  {
    140                      if (buffer == txFragments[i]) 
   \                     ??emberFragmentMessageSent_1: (+1)
   \   00000010   0x1978             ADDS     R0,R7,R5
   \   00000012   0x7901             LDRB     R1,[R0, #+4]
   \   00000014   0x428C             CMP      R4,R1
   \   00000016   0xD118             BNE.N    ??emberFragmentMessageSent_2
    141                      {
    142                          FRAGMENT_DEBUG(simPrint("have status %02X for fragment %d", status, i););
    143                          if (status == EMBER_SUCCESS) 
   \   00000018   0xB9A6             CBNZ.N   R6,??emberFragmentMessageSent_3
    144                          {
    145                              txFragments[i] = EMBER_NULL_MESSAGE_BUFFER;
   \   0000001A   0x21FF             MOVS     R1,#+255
   \   0000001C   0x7101             STRB     R1,[R0, #+4]
    146                              emberReleaseMessageBuffer(buffer);
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emReleaseMessageBuffer
    147                              blocksInTransit -= 0x01;
   \   00000024   0x78E8             LDRB     R0,[R5, #+3]
   \   00000026   0x1E40             SUBS     R0,R0,#+1
   \   00000028   0x70E8             STRB     R0,[R5, #+3]
    148                              if (blocksInTransit == 0x00) 
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB940             CBNZ.N   R0,??emberFragmentMessageSent_4
    149                              {
    150                                  txWindowBase += emberFragmentWindowSize;
   \   0000002E   0x....             LDR.N    R1,??DataTable7_1
   \   00000030   0x78A8             LDRB     R0,[R5, #+2]
   \   00000032   0x7809             LDRB     R1,[R1, #+0]
   \   00000034   0x1808             ADDS     R0,R1,R0
   \   00000036   0x70A8             STRB     R0,[R5, #+2]
    151                                  abortTransmission(sendNextFragments());
   \   00000038   0x.... 0x....      BL       sendNextFragments
   \   0000003C   0x.... 0x....      BL       abortTransmission
    152                              }
    153                              return TRUE;
   \                     ??emberFragmentMessageSent_4: (+1)
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xBDF2             POP      {R1,R4-R7,PC}
    154                          } 
    155                          else 
    156                              abortTransmission(status);
   \                     ??emberFragmentMessageSent_3: (+1)
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       abortTransmission
    157                      }
    158                  } 
   \                     ??emberFragmentMessageSent_2: (+1)
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \   0000004C   0xB2FF             UXTB     R7,R7
   \   0000004E   0x2F0A             CMP      R7,#+10
   \   00000050   0xDBDE             BLT.N    ??emberFragmentMessageSent_1
    159              }
    160              return FALSE;
   \                     ??emberFragmentMessageSent_0: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    161          }
    162          
    163          //-----------------the following is static functions----------------------------

   \                                 In section .text, align 2, keep-with-next
    164          static EmberStatus sendNextFragments ( void )
    165          {
   \                     sendNextFragments: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    166              int8u i;
    167          
    168              for (i = txWindowBase; (i - txWindowBase < emberFragmentWindowSize && i < totalTxBlocks); i ++) 
   \   00000002   0x....             LDR.N    R4,??DataTable7_2
   \   00000004   0x....             LDR.N    R5,??DataTable7_1
   \   00000006   0x78A6             LDRB     R6,[R4, #+2]
   \   00000008   0xE004             B.N      ??sendNextFragments_0
    169              {
    170                  EmberStatus status;
    171                  fragmentApsFrame.groupId = HIGH_LOW_TO_INT(totalTxBlocks, i);
    172                  status                   = emberSendUnicast(fragmentOutgoingType,
    173                                                              fragmentIndexOrDestination,
    174                                                              &fragmentApsFrame,
    175                                                              txFragments[i]);
    176                  if (status == EMBER_SUCCESS)
    177                      blocksInTransit += 0x01;
   \                     ??sendNextFragments_1: (+1)
   \   0000000A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x1C76             ADDS     R6,R6,#+1
   \   00000010   0x70E0             STRB     R0,[R4, #+3]
   \   00000012   0xB2F6             UXTB     R6,R6
   \                     ??sendNextFragments_0: (+1)
   \   00000014   0x78A0             LDRB     R0,[R4, #+2]
   \   00000016   0x7829             LDRB     R1,[R5, #+0]
   \   00000018   0x1A30             SUBS     R0,R6,R0
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xBFBC             ITT      LT 
   \   0000001E   0x7860             LDRBLT   R0,[R4, #+1]
   \   00000020   0x4286             CMPLT    R6,R0
   \   00000022   0xDA0F             BGE.N    ??sendNextFragments_2
   \   00000024   0xF006 0x01FF      AND      R1,R6,#0xFF
   \   00000028   0xEB01 0x2000      ADD      R0,R1,R0, LSL #+8
   \   0000002C   0x8320             STRH     R0,[R4, #+24]
   \   0000002E   0x1930             ADDS     R0,R6,R4
   \   00000030   0x7903             LDRB     R3,[R0, #+4]
   \   00000032   0x8BA1             LDRH     R1,[R4, #+28]
   \   00000034   0x7820             LDRB     R0,[R4, #+0]
   \   00000036   0xF104 0x0210      ADD      R2,R4,#+16
   \   0000003A   0x.... 0x....      BL       emberSendUnicast
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD0E3             BEQ.N    ??sendNextFragments_1
    178                  else
    179                      return status;
   \   00000042   0xBD70             POP      {R4-R6,PC}
    180              }
    181              if (blocksInTransit == 0x00) 
   \                     ??sendNextFragments_2: (+1)
   \   00000044   0x78E0             LDRB     R0,[R4, #+3]
   \   00000046   0xB920             CBNZ.N   R0,??sendNextFragments_3
    182              {
    183                  FRAGMENT_DEBUG(simPrint("successfully sent %d fragments to %04X", totalTxBlocks, fragmentIndexOrDestination););
    184                  fragmentOutgoingType = 0xFF;
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0x7020             STRB     R0,[R4, #+0]
    185                  emberFragmentMessageSentHandler(EMBER_SUCCESS);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       emberFragmentMessageSentHandler
    186              }
    187              return EMBER_SUCCESS;
   \                     ??sendNextFragments_3: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD70             POP      {R4-R6,PC}       ;; return
    188          }
    189          
    190          // Release the current window's payloads.

   \                                 In section .text, align 2, keep-with-next
    191          static void releaseFragments ( EmberMessageBuffer *fragments )
    192          {
   \                     releaseFragments: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    193              for (int8u i = 0x00; i < MAX_TOTAL_BLOCKS; i ++) 
   \   00000004   0x2500             MOVS     R5,#+0
    194              {
    195                  EmberMessageBuffer fragment = fragments[i];
   \                     ??releaseFragments_0: (+1)
   \   00000006   0x5D28             LDRB     R0,[R5, R4]
    196                  if (fragment != EMBER_NULL_MESSAGE_BUFFER) 
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0xD003             BEQ.N    ??releaseFragments_1
    197                  {
    198                      fragments[i] = EMBER_NULL_MESSAGE_BUFFER;
   \   0000000C   0x21FF             MOVS     R1,#+255
   \   0000000E   0x5529             STRB     R1,[R5, R4]
    199                      emberReleaseMessageBuffer(fragment);
   \   00000010   0x.... 0x....      BL       emReleaseMessageBuffer
    200                  }
    201              }
   \                     ??releaseFragments_1: (+1)
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \   00000016   0x2D0A             CMP      R5,#+10
   \   00000018   0xDBF5             BLT.N    ??releaseFragments_0
    202          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    203          

   \                                 In section .text, align 2, keep-with-next
    204          static void abortTransmission ( EmberStatus status )
    205          {
   \                     abortTransmission: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    206              if (status != EMBER_SUCCESS && fragmentOutgoingType != 0xFF) 
   \   00000004   0xBF1E             ITTT     NE 
   \   00000006   0x....             LDRNE.N  R5,??DataTable7_2
   \   00000008   0x7828             LDRBNE   R0,[R5, #+0]
   \   0000000A   0x28FF             CMPNE    R0,#+255
   \   0000000C   0xD009             BEQ.N    ??abortTransmission_0
    207              {
    208                  FRAGMENT_DEBUG(simPrint("aborting %d fragments to %04X", totalTxBlocks, fragmentIndexOrDestination););
    209                  releaseFragments(txFragments);
   \   0000000E   0x1D28             ADDS     R0,R5,#+4
   \   00000010   0x.... 0x....      BL       releaseFragments
    210                  fragmentOutgoingType = 0xFF;
   \   00000014   0x20FF             MOVS     R0,#+255
   \   00000016   0x7028             STRB     R0,[R5, #+0]
    211                  emberFragmentMessageSentHandler(status);
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000001E   0x.... 0x....      B.W      emberFragmentMessageSentHandler
    212              }
    213          }
   \                     ??abortTransmission_0: (+1)
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .data, align 4
   \                     emMissedBlocks:
   \   00000000   0xFF               DC8 255
   \   00000001   0x00               DC8 0
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    214          
    215          //------------------------------------------------------------------------------
    216          // Receiving.
    217          // These two are used to identify incoming blocks.
    218          static EmberNodeId fragmentSource = EMBER_NULL_NODE_ID;
    219          static int8u fragmentApsSequenceNumber;
    220          
    221          static int8u rxWindowBase;
    222          static int8u blockMask;                // Mask to be sent in the next ACK.
    223          static int8u expectedRxBlocks;         // How many are supposed to arrive.
    224          static int8u blocksReceived;           // How many have arrived.
    225          static EmberMessageBuffer rxFragments[MAX_TOTAL_BLOCKS];
    226          
    227          static EmberEventControl abortReceptionEvent = {0, 0};    // An event for timing out failed incoming packets.
   \                     abortReceptionEvent:
   \   00000014   0x00 0x00          DC8 0, 0
   \   00000016   0x0000             DC16 0
   \   00000018   0xFFFF             DC16 65535

   \                                 In section .data, align 4
   \                     fragmentOutgoingType:
   \   00000000   0xFF               DC8 255
   \   00000001   0x00               DC8 0
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000001C   0x00 0x00          DC8 0, 0
    228          
    229          #define lowBitMask(n) ((1 << (n)) - 1)                    // A mask with the low n bits set.
    230          

   \                                 In section .text, align 2, keep-with-next
    231          static void setBlockMask ( void )
    232          {
   \                     setBlockMask: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    233              int8u highestZeroBit = emberFragmentWindowSize;                  // Unused bits must be 1.
   \   00000002   0x....             LDR.N    R0,??DataTable7_1
    234              
    235              if (rxWindowBase + emberFragmentWindowSize > expectedRxBlocks)   // If we are in the final window, there may be additional unused bits.
   \   00000004   0x....             LDR.N    R2,??DataTable7_3
   \   00000006   0x7894             LDRB     R4,[R2, #+2]
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x7913             LDRB     R3,[R2, #+4]
   \   0000000C   0x1904             ADDS     R4,R0,R4
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x42A3             CMP      R3,R4
   \   00000012   0xBFBC             ITT      LT 
   \   00000014   0xFB93 0xF1F0      SDIVLT   R1,R3,R0
   \   00000018   0xFB00 0x3111      MLSLT    R1,R0,R1,R3
    236              {
    237                  highestZeroBit = (expectedRxBlocks % emberFragmentWindowSize);
    238              }
    239              blockMask = ~lowBitMask(highestZeroBit);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x4088             LSLS     R0,R0,R1
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0x43C0             MVNS     R0,R0
   \   00000024   0x70D0             STRB     R0,[R2, #+3]
    240          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    241          

   \                                 In section .text, align 2, keep-with-next
    242          boolean emberFragmentIncomingMessage ( EmberApsFrame *apsFrame, EmberMessageBuffer payload )
    243          {
   \                     emberFragmentIncomingMessage: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB083             SUB      SP,SP,#+12
    244              if (!(apsFrame->options & EMBER_APS_OPTION_FRAGMENT))
   \   00000008   0x88E0             LDRH     R0,[R4, #+6]
   \   0000000A   0x0400             LSLS     R0,R0,#+16
   \   0000000C   0x4688             MOV      R8,R1
   \   0000000E   0xD402             BMI.N    ??emberFragmentIncomingMessage_0
    245                  return FALSE;        // Not a fragment, process as usual.
   \                     ??emberFragmentIncomingMessage_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??emberFragmentIncomingMessage_2: (+1)
   \   00000012   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    246              else 
    247              {
    248                  int8u blockNumber = LOW_BYTE(apsFrame->groupId);
   \                     ??emberFragmentIncomingMessage_0: (+1)
   \   00000016   0x....             LDR.N    R5,??DataTable7_3
   \   00000018   0xF894 0xA008      LDRB     R10,[R4, #+8]
   \   0000001C   0x8B28             LDRH     R0,[R5, #+24]
   \   0000001E   0x....             LDR.N    R6,??DataTable7_4
   \   00000020   0xF64F 0x7BFF      MOVW     R11,#+65535
   \   00000024   0x4558             CMP      R0,R11
   \   00000026   0xD117             BNE.N    ??CrossCallReturnLabel_1
   \   00000028   0x....             LDR.N    R0,??DataTable7_1
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x4582             CMP      R10,R0
   \   0000002E   0xDA13             BGE.N    ??CrossCallReturnLabel_1
    249          
    250                  if (fragmentSource == EMBER_NULL_NODE_ID && blockNumber < emberFragmentWindowSize) 
    251                  {
    252                      fragmentSource = emberGetSender();
   \   00000030   0x.... 0x....      BL       emberGetSender
   \   00000034   0x8328             STRH     R0,[R5, #+24]
    253                      fragmentApsSequenceNumber = apsFrame->sequence;
   \   00000036   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000038   0x7068             STRB     R0,[R5, #+1]
    254                      rxWindowBase     = 0x00;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x70A8             STRB     R0,[R5, #+2]
    255                      blocksReceived   = 0x00;
   \   0000003E   0x7168             STRB     R0,[R5, #+5]
    256                      expectedRxBlocks = 0xFF;
   \   00000040   0x20FF             MOVS     R0,#+255
   \   00000042   0x7128             STRB     R0,[R5, #+4]
    257                      setBlockMask();
   \   00000044   0x.... 0x....      BL       setBlockMask
    258                      MEMSET(rxFragments, EMBER_NULL_MESSAGE_BUFFER, MAX_TOTAL_BLOCKS);
   \   00000048   0x220A             MOVS     R2,#+10
   \   0000004A   0x21FF             MOVS     R1,#+255
   \   0000004C   0xF105 0x0008      ADD      R0,R5,#+8
   \   00000050   0x.... 0x....      BL       halCommonMemSet
    259                      FRAGMENT_DEBUG(simPrint("receiving fragments from %04X", fragmentSource););
    260                      emberEventControlSetDelayMS(abortReceptionEvent, emberApsAckTimeoutMs * ZIGBEE_APSC_MAX_TRANSMIT_RETRIES);
   \   00000054   0x.... 0x....      BL       ?Subroutine0
    261                  }
    262          
    263                  if (!(emberGetSender() == fragmentSource && apsFrame->sequence == fragmentApsSequenceNumber))
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000058   0x.... 0x....      BL       emberGetSender
   \   0000005C   0x8B29             LDRH     R1,[R5, #+24]
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xBF02             ITTT     EQ 
   \   00000062   0x7AA0             LDRBEQ   R0,[R4, #+10]
   \   00000064   0x7869             LDRBEQ   R1,[R5, #+1]
   \   00000066   0x4288             CMPEQ    R0,R1
   \   00000068   0xD129             BNE.N    ??emberFragmentIncomingMessage_3
    264                      return TRUE;      // Drop unexpected fragments.
    265                  else 
    266                  {
    267                      if (blockMask == 0xFF && rxWindowBase + emberFragmentWindowSize <= blockNumber) 
   \   0000006A   0x78E8             LDRB     R0,[R5, #+3]
   \   0000006C   0x28FF             CMP      R0,#+255
   \   0000006E   0xD10B             BNE.N    ??CrossCallReturnLabel_0
   \   00000070   0x....             LDR.N    R1,??DataTable7_1
   \   00000072   0x78A8             LDRB     R0,[R5, #+2]
   \   00000074   0x7809             LDRB     R1,[R1, #+0]
   \   00000076   0x180A             ADDS     R2,R1,R0
   \   00000078   0x4592             CMP      R10,R2
   \   0000007A   0xDB05             BLT.N    ??CrossCallReturnLabel_0
    268                      {
    269                          rxWindowBase += emberFragmentWindowSize;
   \   0000007C   0x1808             ADDS     R0,R1,R0
   \   0000007E   0x70A8             STRB     R0,[R5, #+2]
    270                          setBlockMask();
   \   00000080   0x.... 0x....      BL       setBlockMask
    271                          emberEventControlSetDelayMS(abortReceptionEvent, emberApsAckTimeoutMs * ZIGBEE_APSC_MAX_TRANSMIT_RETRIES);
   \   00000084   0x.... 0x....      BL       ?Subroutine0
    272                      }
    273          
    274                      if (rxWindowBase + emberFragmentWindowSize <= blockNumber)
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000088   0x....             LDR.N    R0,??DataTable7_1
   \   0000008A   0x7801             LDRB     R1,[R0, #+0]
   \   0000008C   0x78AA             LDRB     R2,[R5, #+2]
   \   0000008E   0x4608             MOV      R0,R1
   \   00000090   0x1882             ADDS     R2,R0,R2
   \   00000092   0x4592             CMP      R10,R2
   \   00000094   0xDA13             BGE.N    ??emberFragmentIncomingMessage_3
    275                          return TRUE;    // Drop unexpected fragments.
    276                      else 
    277                      {
    278                          int8u mask = 1 << (blockNumber % emberFragmentWindowSize);
   \   00000096   0xFB9A 0xF2F0      SDIV     R2,R10,R0
   \   0000009A   0xF04F 0x0901      MOV      R9,#+1
   \   0000009E   0xFB00 0xA012      MLS      R0,R0,R2,R10
   \   000000A2   0xFA09 0xF600      LSL      R6,R9,R0
    279                          boolean isNew = !(mask & blockMask);
   \   000000A6   0x78E8             LDRB     R0,[R5, #+3]
    280          
    281                          if (!(mask & emMissedBlocks))         // Golden Unit Compliance
   \   000000A8   0x782A             LDRB     R2,[R5, #+0]
   \   000000AA   0xB2F6             UXTB     R6,R6
   \   000000AC   0x4030             ANDS     R0,R0,R6
   \   000000AE   0x1E47             SUBS     R7,R0,#+1
   \   000000B0   0x41BF             SBCS     R7,R7,R7
   \   000000B2   0x0FFF             LSRS     R7,R7,#+31
   \   000000B4   0x4216             TST      R6,R2
   \   000000B6   0xD104             BNE.N    ??emberFragmentIncomingMessage_4
    282                          {
    283                              FRAGMENT_DEBUG(simPrint("pretending to miss fragment %d (%04X)", blockNumber, apsFrame->groupId););
    284                              emMissedBlocks |= mask;           // clear the bit so a retransmission will succeed.
   \   000000B8   0xEA46 0x0002      ORR      R0,R6,R2
   \   000000BC   0x7028             STRB     R0,[R5, #+0]
    285                              return TRUE;
    286                          }                                     // End Compliance
    287          
    288                          FRAGMENT_DEBUG(simPrint("have fragment %d (%04X)", blockNumber, apsFrame->groupId););
    289          
    290                          if (blockNumber == 0x00) 
    291                          {
    292                              expectedRxBlocks = HIGH_BYTE(apsFrame->groupId);
    293                              if (expectedRxBlocks < emberFragmentWindowSize) // Need to set unused bits in the window to 1. Previously a full window was assumed.
    294                                  setBlockMask();
    295                              FRAGMENT_DEBUG(simPrint("%d fragments from %04X", expectedRxBlocks, fragmentSource););
    296                              if (MAX_TOTAL_BLOCKS < expectedRxBlocks)
    297                                  goto kickout;
    298                          }
    299          
    300                          blockMask |= mask;
    301                          if (isNew) 
    302                          {
    303                              blocksReceived += 0x01;
    304                              rxFragments[blockNumber] = payload;
    305                              emberHoldMessageBuffer(payload);
    306                          }
    307                  
    308                          // ACK if it is the last block in the fragmented message, or it is a new message and we have all fragments 
    309                          // in the window, or it is the last block in the window.
    310                          if (blockNumber == expectedRxBlocks - 0x01 || (blockMask | lowBitMask(blockNumber % emberFragmentWindowSize)) == 0xFF) 
    311                          {
    312                              FRAGMENT_DEBUG(simPrint("sending ack base %d mask %02X", rxWindowBase, blockMask););
    313                              emberSetReplyFragmentData(HIGH_LOW_TO_INT(blockMask, rxWindowBase));
    314                              emberSendReply(apsFrame->clusterId, EMBER_NULL_MESSAGE_BUFFER);
    315                          }
    316                  
    317                          // To avoid the uncertain effects of copying from a buffer onto itself, we copy the payload into another buffer and 
    318                          // then copy everything back into the original payload.
    319                          if (blocksReceived == expectedRxBlocks) 
    320                          {
    321                              EmberMessageBuffer copy = emberCopyLinkedBuffers(payload);
    322                              int8u i;
    323                              int8u length = 0x00;
    324                    
    325                              if (copy == EMBER_NULL_MESSAGE_BUFFER)
    326                                  goto kickout;
    327                    
    328                              rxFragments[blockNumber] = copy;
    329                              emberReleaseMessageBuffer(payload);
    330                              emberSetLinkedBuffersLength(payload, 0x00);
    331          
    332                              for (i = 0x00; i < expectedRxBlocks; i ++) 
    333                              {
    334                                  EmberMessageBuffer temp = rxFragments[i];
    335                                  int8u tempLength = emberMessageBufferLength(temp);
    336          
    337                                  if (emberSetLinkedBuffersLength(payload, length + tempLength) != EMBER_SUCCESS)
    338                                      goto kickout;
    339          
    340                                  emberCopyBufferBytes(payload, length, temp, 0, tempLength);
    341                                  length += tempLength;
    342          
    343                                  emberReleaseMessageBuffer(temp);
    344                                  rxFragments[i] = EMBER_NULL_MESSAGE_BUFFER;
    345                              }
    346                              FRAGMENT_DEBUG(simPrint("received %d fragments from %04X", expectedRxBlocks, fragmentSource););
    347                              FRAGMENT_DEBUG(printPacketBuffers(payload););
    348                              fragmentSource = EMBER_NULL_NODE_ID;
    349                              return FALSE;
    350                          } 
    351                          else
    352                              return TRUE;
   \                     ??emberFragmentIncomingMessage_3: (+1)
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE7A7             B.N      ??emberFragmentIncomingMessage_2
   \                     ??emberFragmentIncomingMessage_4: (+1)
   \   000000C2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000C6   0xD109             BNE.N    ??emberFragmentIncomingMessage_5
   \   000000C8   0x8920             LDRH     R0,[R4, #+8]
   \   000000CA   0x0A00             LSRS     R0,R0,#+8
   \   000000CC   0x7128             STRB     R0,[R5, #+4]
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xBF38             IT       CC 
   \   000000D2   0x.... 0x....      BLCC     setBlockMask
   \   000000D6   0x7928             LDRB     R0,[R5, #+4]
   \   000000D8   0x280B             CMP      R0,#+11
   \   000000DA   0xDA65             BGE.N    ??emberFragmentIncomingMessage_6
   \                     ??emberFragmentIncomingMessage_5: (+1)
   \   000000DC   0x78E8             LDRB     R0,[R5, #+3]
   \   000000DE   0x4330             ORRS     R0,R6,R0
   \   000000E0   0x70E8             STRB     R0,[R5, #+3]
   \   000000E2   0xEB0A 0x0605      ADD      R6,R10,R5
   \   000000E6   0xB13F             CBZ.N    R7,??emberFragmentIncomingMessage_7
   \   000000E8   0x7968             LDRB     R0,[R5, #+5]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x7168             STRB     R0,[R5, #+5]
   \   000000EE   0xF886 0x8008      STRB     R8,[R6, #+8]
   \   000000F2   0x4640             MOV      R0,R8
   \   000000F4   0x.... 0x....      BL       emHoldMessageBuffer
   \                     ??emberFragmentIncomingMessage_7: (+1)
   \   000000F8   0x7929             LDRB     R1,[R5, #+4]
   \   000000FA   0x78E8             LDRB     R0,[R5, #+3]
   \   000000FC   0x1E49             SUBS     R1,R1,#+1
   \   000000FE   0x458A             CMP      R10,R1
   \   00000100   0xD00B             BEQ.N    ??emberFragmentIncomingMessage_8
   \   00000102   0x....             LDR.N    R1,??DataTable7_1
   \   00000104   0x7809             LDRB     R1,[R1, #+0]
   \   00000106   0xFB9A 0xF2F1      SDIV     R2,R10,R1
   \   0000010A   0xFB01 0xA112      MLS      R1,R1,R2,R10
   \   0000010E   0xFA09 0xF101      LSL      R1,R9,R1
   \   00000112   0x1E49             SUBS     R1,R1,#+1
   \   00000114   0x4301             ORRS     R1,R1,R0
   \   00000116   0x29FF             CMP      R1,#+255
   \   00000118   0xD109             BNE.N    ??emberFragmentIncomingMessage_9
   \                     ??emberFragmentIncomingMessage_8: (+1)
   \   0000011A   0x78A9             LDRB     R1,[R5, #+2]
   \   0000011C   0xEB01 0x2000      ADD      R0,R1,R0, LSL #+8
   \   00000120   0xB280             UXTH     R0,R0
   \   00000122   0x.... 0x....      BL       emberSetReplyFragmentData
   \   00000126   0x8860             LDRH     R0,[R4, #+2]
   \   00000128   0x21FF             MOVS     R1,#+255
   \   0000012A   0x.... 0x....      BL       emberSendReply
   \                     ??emberFragmentIncomingMessage_9: (+1)
   \   0000012E   0x7968             LDRB     R0,[R5, #+5]
   \   00000130   0x7929             LDRB     R1,[R5, #+4]
   \   00000132   0x4288             CMP      R0,R1
   \   00000134   0xD1C3             BNE.N    ??emberFragmentIncomingMessage_3
   \   00000136   0x4640             MOV      R0,R8
   \   00000138   0x.... 0x....      BL       emberCopyLinkedBuffers
   \   0000013C   0x2400             MOVS     R4,#+0
   \   0000013E   0x28FF             CMP      R0,#+255
   \   00000140   0xD032             BEQ.N    ??emberFragmentIncomingMessage_6
   \   00000142   0x7230             STRB     R0,[R6, #+8]
   \   00000144   0x46A2             MOV      R10,R4
   \   00000146   0x4640             MOV      R0,R8
   \   00000148   0x.... 0x....      BL       emReleaseMessageBuffer
   \   0000014C   0x2100             MOVS     R1,#+0
   \   0000014E   0x4640             MOV      R0,R8
   \   00000150   0x.... 0x....      BL       emberSetLinkedBuffersLength
   \   00000154   0xE022             B.N      ??emberFragmentIncomingMessage_10
   \                     ??emberFragmentIncomingMessage_11: (+1)
   \   00000156   0xEB0A 0x0905      ADD      R9,R10,R5
   \   0000015A   0x....             LDR.N    R0,??DataTable7
   \   0000015C   0xF899 0x6008      LDRB     R6,[R9, #+8]
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0x5C37             LDRB     R7,[R6, R0]
   \   00000164   0x1938             ADDS     R0,R7,R4
   \   00000166   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000016A   0x4640             MOV      R0,R8
   \   0000016C   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000170   0x.... 0x....      BL       emberSetLinkedBuffersLength
   \   00000174   0xB9C0             CBNZ.N   R0,??emberFragmentIncomingMessage_6
   \   00000176   0x9700             STR      R7,[SP, #+0]
   \   00000178   0x2300             MOVS     R3,#+0
   \   0000017A   0x4632             MOV      R2,R6
   \   0000017C   0x4621             MOV      R1,R4
   \   0000017E   0x4640             MOV      R0,R8
   \   00000180   0x.... 0x....      BL       emberCopyBufferBytes
   \   00000184   0xF89D 0x4004      LDRB     R4,[SP, #+4]
   \   00000188   0x4630             MOV      R0,R6
   \   0000018A   0x.... 0x....      BL       emReleaseMessageBuffer
   \   0000018E   0x20FF             MOVS     R0,#+255
   \   00000190   0xF889 0x0008      STRB     R0,[R9, #+8]
   \   00000194   0xF10A 0x0001      ADD      R0,R10,#+1
   \   00000198   0xFA5F 0xFA80      UXTB     R10,R0
   \                     ??emberFragmentIncomingMessage_10: (+1)
   \   0000019C   0x7928             LDRB     R0,[R5, #+4]
   \   0000019E   0x4582             CMP      R10,R0
   \   000001A0   0xDBD9             BLT.N    ??emberFragmentIncomingMessage_11
   \   000001A2   0xF8A5 0xB018      STRH     R11,[R5, #+24]
   \   000001A6   0xE733             B.N      ??emberFragmentIncomingMessage_1
    353                      }
    354                  }
    355              }
    356          kickout:
    357              abortReception();
   \                     ??emberFragmentIncomingMessage_6: (+1)
   \   000001A8   0x.... 0x....      BL       abortReception
   \   000001AC   0xE787             B.N      ??emberFragmentIncomingMessage_3
    358              return TRUE;
    359          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x8830             LDRH     R0,[R6, #+0]
   \   00000002   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   00000006   0xB289             UXTH     R1,R1
   \   00000008   0xF105 0x0014      ADD      R0,R5,#+20
   \   0000000C   0x.... 0x....      B.W      emEventControlSetDelayMS
    360          
    361          // Flush the current message if blocks stop arriving.

   \                                 In section .text, align 2, keep-with-next
    362          static void abortReception ( void )
    363          {
   \                     abortReception: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    364              emberEventControlSetInactive(abortReceptionEvent);
   \   00000002   0x....             LDR.N    R4,??DataTable7_3
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7520             STRB     R0,[R4, #+20]
    365          
    366              if (fragmentSource != EMBER_NULL_NODE_ID) 
   \   00000008   0xF64F 0x75FF      MOVW     R5,#+65535
   \   0000000C   0x8B20             LDRH     R0,[R4, #+24]
   \   0000000E   0x42A8             CMP      R0,R5
   \   00000010   0xD004             BEQ.N    ??abortReception_0
    367              {
    368                  FRAGMENT_DEBUG(simPrint("aborting reception of %d fragments from %04X", expectedRxBlocks, fragmentSource););
    369                  releaseFragments(rxFragments);
   \   00000012   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000016   0x.... 0x....      BL       releaseFragments
    370                  fragmentSource = EMBER_NULL_NODE_ID;
   \   0000001A   0x8325             STRH     R5,[R4, #+24]
    371              }
    372          }
   \                     ??abortReception_0: (+1)
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    373          

   \                                 In section .text, align 4, keep-with-next
    374          static EmberEventData fragmentationEvents[] = { {&abortReceptionEvent, abortReception}, {NULL, NULL} };      // terminator
   \                     fragmentationEvents:
   \   00000000   0x........         DC32 abortReceptionEvent, abortReception, 0H, 0H
   \              0x........   
   \              0x00000000   
   \              0x00000000   
    375          

   \                                 In section .text, align 2, keep-with-next
    376          void emberFragmentTick ( void )
    377          {
    378              emberRunEvents(fragmentationEvents);
   \                     emberFragmentTick: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,fragmentationEvents
   \   00000004   0x.... 0x....      B.W      emberRunEvents
    379          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     emberFragmentWindowSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     fragmentOutgoingType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     emMissedBlocks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     emberApsAckTimeoutMs
    380          
    381          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   abortReception
        16   -> releaseFragments
      16   abortTransmission
        16   -> releaseFragments
      48   emberFragmentIncomingMessage
        48   -> abortReception
        48   -> emEventControlSetDelayMS
        48   -> emHoldMessageBuffer
        48   -> emReleaseMessageBuffer
        48   -> emberCopyBufferBytes
        48   -> emberCopyLinkedBuffers
        48   -> emberGetSender
        48   -> emberSendReply
        48   -> emberSetLinkedBuffersLength
        48   -> emberSetReplyFragmentData
        48   -> halCommonMemSet
        48   -> setBlockMask
      24   emberFragmentMessageSent
        24   -> abortTransmission
        24   -> emReleaseMessageBuffer
        24   -> sendNextFragments
      40   emberFragmentSendUnicast
        40   -> abortTransmission
        40   -> emberCopyBufferBytes
        40   -> emberFillLinkedBuffers
        40   -> emberSetLinkedBuffersLength
        40   -> halCommonMemCopy
        40   -> halCommonMemSet
        40   -> releaseFragments
        40   -> sendNextFragments
       0   emberFragmentTick
         0   -> emberRunEvents
      16   releaseFragments
        16   -> emReleaseMessageBuffer
      16   sendNextFragments
        16   -> emberFragmentMessageSentHandler
        16   -> emberSendUnicast
       8   setBlockMask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      16  ?Subroutine0
      30  abortReception
      36  abortTransmission
      26  emMissedBlocks
          fragmentApsSequenceNumber
          rxWindowBase
          blockMask
          expectedRxBlocks
          blocksReceived
          rxFragments
          abortReceptionEvent
          fragmentSource
     430  emberFragmentIncomingMessage
      86  emberFragmentMessageSent
     212  emberFragmentSendUnicast
       8  emberFragmentTick
      30  fragmentOutgoingType
          totalTxBlocks
          txWindowBase
          blocksInTransit
          txFragments
          fragmentApsFrame
          fragmentIndexOrDestination
      16  fragmentationEvents
      28  releaseFragments
      86  sendNextFragments
      40  setBlockMask

 
    56 bytes in section .data
 1 008 bytes in section .text
 
 1 008 bytes of CODE memory
    56 bytes of DATA memory

Errors: none
Warnings: none
