###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\hal\token.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\hal\token.c -D ENABLE_GATEWAY
#        -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\token.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\token.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\hal\token.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "error.h"
      5          #include "hal.h"
      6          #include "serial.h"
      7          #include "sim-eeprom.h"
      8          
      9          //special handling for the manufacturing tokens
     10          #define DEFINETOKENS
     11          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...)
     12          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...) \
     13            const int16u TOKEN_##name = TOKEN_##name##_ADDRESS;
     14            #include "token-stack.h"

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CHIP_DATA
   \                     TOKEN_MFG_CHIP_DATA:
   \   00000000   0x077E             DC16 1918

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PART_DATA
   \                     TOKEN_MFG_PART_DATA:
   \   00000000   0x0796             DC16 1942

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TESTER_DATA
   \                     TOKEN_MFG_TESTER_DATA:
   \   00000000   0x079C             DC16 1948

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EMBER_EUI_64
   \                     TOKEN_MFG_EMBER_EUI_64:
   \   00000000   0x07A2             DC16 1954

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_NORMAL
   \                     TOKEN_MFG_ANALOG_TRIM_NORMAL:
   \   00000000   0x07AA             DC16 1962

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOOST
   \                     TOKEN_MFG_ANALOG_TRIM_BOOST:
   \   00000000   0x07BE             DC16 1982

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOTH
   \                     TOKEN_MFG_ANALOG_TRIM_BOTH:
   \   00000000   0x07D2             DC16 2002

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_REG_TRIM
   \                     TOKEN_MFG_REG_TRIM:
   \   00000000   0x07DC             DC16 2012

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_1V8_REG_VOLTAGE
   \                     TOKEN_MFG_1V8_REG_VOLTAGE:
   \   00000000   0x07DE             DC16 2014

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_VREF_VOLTAGE
   \                     TOKEN_MFG_VREF_VOLTAGE:
   \   00000000   0x07E0             DC16 2016

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TEMP_CAL
   \                     TOKEN_MFG_TEMP_CAL:
   \   00000000   0x07E2             DC16 2018

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_VERSION
   \                     TOKEN_MFG_FIB_VERSION:
   \   00000000   0x07F4             DC16 2036

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_CHECKSUM
   \                     TOKEN_MFG_FIB_CHECKSUM:
   \   00000000   0x07F6             DC16 2038

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_OBS
   \                     TOKEN_MFG_FIB_OBS:
   \   00000000   0x07F8             DC16 2040

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CIB_OBS
   \                     TOKEN_MFG_CIB_OBS:
   \   00000000   0x0800             DC16 2048

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_VERSION
   \                     TOKEN_MFG_CUSTOM_VERSION:
   \   00000000   0x0810             DC16 2064

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_EUI_64
   \                     TOKEN_MFG_CUSTOM_EUI_64:
   \   00000000   0x0812             DC16 2066

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_STRING
   \                     TOKEN_MFG_STRING:
   \   00000000   0x081A             DC16 2074

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOARD_NAME
   \                     TOKEN_MFG_BOARD_NAME:
   \   00000000   0x082A             DC16 2090

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_MANUF_ID
   \                     TOKEN_MFG_MANUF_ID:
   \   00000000   0x083A             DC16 2106

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PHY_CONFIG
   \                     TOKEN_MFG_PHY_CONFIG:
   \   00000000   0x083C             DC16 2108

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOOTLOAD_AES_KEY
   \                     TOKEN_MFG_BOOTLOAD_AES_KEY:
   \   00000000   0x083E             DC16 2110

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EZSP_STORAGE
   \                     TOKEN_MFG_EZSP_STORAGE:
   \   00000000   0x084E             DC16 2126

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ASH_CONFIG
   \                     TOKEN_MFG_ASH_CONFIG:
   \   00000000   0x0856             DC16 2134

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CBKE_DATA
   \                     TOKEN_MFG_CBKE_DATA:
   \   00000000   0x087E             DC16 2174

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_INSTALLATION_CODE
   \                     TOKEN_MFG_INSTALLATION_CODE:
   \   00000000   0x08DA             DC16 2266

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_OSC24M_BIAS_TRIM
   \                     TOKEN_MFG_OSC24M_BIAS_TRIM:
   \   00000000   0x08EE             DC16 2286

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EUI_64
   \                     TOKEN_MFG_EUI_64:
   \   00000000   0x8000             DC16 32768
     15          #undef TOKEN_DEF
     16          #undef TOKEN_MFG
     17          #undef DEFINETOKENS
     18          
     19          
     20          #ifndef SER232
     21            #define SER232 0
     22          #endif
     23          
     24          #define TOKENDBG(x)    //#define TOKENDBG(x) x   // prints debug data from the token access functions
     25          
     26          boolean tokensActive = FALSE;
     27          #ifdef EMBER_EMU_TEST  // Strip emulator only code from official build
     28            // On emulators, the CIB and FIB come up as 0x00 which can confuse code that expects 0xFF for a token's erased state.  
     29            // If we're on emulators and the CIB/FIB is 0x00, fake 0xFF.
     30            boolean emuFib0x00 = TRUE;
     31            boolean emuCib0x00 = TRUE;
     32          #endif //EMBER_EMU_TEST
     33          
     34          

   \                                 In section .text, align 2, keep-with-next
     35          EmberStatus halStackInitTokens ( void )
     36          {
   \                     halStackInitTokens: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     37          #if !defined(BOOTLOADER)
     38              tokTypeMfgFibVersion tokMfg;
     39              EmberStatus status=EMBER_ERR_FATAL;
     40              tokTypeStackNvdataVersion tokStack;
     41          #endif
     42              tokensActive = TRUE;
   \   00000002   0x....             LDR.N    R4,??DataTable32
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x7020             STRB     R0,[R4, #+0]
   \   00000008   0xB082             SUB      SP,SP,#+8
     43            
     44          #ifdef EMBER_EMU_TEST   // Strip emulator only code from official build
     45              // If we're on an emu, scan the FIB and CIB MFG tokens to see if we're in the emu's default state of 0x00.  
     46              // This means MFG tokens have not been loaded and we'll have to fake an erased, 0xFF, state.
     47              {
     48                  int32u i;
     49                  int8u * ptr;
     50                  
     51                  ptr = (int8u *)(DATA_BIG_INFO_BASE + 0x077E);
     52                  for (i = 0x00; i < (0x07F8-0x077E); i ++) 
     53                  {
     54                      if (ptr[i] != 0x00) 
     55                      {
     56                          emuFib0x00 = FALSE;
     57                          break;
     58                      }
     59                  }
     60                  ptr = (int8u *)(DATA_BIG_INFO_BASE + 0x0810);
     61                  for (i = 0x00; i < (0x08F0 - 0x0810); i ++) 
     62                  {
     63                      if (ptr[i] != 0x00) 
     64                      {
     65                          emuCib0x00 = FALSE;
     66                          break;
     67                      }
     68                  }
     69              }
     70          #endif //EMBER_EMU_TEST
     71            
     72              if (halInternalSimEeInit() != EMBER_SUCCESS) 
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       halInternalSimEeStartup
   \   00000010   0xB138             CBZ.N    R0,??halStackInitTokens_0
     73              {
     74                  TOKENDBG(sea_printf("halInternalSimEeInit Attempt 1 fail\r\n");)
     75                  if (halInternalSimEeInit() != EMBER_SUCCESS) 
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       halInternalSimEeStartup
   \   00000018   0xB118             CBZ.N    R0,??halStackInitTokens_0
     76                  {
     77                      TOKENDBG(sea_printf("halInternalSimEeInit Attempt 2 fail\r\n");)
     78                      tokensActive = FALSE;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
     79                      return EMBER_SIM_EEPROM_INIT_2_FAILED;
   \   0000001E   0x2049             MOVS     R0,#+73
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}
     80                  }
     81                  TOKENDBG(} else {sea_printf("halInternalSimEeInit Successful\r\n");)
     82              }
     83            
     84            
     85          #if !defined(BOOTLOADER)
     86              halCommonGetToken(&tokMfg, TOKEN_MFG_FIB_VERSION);
   \                     ??halStackInitTokens_0: (+1)
   \   00000022   0x2302             MOVS     R3,#+2
   \   00000024   0x227F             MOVS     R2,#+127
   \   00000026   0xF240 0x71F4      MOVW     R1,#+2036
   \   0000002A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000002E   0x.... 0x....      BL       halInternalGetTokenData
     87              halCommonGetToken(&tokStack, TOKEN_STACK_NVDATA_VERSION);
   \   00000032   0x2302             MOVS     R3,#+2
   \   00000034   0x227F             MOVS     R2,#+127
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0x.... 0x....      BL       halInternalGetTokenData
     88              
     89              if (CURRENT_MFG_TOKEN_VERSION != tokMfg || CURRENT_STACK_TOKEN_VERSION != tokStack) 
   \   0000003E   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000042   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000046   0xF5B1 0x7FFF      CMP      R1,#+510
   \   0000004A   0xD104             BNE.N    ??halStackInitTokens_1
   \   0000004C   0xF5B0 0x7F7F      CMP      R0,#+1020
   \   00000050   0xD107             BNE.N    ??halStackInitTokens_2
     90              {
     91                  if ((CURRENT_MFG_TOKEN_VERSION != tokMfg) && (CURRENT_STACK_TOKEN_VERSION != tokStack)) 
     92                  {
     93                      status = EMBER_EEPROM_MFG_STACK_VERSION_MISMATCH;
     94                  } 
     95                  else if (CURRENT_MFG_TOKEN_VERSION != tokMfg) 
     96                  {
     97                      status = EMBER_EEPROM_MFG_VERSION_MISMATCH;
     98                  } 
     99                  else if (CURRENT_STACK_TOKEN_VERSION != tokStack) 
    100                  {
    101                      status = EMBER_EEPROM_STACK_VERSION_MISMATCH;
    102                  }
    103          #if defined(DEBUG)
    104                  if(CURRENT_MFG_TOKEN_VERSION != tokMfg) 
    105                  {
    106                      // Even is we're a debug image, a bad manufacturing token version is a fatal error, so return the error status.
    107                      tokensActive = FALSE;
    108                      return status;
    109                  }
    110                  if (CURRENT_STACK_TOKEN_VERSION != tokStack) 
    111                  {
    112                      // Debug images with a bad stack token version should attempt to fix the SimEE before continuing on.
    113                      TOKENDBG(sea_printf("Stack Version mismatch, reloading\r\n");)
    114                      halInternalSimEeRepair(TRUE);
    115                      if (halInternalSimEeInit() != EMBER_SUCCESS) 
    116                      {
    117                          TOKENDBG(sea_printf("halInternalSimEeInit Attempt 3 fail\r\n");)
    118                          tokensActive = FALSE;
    119                          return EMBER_SIM_EEPROM_INIT_3_FAILED;
    120                      }
    121                  }
    122          #else //  node release image
    123                  TOKENDBG(sea_printf("EEPROM_x_VERSION_MISMATCH (%d)\r\n",status);)
    124                  tokensActive = FALSE;
    125          #if defined(PLATFORMTEST) || defined(LEVEL_ONE_TEST)
    126                  tokensActive = TRUE;             // Keep tokens active for test code.
    127          #endif //defined(PLATFORMTEST)
    128                  return status;
    129          #endif
    130              }
    131          #endif //!defined(BOOTLOADER)
    132            
    133              TOKENDBG(sea_printf("TOKENS ACTIVE\r\n");)
    134              return EMBER_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \                     ??halStackInitTokens_1: (+1)
   \   00000056   0xF5B0 0x7F7F      CMP      R0,#+1020
   \   0000005A   0xBF0C             ITE      EQ 
   \   0000005C   0x2006             MOVEQ    R0,#+6
   \   0000005E   0x2004             MOVNE    R0,#+4
   \   00000060   0xE000             B.N      ??halStackInitTokens_3
   \                     ??halStackInitTokens_2: (+1)
   \   00000062   0x2007             MOVS     R0,#+7
   \                     ??halStackInitTokens_3: (+1)
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x7021             STRB     R1,[R4, #+0]
   \   00000068   0xBD16             POP      {R1,R2,R4,PC}
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void halInternalGetTokenData ( void *data, int16u ID, int8u index, int8u len )
    138          {
   \                     halInternalGetTokenData: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    139              int8u i;
    140              int8u *ram = (int8u*)data;
    141            
    142              if (ID < 256)     // the ID is within the SimEEPROM's range, route to the SimEEPROM
   \   00000002   0x29FF             CMP      R1,#+255
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0xDC08             BGT.N    ??halInternalGetTokenData_0
    143              {
    144                  if (tokensActive) 
   \   0000000A   0x....             LDR.N    R0,??DataTable32
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD045             BEQ.N    ??halInternalGetTokenData_1
    145                  {
    146                      halInternalSimEeGetData(data, ID, index, len);
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       halInternalSimEeGetData
   \   0000001A   0xBD37             POP      {R0-R2,R4,R5,PC}
    147                  } 
    148                  else 
    149                  {
    150                      TOKENDBG(sea_printf( "getIdxToken supressed.\r\n");)
    151                  }
    152              } 
    153              else 
    154              {
    155                  if (ID == MFG_EUI_64_LOCATION)     // MFG_EUI_64_LOCATION is a virtual token
   \                     ??halInternalGetTokenData_0: (+1)
   \   0000001C   0xF5B1 0x4F00      CMP      R1,#+32768
   \   00000020   0xD134             BNE.N    ??halInternalGetTokenData_2
    156                  {
    157                      // There are two EUI64's stored in the Info Blocks, Ember and Custom. 0x0A00 is the address used by the generic EUI64 token, 
    158                      // and it is token.c's responbility to pick the returned EUI64 from either Ember or Custom.  Return the Custom EUI64 
    159                      // if it is not all FF's, otherwise return the Ember EUI64.
    160                      tokTypeMfgEui64 eui64;
    161                      halCommonGetToken(&eui64, TOKEN_MFG_CUSTOM_EUI_64);
   \   00000022   0x2308             MOVS     R3,#+8
   \   00000024   0x227F             MOVS     R2,#+127
   \   00000026   0xF640 0x0112      MOVW     R1,#+2066
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0xF7FF 0xFFE8      BL       halInternalGetTokenData
    162                      if ((eui64[0] == 0xFF) && (eui64[1] == 0xFF) && (eui64[2] == 0xFF) && (eui64[3] == 0xFF) &&
    163                          (eui64[4] == 0xFF) && (eui64[5] == 0xFF) && (eui64[6] == 0xFF) && (eui64[7]==0xFF)) 
   \   00000030   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000034   0xAD00             ADD      R5,SP,#+0
   \   00000036   0x28FF             CMP      R0,#+255
   \   00000038   0xBF04             ITT      EQ 
   \   0000003A   0x7868             LDRBEQ   R0,[R5, #+1]
   \   0000003C   0x28FF             CMPEQ    R0,#+255
   \   0000003E   0xD11E             BNE.N    ??halInternalGetTokenData_3
   \   00000040   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000044   0x28FF             CMP      R0,#+255
   \   00000046   0xBF04             ITT      EQ 
   \   00000048   0xF89D 0x0003      LDRBEQ   R0,[SP, #+3]
   \   0000004C   0x28FF             CMPEQ    R0,#+255
   \   0000004E   0xD116             BNE.N    ??halInternalGetTokenData_3
   \   00000050   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000054   0x28FF             CMP      R0,#+255
   \   00000056   0xBF04             ITT      EQ 
   \   00000058   0xF89D 0x0005      LDRBEQ   R0,[SP, #+5]
   \   0000005C   0x28FF             CMPEQ    R0,#+255
   \   0000005E   0xD10E             BNE.N    ??halInternalGetTokenData_3
   \   00000060   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000064   0x28FF             CMP      R0,#+255
   \   00000066   0xBF04             ITT      EQ 
   \   00000068   0xF89D 0x0007      LDRBEQ   R0,[SP, #+7]
   \   0000006C   0x28FF             CMPEQ    R0,#+255
   \   0000006E   0xD106             BNE.N    ??halInternalGetTokenData_3
    164                      {
    165                          halCommonGetToken(&eui64, TOKEN_MFG_EMBER_EUI_64);
   \   00000070   0x2308             MOVS     R3,#+8
   \   00000072   0x227F             MOVS     R2,#+127
   \   00000074   0xF240 0x71A2      MOVW     R1,#+1954
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0xF7FF 0xFFC1      BL       halInternalGetTokenData
    166                      }
    167                      for (i = 0x00; i < EUI64_SIZE; i ++)
   \                     ??halInternalGetTokenData_3: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
    168                          ram[i] = eui64[i];
   \                     ??halInternalGetTokenData_4: (+1)
   \   00000080   0x5D41             LDRB     R1,[R0, R5]
   \   00000082   0x5501             STRB     R1,[R0, R4]
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0x2808             CMP      R0,#+8
   \   00000088   0xDBFA             BLT.N    ??halInternalGetTokenData_4
   \   0000008A   0xBD37             POP      {R0-R2,R4,R5,PC}
    169                  } 
    170                  else 
    171                  {
    172                      // read from the Information Blocks.  The token ID is only the bottom 16bits of the token's actual address. Since the info 
    173                      // blocks exist in the range DATA_BIG_INFO_BASE-DATA_BIG_INFO_END, we need to OR the ID with DATA_BIG_INFO_BASE to get the real address.
    174                      int32u realAddress = (DATA_BIG_INFO_BASE | ID);
    175                      int8u *flash = (int8u *)realAddress;
   \                     ??halInternalGetTokenData_2: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable32_1  ;; 0x8040000
   \   0000008E   0x4301             ORRS     R1,R0,R1
    176          #ifdef EMBER_EMU_TEST      // Strip emulator only code from official build
    177                      // If we're on an emulator and the MFG area is 0x00, fake the erased state of 0xFF.
    178                      if ((emuFib0x00) && (ID < 0x0800)) 
    179                      {
    180                          for (i = 0x00; i < len; i ++) 
    181                          {
    182                              ram[i] = 0xFF;
    183                          }
    184                          return;
    185                      }
    186                      if ((emuCib0x00) && (ID >= 0x0800)) 
    187                      {
    188                          for (i = 0x00; i < len; i ++) 
    189                          {
    190                              ram[i] = 0xFF;
    191                          }
    192                          return;
    193                      }
    194          #endif // EMBER_EMU_TEST
    195                      for (i = 0x00; i < len; i ++) 
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xE002             B.N      ??halInternalGetTokenData_5
    196                      {
    197                          ram[i] = flash[i];
   \                     ??halInternalGetTokenData_6: (+1)
   \   00000094   0x5C42             LDRB     R2,[R0, R1]
   \   00000096   0x5502             STRB     R2,[R0, R4]
    198                      }
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \                     ??halInternalGetTokenData_5: (+1)
   \   0000009A   0x4298             CMP      R0,R3
   \   0000009C   0xDBFA             BLT.N    ??halInternalGetTokenData_6
    199                  }
    200              }
    201          }
   \                     ??halInternalGetTokenData_1: (+1)
   \   0000009E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return

   \                                 In section .bss, align 1
   \                     tokensActive:
   \   00000000                      DS8 1
    202          
    203          boolean simEeSetDataActiveSemaphore = FALSE;
   \                     simEeSetDataActiveSemaphore:
   \   00000001                      DS8 1

   \                                 In section .text, align 4, keep-with-next
    204          void halInternalSetTokenData ( int16u ID, int8u index, void *data, int8u len )
    205          {
   \                     halInternalSetTokenData: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
    206              if (ID < 256)              // the ID is within the SimEEPROM's range, route to the SimEEPROM
   \   00000006   0x2DFF             CMP      R5,#+255
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4617             MOV      R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x.... 0x....      ADR.W    R0,?_0
   \   00000012   0xDC14             BGT.N    ??halInternalSetTokenData_0
    207              {
    208                  if (tokensActive)      // You cannot interrupt SetData with another SetData!
   \   00000014   0x....             LDR.N    R4,??DataTable32
   \   00000016   0x7821             LDRB     R1,[R4, #+0]
   \   00000018   0xB1B9             CBZ.N    R1,??halInternalSetTokenData_1
    209                  {
    210                      assert(!simEeSetDataActiveSemaphore);
   \   0000001A   0x7861             LDRB     R1,[R4, #+1]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD003             BEQ.N    ??halInternalSetTokenData_2
   \   00000020   0xB507             PUSH {R0,R1,R2,LR}
   \   00000022   0x21D2             MOVS     R1,#+210
   \   00000024   0x.... 0x....      BL       halInternalAssertFailed
    211                      simEeSetDataActiveSemaphore = TRUE;
   \                     ??halInternalSetTokenData_2: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x7060             STRB     R0,[R4, #+1]
    212                      halInternalSimEeSetData(ID, data, index, len);
   \   0000002C   0x4643             MOV      R3,R8
   \   0000002E   0x4632             MOV      R2,R6
   \   00000030   0x4639             MOV      R1,R7
   \   00000032   0xB2E8             UXTB     R0,R5
   \   00000034   0x.... 0x....      BL       halInternalSimEeSetData
    213                      simEeSetDataActiveSemaphore = FALSE;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x7060             STRB     R0,[R4, #+1]
   \   0000003C   0xE005             B.N      ??halInternalSetTokenData_1
    214                  } 
    215                  else 
    216                  {
    217                      TOKENDBG(sea_printf( "setIdxToken supressed.\r\n");)
    218                  }
    219              } 
    220              else 
    221              {
    222                  // The Information Blocks can only be written by an external tool! Something is making a set token call on a manufacturing token, 
    223                  // and that is not allowed!
    224                  assert(0);
   \                     ??halInternalSetTokenData_0: (+1)
   \   0000003E   0xB507             PUSH {R0,R1,R2,LR}
   \   00000040   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000044   0x21E0             MOVS     R1,#+224
   \   00000046   0x.... 0x....      B.W      halInternalAssertFailed
    225              }
    226          }
   \                     ??halInternalSetTokenData_1: (+1)
   \   0000004A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void halInternalIncrementCounterToken ( int8u ID )
    229          {
    230              if (tokensActive) 
   \                     halInternalIncrementCounterToken: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable32
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xBF18             IT       NE 
    231              {
    232                  halInternalSimEeIncrementCounter(ID);
   \   00000008   0x.... 0x....      BNE.W    halInternalSimEeIncrementCounter
    233              } 
    234              else 
    235              {
    236                  TOKENDBG(sea_printf( "IncrementCounter supressed.\r\n");)
    237              }
    238          }
   \   0000000C   0x4770             BX       LR               ;; return
    239          
    240          // The following interfaces are admittedly code space hogs but serve as glue interfaces to link creator codes to tokens for test code.

   \                                 In section .text, align 2, keep-with-next
    241          int16u getTokenAddress ( int16u creator )
    242          {
    243          #define DEFINETOKENS
    244              switch (creator) 
   \                     getTokenAddress: (+1)
   \   00000000   0xF24B 0x2154      MOVW     R1,#+45652
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0xF000 0x80DE      BEQ.W    ??getTokenAddress_0
   \   0000000A   0xF44F 0x7178      MOV      R1,#+992
   \   0000000E   0x1A40             SUBS     R0,R0,R1
   \   00000010   0xF000 0x80DC      BEQ.W    ??getTokenAddress_1
   \   00000014   0xF640 0x310F      MOVW     R1,#+2831
   \   00000018   0x1A40             SUBS     R0,R0,R1
   \   0000001A   0xF000 0x80CB      BEQ.W    ??getTokenAddress_2
   \   0000001E   0xF44F 0x7184      MOV      R1,#+264
   \   00000022   0x1A40             SUBS     R0,R0,R1
   \   00000024   0xF000 0x80C0      BEQ.W    ??getTokenAddress_3
   \   00000028   0x1EC0             SUBS     R0,R0,#+3
   \   0000002A   0xF000 0x80B4      BEQ.W    ??getTokenAddress_4
   \   0000002E   0x38F4             SUBS     R0,R0,#+244
   \   00000030   0xF000 0x80C3      BEQ.W    ??getTokenAddress_5
   \   00000034   0x1E80             SUBS     R0,R0,#+2
   \   00000036   0xD078             BEQ.N    ??getTokenAddress_6
   \   00000038   0x3812             SUBS     R0,R0,#+18
   \   0000003A   0xF000 0x80A3      BEQ.W    ??getTokenAddress_7
   \   0000003E   0xF240 0x51ED      MOVW     R1,#+1517
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0xF000 0x80BC      BEQ.W    ??getTokenAddress_8
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0xF000 0x80A7      BEQ.W    ??getTokenAddress_9
   \   0000004E   0xF240 0x410F      MOVW     R1,#+1039
   \   00000052   0x1A40             SUBS     R0,R0,R1
   \   00000054   0xF000 0x80AB      BEQ.W    ??getTokenAddress_10
   \   00000058   0xF44F 0x713C      MOV      R1,#+752
   \   0000005C   0x1A40             SUBS     R0,R0,R1
   \   0000005E   0xF000 0x80A0      BEQ.W    ??getTokenAddress_11
   \   00000062   0xF44F 0x7100      MOV      R1,#+512
   \   00000066   0x1A40             SUBS     R0,R0,R1
   \   00000068   0xD061             BEQ.N    ??getTokenAddress_12
   \   0000006A   0xF44F 0x616E      MOV      R1,#+3808
   \   0000006E   0x1A40             SUBS     R0,R0,R1
   \   00000070   0xF000 0x80B1      BEQ.W    ??getTokenAddress_13
   \   00000074   0x1E40             SUBS     R0,R0,#+1
   \   00000076   0xF000 0x80BE      BEQ.W    ??getTokenAddress_14
   \   0000007A   0x1E40             SUBS     R0,R0,#+1
   \   0000007C   0xF000 0x80BD      BEQ.W    ??getTokenAddress_15
   \   00000080   0x383D             SUBS     R0,R0,#+61
   \   00000082   0xF000 0x80B0      BEQ.W    ??getTokenAddress_16
   \   00000086   0xF240 0x1101      MOVW     R1,#+257
   \   0000008A   0x1A40             SUBS     R0,R0,R1
   \   0000008C   0xF000 0x80A7      BEQ.W    ??getTokenAddress_17
   \   00000090   0x3811             SUBS     R0,R0,#+17
   \   00000092   0xF000 0x80B4      BEQ.W    ??getTokenAddress_18
   \   00000096   0x38D1             SUBS     R0,R0,#+209
   \   00000098   0xD077             BEQ.N    ??getTokenAddress_19
   \   0000009A   0x381F             SUBS     R0,R0,#+31
   \   0000009C   0xF000 0x80A9      BEQ.W    ??getTokenAddress_20
   \   000000A0   0x380B             SUBS     R0,R0,#+11
   \   000000A2   0xD06C             BEQ.N    ??getTokenAddress_21
   \   000000A4   0x38E7             SUBS     R0,R0,#+231
   \   000000A6   0xF000 0x80AE      BEQ.W    ??getTokenAddress_22
   \   000000AA   0x381F             SUBS     R0,R0,#+31
   \   000000AC   0xF000 0x8095      BEQ.W    ??getTokenAddress_23
   \   000000B0   0x388B             SUBS     R0,R0,#+139
   \   000000B2   0xF000 0x80AA      BEQ.W    ??getTokenAddress_24
   \   000000B6   0x3845             SUBS     R0,R0,#+69
   \   000000B8   0xD040             BEQ.N    ??getTokenAddress_25
   \   000000BA   0x381E             SUBS     R0,R0,#+30
   \   000000BC   0xF000 0x8091      BEQ.W    ??getTokenAddress_26
   \   000000C0   0xF44F 0x7180      MOV      R1,#+256
   \   000000C4   0x1A40             SUBS     R0,R0,R1
   \   000000C6   0xD054             BEQ.N    ??getTokenAddress_27
   \   000000C8   0x380C             SUBS     R0,R0,#+12
   \   000000CA   0xD055             BEQ.N    ??getTokenAddress_28
   \   000000CC   0xF240 0x510A      MOVW     R1,#+1290
   \   000000D0   0x1A40             SUBS     R0,R0,R1
   \   000000D2   0xF000 0x808A      BEQ.W    ??getTokenAddress_29
   \   000000D6   0xF44F 0x71FD      MOV      R1,#+506
   \   000000DA   0x1A40             SUBS     R0,R0,R1
   \   000000DC   0xD058             BEQ.N    ??getTokenAddress_30
   \   000000DE   0x38F1             SUBS     R0,R0,#+241
   \   000000E0   0xF000 0x8085      BEQ.W    ??getTokenAddress_31
   \   000000E4   0xF44F 0x7100      MOV      R1,#+512
   \   000000E8   0x1A40             SUBS     R0,R0,R1
   \   000000EA   0xD021             BEQ.N    ??getTokenAddress_32
   \   000000EC   0xF44F 0x7104      MOV      R1,#+528
   \   000000F0   0x1A40             SUBS     R0,R0,R1
   \   000000F2   0xD02F             BEQ.N    ??getTokenAddress_33
   \   000000F4   0x1E80             SUBS     R0,R0,#+2
   \   000000F6   0xD030             BEQ.N    ??getTokenAddress_34
   \   000000F8   0xF44F 0x71E6      MOV      R1,#+460
   \   000000FC   0x1A40             SUBS     R0,R0,R1
   \   000000FE   0xD023             BEQ.N    ??getTokenAddress_35
   \   00000100   0x3820             SUBS     R0,R0,#+32
   \   00000102   0xD024             BEQ.N    ??getTokenAddress_36
   \   00000104   0x1E40             SUBS     R0,R0,#+1
   \   00000106   0xD02E             BEQ.N    ??getTokenAddress_37
   \   00000108   0x1E40             SUBS     R0,R0,#+1
   \   0000010A   0xD014             BEQ.N    ??getTokenAddress_38
   \   0000010C   0x380A             SUBS     R0,R0,#+10
   \   0000010E   0xD018             BEQ.N    ??getTokenAddress_39
   \   00000110   0xF44F 0x7102      MOV      R1,#+520
   \   00000114   0x1A40             SUBS     R0,R0,R1
   \   00000116   0xD023             BEQ.N    ??getTokenAddress_40
   \   00000118   0xF640 0x018B      MOVW     R1,#+2187
   \   0000011C   0x1A40             SUBS     R0,R0,R1
   \   0000011E   0xD058             BEQ.N    ??getTokenAddress_41
   \   00000120   0x3808             SUBS     R0,R0,#+8
   \   00000122   0xD023             BEQ.N    ??getTokenAddress_42
   \   00000124   0x1F00             SUBS     R0,R0,#+4
   \   00000126   0xD06C             BEQ.N    ??getTokenAddress_43
   \   00000128   0xE071             B.N      ??getTokenAddress_44
    245              {
    246          #define TOKEN_MFG TOKEN_DEF
    247          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    248                  case creator: return TOKEN_##name;
    249              #include "token-stack.h"
   \                     ??getTokenAddress_6: (+1)
   \   0000012A   0xF240 0x707E      MOVW     R0,#+1918
   \                     ??getTokenAddress_12: (+1)
   \   0000012E   0x4770             BX       LR
   \                     ??getTokenAddress_32: (+1)
   \   00000130   0xF240 0x7096      MOVW     R0,#+1942
   \   00000134   0x4770             BX       LR
   \                     ??getTokenAddress_38: (+1)
   \   00000136   0xF240 0x709C      MOVW     R0,#+1948
   \   0000013A   0x4770             BX       LR
   \                     ??getTokenAddress_25: (+1)
   \   0000013C   0xF240 0x70A2      MOVW     R0,#+1954
   \   00000140   0x4770             BX       LR
   \                     ??getTokenAddress_39: (+1)
   \   00000142   0xF240 0x70AA      MOVW     R0,#+1962
   \   00000146   0x4770             BX       LR
   \                     ??getTokenAddress_35: (+1)
   \   00000148   0xF240 0x70BE      MOVW     R0,#+1982
   \   0000014C   0x4770             BX       LR
   \                     ??getTokenAddress_36: (+1)
   \   0000014E   0xF240 0x70D2      MOVW     R0,#+2002
   \   00000152   0x4770             BX       LR
   \                     ??getTokenAddress_33: (+1)
   \   00000154   0xF240 0x70DC      MOVW     R0,#+2012
   \   00000158   0x4770             BX       LR
   \                     ??getTokenAddress_34: (+1)
   \   0000015A   0xF240 0x70DE      MOVW     R0,#+2014
   \   0000015E   0x4770             BX       LR
   \                     ??getTokenAddress_40: (+1)
   \   00000160   0xF44F 0x60FC      MOV      R0,#+2016
   \   00000164   0x4770             BX       LR
   \                     ??getTokenAddress_37: (+1)
   \   00000166   0xF240 0x70E2      MOVW     R0,#+2018
   \   0000016A   0x4770             BX       LR
   \                     ??getTokenAddress_42: (+1)
   \   0000016C   0xF240 0x70F4      MOVW     R0,#+2036
   \   00000170   0x4770             BX       LR
   \                     ??getTokenAddress_27: (+1)
   \   00000172   0xF240 0x70F6      MOVW     R0,#+2038
   \   00000176   0x4770             BX       LR
   \                     ??getTokenAddress_28: (+1)
   \   00000178   0xF44F 0x60FF      MOV      R0,#+2040
   \   0000017C   0x4770             BX       LR
   \                     ??getTokenAddress_21: (+1)
   \   0000017E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000182   0x4770             BX       LR
   \                     ??getTokenAddress_7: (+1)
   \   00000184   0xF44F 0x6001      MOV      R0,#+2064
   \   00000188   0x4770             BX       LR
   \                     ??getTokenAddress_19: (+1)
   \   0000018A   0xF640 0x0012      MOVW     R0,#+2066
   \   0000018E   0x4770             BX       LR
   \                     ??getTokenAddress_30: (+1)
   \   00000190   0xF640 0x001A      MOVW     R0,#+2074
   \   00000194   0x4770             BX       LR
   \                     ??getTokenAddress_4: (+1)
   \   00000196   0xF640 0x002A      MOVW     R0,#+2090
   \   0000019A   0x4770             BX       LR
   \                     ??getTokenAddress_9: (+1)
   \   0000019C   0xF640 0x003A      MOVW     R0,#+2106
   \   000001A0   0x4770             BX       LR
   \                     ??getTokenAddress_11: (+1)
   \   000001A2   0xF640 0x003C      MOVW     R0,#+2108
   \   000001A6   0x4770             BX       LR
   \                     ??getTokenAddress_3: (+1)
   \   000001A8   0xF640 0x003E      MOVW     R0,#+2110
   \   000001AC   0x4770             BX       LR
   \                     ??getTokenAddress_10: (+1)
   \   000001AE   0xF640 0x004E      MOVW     R0,#+2126
   \   000001B2   0x4770             BX       LR
   \                     ??getTokenAddress_2: (+1)
   \   000001B4   0xF640 0x0056      MOVW     R0,#+2134
   \   000001B8   0x4770             BX       LR
   \                     ??getTokenAddress_5: (+1)
   \   000001BA   0xF640 0x007E      MOVW     R0,#+2174
   \   000001BE   0x4770             BX       LR
   \                     ??getTokenAddress_8: (+1)
   \   000001C0   0xF640 0x00DA      MOVW     R0,#+2266
   \   000001C4   0x4770             BX       LR
   \                     ??getTokenAddress_0: (+1)
   \   000001C6   0xF640 0x00EE      MOVW     R0,#+2286
   \   000001CA   0x4770             BX       LR
   \                     ??getTokenAddress_1: (+1)
   \   000001CC   0xF44F 0x4000      MOV      R0,#+32768
   \   000001D0   0x4770             BX       LR
   \                     ??getTokenAddress_41: (+1)
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0x4770             BX       LR
   \                     ??getTokenAddress_13: (+1)
   \   000001D6   0x2002             MOVS     R0,#+2
   \   000001D8   0x4770             BX       LR
   \                     ??getTokenAddress_23: (+1)
   \   000001DA   0x2003             MOVS     R0,#+3
   \   000001DC   0x4770             BX       LR
   \                     ??getTokenAddress_17: (+1)
   \   000001DE   0x2004             MOVS     R0,#+4
   \   000001E0   0x4770             BX       LR
   \                     ??getTokenAddress_26: (+1)
   \   000001E2   0x2005             MOVS     R0,#+5
   \   000001E4   0x4770             BX       LR
   \                     ??getTokenAddress_16: (+1)
   \   000001E6   0x2006             MOVS     R0,#+6
   \   000001E8   0x4770             BX       LR
   \                     ??getTokenAddress_29: (+1)
   \   000001EA   0x2007             MOVS     R0,#+7
   \   000001EC   0x4770             BX       LR
   \                     ??getTokenAddress_31: (+1)
   \   000001EE   0x2008             MOVS     R0,#+8
   \   000001F0   0x4770             BX       LR
   \                     ??getTokenAddress_20: (+1)
   \   000001F2   0x2009             MOVS     R0,#+9
   \   000001F4   0x4770             BX       LR
   \                     ??getTokenAddress_14: (+1)
   \   000001F6   0x200A             MOVS     R0,#+10
   \   000001F8   0x4770             BX       LR
   \                     ??getTokenAddress_15: (+1)
   \   000001FA   0x200B             MOVS     R0,#+11
   \   000001FC   0x4770             BX       LR
   \                     ??getTokenAddress_18: (+1)
   \   000001FE   0x200C             MOVS     R0,#+12
   \   00000200   0x4770             BX       LR
   \                     ??getTokenAddress_43: (+1)
   \   00000202   0x200D             MOVS     R0,#+13
   \   00000204   0x4770             BX       LR
   \                     ??getTokenAddress_22: (+1)
   \   00000206   0x200E             MOVS     R0,#+14
   \   00000208   0x4770             BX       LR
   \                     ??getTokenAddress_24: (+1)
   \   0000020A   0x200F             MOVS     R0,#+15
   \   0000020C   0x4770             BX       LR
    250          #undef TOKEN_MFG
    251          #undef TOKEN_DEF
    252              };
    253          #undef DEFINETOKENS
    254              return INVALID_EE_ADDRESS;
   \                     ??getTokenAddress_44: (+1)
   \   0000020E   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??getTokenAddress_45: (+1)
   \   00000212   0x4770             BX       LR               ;; return
    255          }
    256          

   \                                 In section .text, align 2, keep-with-next
    257          int8u getTokenSize ( int16u creator )
    258          {
    259          #define DEFINETOKENS
    260              switch (creator) 
   \                     getTokenSize: (+1)
   \   00000000   0xF24B 0x2154      MOVW     R1,#+45652
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0xD006             BEQ.N    ??getTokenSize_0
   \   00000008   0xF44F 0x7178      MOV      R1,#+992
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xD018             BEQ.N    ??getTokenSize_1
   \   00000010   0xF640 0x310F      MOVW     R1,#+2831
   \   00000014   0x1A40             SUBS     R0,R0,R1
   \                     ??getTokenSize_0: (+1)
   \   00000016   0xD07A             BEQ.N    ??getTokenSize_2
   \   00000018   0xF44F 0x7184      MOV      R1,#+264
   \   0000001C   0x1A40             SUBS     R0,R0,R1
   \   0000001E   0xD07A             BEQ.N    ??getTokenSize_3
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \   00000022   0xD078             BEQ.N    ??getTokenSize_3
   \   00000024   0x38F4             SUBS     R0,R0,#+244
   \   00000026   0xD030             BEQ.N    ??getTokenSize_4
   \   00000028   0x1E80             SUBS     R0,R0,#+2
   \   0000002A   0xD066             BEQ.N    ??getTokenSize_5
   \   0000002C   0x3812             SUBS     R0,R0,#+18
   \   0000002E   0xD06E             BEQ.N    ??getTokenSize_2
   \   00000030   0xF240 0x51ED      MOVW     R1,#+1517
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0xD066             BEQ.N    ??getTokenSize_6
   \   00000038   0x1E40             SUBS     R0,R0,#+1
   \   0000003A   0xD068             BEQ.N    ??getTokenSize_2
   \   0000003C   0xF240 0x410F      MOVW     R1,#+1039
   \   00000040   0x1A40             SUBS     R0,R0,R1
   \                     ??getTokenSize_1: (+1)
   \   00000042   0xD06C             BEQ.N    ??getTokenSize_7
   \   00000044   0xF44F 0x713C      MOV      R1,#+752
   \   00000048   0x1A40             SUBS     R0,R0,R1
   \   0000004A   0xD060             BEQ.N    ??getTokenSize_2
   \   0000004C   0xF44F 0x7100      MOV      R1,#+512
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0xD05A             BEQ.N    ??getTokenSize_8
   \   00000054   0xF44F 0x616E      MOV      R1,#+3808
   \   00000058   0x1A40             SUBS     R0,R0,R1
   \   0000005A   0xD056             BEQ.N    ??getTokenSize_8
   \   0000005C   0x1E40             SUBS     R0,R0,#+1
   \   0000005E   0xD05C             BEQ.N    ??getTokenSize_9
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0xD05C             BEQ.N    ??getTokenSize_7
   \   00000064   0x383D             SUBS     R0,R0,#+61
   \   00000066   0xD052             BEQ.N    ??getTokenSize_2
   \   00000068   0xF240 0x1101      MOVW     R1,#+257
   \   0000006C   0x1A40             SUBS     R0,R0,R1
   \   0000006E   0xD04E             BEQ.N    ??getTokenSize_2
   \   00000070   0x3811             SUBS     R0,R0,#+17
   \   00000072   0xD056             BEQ.N    ??getTokenSize_10
   \   00000074   0x38D1             SUBS     R0,R0,#+209
   \   00000076   0xD052             BEQ.N    ??getTokenSize_7
   \   00000078   0x381F             SUBS     R0,R0,#+31
   \   0000007A   0xD04E             BEQ.N    ??getTokenSize_9
   \   0000007C   0x380B             SUBS     R0,R0,#+11
   \   0000007E   0xD04A             BEQ.N    ??getTokenSize_3
   \   00000080   0x38E7             SUBS     R0,R0,#+231
   \   00000082   0xD052             BEQ.N    ??getTokenSize_11
   \   00000084   0x381F             SUBS     R0,R0,#+31
   \   00000086   0xD044             BEQ.N    ??getTokenSize_12
   \   00000088   0x388B             SUBS     R0,R0,#+139
   \                     ??getTokenSize_4: (+1)
   \   0000008A   0xD050             BEQ.N    ??getTokenSize_13
   \   0000008C   0x3845             SUBS     R0,R0,#+69
   \   0000008E   0xD046             BEQ.N    ??getTokenSize_7
   \   00000090   0x381E             SUBS     R0,R0,#+30
   \   00000092   0xD03A             BEQ.N    ??getTokenSize_8
   \   00000094   0xF44F 0x7180      MOV      R1,#+256
   \   00000098   0x1A40             SUBS     R0,R0,R1
   \   0000009A   0xD038             BEQ.N    ??getTokenSize_2
   \   0000009C   0x380C             SUBS     R0,R0,#+12
   \   0000009E   0xD03E             BEQ.N    ??getTokenSize_7
   \   000000A0   0xF240 0x510A      MOVW     R1,#+1290
   \   000000A4   0x1A40             SUBS     R0,R0,R1
   \   000000A6   0xD034             BEQ.N    ??getTokenSize_12
   \   000000A8   0xF44F 0x71FD      MOV      R1,#+506
   \   000000AC   0x1A40             SUBS     R0,R0,R1
   \   000000AE   0xD032             BEQ.N    ??getTokenSize_3
   \   000000B0   0x38F1             SUBS     R0,R0,#+241
   \   000000B2   0xD030             BEQ.N    ??getTokenSize_3
   \   000000B4   0xF44F 0x7100      MOV      R1,#+512
   \   000000B8   0x1A40             SUBS     R0,R0,R1
   \   000000BA   0xD020             BEQ.N    ??getTokenSize_14
   \   000000BC   0xF44F 0x7104      MOV      R1,#+528
   \   000000C0   0x1A40             SUBS     R0,R0,R1
   \   000000C2   0xD024             BEQ.N    ??getTokenSize_2
   \   000000C4   0x1E80             SUBS     R0,R0,#+2
   \   000000C6   0xD022             BEQ.N    ??getTokenSize_2
   \   000000C8   0xF44F 0x71E6      MOV      R1,#+460
   \   000000CC   0x1A40             SUBS     R0,R0,R1
   \   000000CE   0xD01A             BEQ.N    ??getTokenSize_6
   \   000000D0   0x3820             SUBS     R0,R0,#+32
   \   000000D2   0xD016             BEQ.N    ??getTokenSize_15
   \   000000D4   0x1E40             SUBS     R0,R0,#+1
   \   000000D6   0xD01A             BEQ.N    ??getTokenSize_2
   \   000000D8   0x1E40             SUBS     R0,R0,#+1
   \   000000DA   0xD010             BEQ.N    ??getTokenSize_14
   \   000000DC   0x380A             SUBS     R0,R0,#+10
   \   000000DE   0xD012             BEQ.N    ??getTokenSize_6
   \   000000E0   0xF44F 0x7102      MOV      R1,#+520
   \   000000E4   0x1A40             SUBS     R0,R0,R1
   \   000000E6   0xD012             BEQ.N    ??getTokenSize_2
   \   000000E8   0xF640 0x018B      MOVW     R1,#+2187
   \   000000EC   0x1A40             SUBS     R0,R0,R1
   \   000000EE   0xD00E             BEQ.N    ??getTokenSize_2
   \   000000F0   0x3808             SUBS     R0,R0,#+8
   \   000000F2   0xD00C             BEQ.N    ??getTokenSize_2
   \   000000F4   0x1F00             SUBS     R0,R0,#+4
   \   000000F6   0xD016             BEQ.N    ??getTokenSize_16
   \   000000F8   0xE01B             B.N      ??getTokenSize_17
    261              {
    262          #define TOKEN_MFG TOKEN_DEF
    263          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    264                  case creator: return sizeof(type);
    265              #include "token-stack.h"
   \                     ??getTokenSize_5: (+1)
   \   000000FA   0x2018             MOVS     R0,#+24
   \   000000FC   0x4770             BX       LR
   \                     ??getTokenSize_14: (+1)
   \   000000FE   0x2006             MOVS     R0,#+6
   \   00000100   0x4770             BX       LR
   \                     ??getTokenSize_15: (+1)
   \   00000102   0x200A             MOVS     R0,#+10
   \   00000104   0x4770             BX       LR
   \                     ??getTokenSize_6: (+1)
   \   00000106   0x2014             MOVS     R0,#+20
   \   00000108   0x4770             BX       LR
   \                     ??getTokenSize_8: (+1)
   \   0000010A   0x2004             MOVS     R0,#+4
   \   0000010C   0x4770             BX       LR
   \                     ??getTokenSize_2: (+1)
   \   0000010E   0x2002             MOVS     R0,#+2
   \   00000110   0x4770             BX       LR
   \                     ??getTokenSize_12: (+1)
   \   00000112   0x2011             MOVS     R0,#+17
   \   00000114   0x4770             BX       LR
   \                     ??getTokenSize_3: (+1)
   \   00000116   0x2010             MOVS     R0,#+16
   \   00000118   0x4770             BX       LR
   \                     ??getTokenSize_9: (+1)
   \   0000011A   0x201A             MOVS     R0,#+26
   \   0000011C   0x4770             BX       LR
   \                     ??getTokenSize_7: (+1)
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x4770             BX       LR
   \                     ??getTokenSize_10: (+1)
   \   00000122   0x200D             MOVS     R0,#+13
   \   00000124   0x4770             BX       LR
   \                     ??getTokenSize_16: (+1)
   \   00000126   0x200B             MOVS     R0,#+11
   \   00000128   0x4770             BX       LR
   \                     ??getTokenSize_11: (+1)
   \   0000012A   0x2019             MOVS     R0,#+25
   \   0000012C   0x4770             BX       LR
   \                     ??getTokenSize_13: (+1)
   \   0000012E   0x205C             MOVS     R0,#+92
   \   00000130   0x4770             BX       LR
    266          #undef TOKEN_MFG
    267          #undef TOKEN_DEF
    268              };
    269          #undef DEFINETOKENS
    270              return 0x00;  
   \                     ??getTokenSize_17: (+1)
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0x4770             BX       LR               ;; return
    271          }
    272          

   \                                 In section .text, align 2, keep-with-next
    273          int8u getTokenArraySize ( int16u creator )
    274          {
    275          #define DEFINETOKENS
    276              switch (creator) 
   \                     getTokenArraySize: (+1)
   \   00000000   0xF24B 0x2154      MOVW     R1,#+45652
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0xD071             BEQ.N    ??getTokenArraySize_0
   \   00000008   0xF44F 0x7178      MOV      R1,#+992
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xD06D             BEQ.N    ??getTokenArraySize_0
   \   00000010   0xF640 0x310F      MOVW     R1,#+2831
   \   00000014   0x1A40             SUBS     R0,R0,R1
   \   00000016   0xD065             BEQ.N    ??getTokenArraySize_1
   \   00000018   0xF44F 0x7184      MOV      R1,#+264
   \   0000001C   0x1A40             SUBS     R0,R0,R1
   \   0000001E   0xD065             BEQ.N    ??getTokenArraySize_0
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \   00000022   0xD063             BEQ.N    ??getTokenArraySize_0
   \   00000024   0x38F4             SUBS     R0,R0,#+244
   \   00000026   0xD061             BEQ.N    ??getTokenArraySize_0
   \   00000028   0x1E80             SUBS     R0,R0,#+2
   \   0000002A   0xD05F             BEQ.N    ??getTokenArraySize_0
   \   0000002C   0x3812             SUBS     R0,R0,#+18
   \   0000002E   0xD05D             BEQ.N    ??getTokenArraySize_0
   \   00000030   0xF240 0x51ED      MOVW     R1,#+1517
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD958             BLS.N    ??getTokenArraySize_0
   \   0000003A   0xF44F 0x6182      MOV      R1,#+1040
   \   0000003E   0x1A40             SUBS     R0,R0,R1
   \   00000040   0xD054             BEQ.N    ??getTokenArraySize_0
   \   00000042   0xF44F 0x713C      MOV      R1,#+752
   \   00000046   0x1A40             SUBS     R0,R0,R1
   \   00000048   0xD050             BEQ.N    ??getTokenArraySize_0
   \   0000004A   0xF44F 0x7100      MOV      R1,#+512
   \   0000004E   0x1A40             SUBS     R0,R0,R1
   \   00000050   0xD04A             BEQ.N    ??getTokenArraySize_2
   \   00000052   0xF44F 0x616E      MOV      R1,#+3808
   \   00000056   0x1A40             SUBS     R0,R0,R1
   \   00000058   0x2802             CMP      R0,#+2
   \   0000005A   0xD947             BLS.N    ??getTokenArraySize_0
   \   0000005C   0x383F             SUBS     R0,R0,#+63
   \   0000005E   0xD045             BEQ.N    ??getTokenArraySize_0
   \   00000060   0xF240 0x1101      MOVW     R1,#+257
   \   00000064   0x1A40             SUBS     R0,R0,R1
   \   00000066   0xD041             BEQ.N    ??getTokenArraySize_0
   \   00000068   0x38E2             SUBS     R0,R0,#+226
   \   0000006A   0xD03F             BEQ.N    ??getTokenArraySize_0
   \   0000006C   0x381F             SUBS     R0,R0,#+31
   \   0000006E   0xD03D             BEQ.N    ??getTokenArraySize_0
   \   00000070   0x380B             SUBS     R0,R0,#+11
   \   00000072   0xD03B             BEQ.N    ??getTokenArraySize_0
   \   00000074   0xF44F 0x7183      MOV      R1,#+262
   \   00000078   0x1A40             SUBS     R0,R0,R1
   \   0000007A   0xD037             BEQ.N    ??getTokenArraySize_0
   \   0000007C   0x38D0             SUBS     R0,R0,#+208
   \   0000007E   0xD035             BEQ.N    ??getTokenArraySize_0
   \   00000080   0x381E             SUBS     R0,R0,#+30
   \   00000082   0xD033             BEQ.N    ??getTokenArraySize_0
   \   00000084   0xF44F 0x7180      MOV      R1,#+256
   \   00000088   0x1A40             SUBS     R0,R0,R1
   \   0000008A   0xD02F             BEQ.N    ??getTokenArraySize_0
   \   0000008C   0x380C             SUBS     R0,R0,#+12
   \   0000008E   0xD02D             BEQ.N    ??getTokenArraySize_0
   \   00000090   0xF240 0x510A      MOVW     R1,#+1290
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0xD029             BEQ.N    ??getTokenArraySize_0
   \   00000098   0xF44F 0x71FD      MOV      R1,#+506
   \   0000009C   0x1A40             SUBS     R0,R0,R1
   \   0000009E   0xD025             BEQ.N    ??getTokenArraySize_0
   \   000000A0   0x38F1             SUBS     R0,R0,#+241
   \   000000A2   0xD023             BEQ.N    ??getTokenArraySize_0
   \   000000A4   0xF44F 0x7100      MOV      R1,#+512
   \   000000A8   0x1A40             SUBS     R0,R0,R1
   \   000000AA   0xD01F             BEQ.N    ??getTokenArraySize_0
   \   000000AC   0xF44F 0x7104      MOV      R1,#+528
   \   000000B0   0x1A40             SUBS     R0,R0,R1
   \   000000B2   0xD01B             BEQ.N    ??getTokenArraySize_0
   \   000000B4   0x1E80             SUBS     R0,R0,#+2
   \   000000B6   0xD019             BEQ.N    ??getTokenArraySize_0
   \   000000B8   0xF44F 0x71E6      MOV      R1,#+460
   \   000000BC   0x1A40             SUBS     R0,R0,R1
   \   000000BE   0xD015             BEQ.N    ??getTokenArraySize_0
   \   000000C0   0x3820             SUBS     R0,R0,#+32
   \   000000C2   0x2802             CMP      R0,#+2
   \   000000C4   0xD912             BLS.N    ??getTokenArraySize_0
   \   000000C6   0x380C             SUBS     R0,R0,#+12
   \   000000C8   0xD010             BEQ.N    ??getTokenArraySize_0
   \   000000CA   0xF44F 0x7102      MOV      R1,#+520
   \   000000CE   0x1A40             SUBS     R0,R0,R1
   \   000000D0   0xD00C             BEQ.N    ??getTokenArraySize_0
   \   000000D2   0xF640 0x018B      MOVW     R1,#+2187
   \   000000D6   0x1A40             SUBS     R0,R0,R1
   \   000000D8   0xD008             BEQ.N    ??getTokenArraySize_0
   \   000000DA   0x3808             SUBS     R0,R0,#+8
   \   000000DC   0xD006             BEQ.N    ??getTokenArraySize_0
   \   000000DE   0x1F00             SUBS     R0,R0,#+4
   \   000000E0   0xD006             BEQ.N    ??getTokenArraySize_3
   \   000000E2   0xE007             B.N      ??getTokenArraySize_4
    277              {
    278          #define TOKEN_MFG TOKEN_DEF
    279          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
    280                  case creator: return arraysize;
    281              #include "token-stack.h"
   \                     ??getTokenArraySize_1: (+1)
   \   000000E4   0x2014             MOVS     R0,#+20
   \   000000E6   0x4770             BX       LR
   \                     ??getTokenArraySize_2: (+1)
   \   000000E8   0x2010             MOVS     R0,#+16
   \   000000EA   0x4770             BX       LR
   \                     ??getTokenArraySize_0: (+1)
   \   000000EC   0x2001             MOVS     R0,#+1
   \   000000EE   0x4770             BX       LR
   \                     ??getTokenArraySize_3: (+1)
   \   000000F0   0x2006             MOVS     R0,#+6
   \   000000F2   0x4770             BX       LR
    282          #undef TOKEN_MFG
    283          #undef TOKEN_DEF
    284              };
    285          #undef DEFINETOKENS
    286              return 0x00;  
   \                     ??getTokenArraySize_4: (+1)
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x4770             BX       LR               ;; return
    287          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0x........         DC32     tokensActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x08040000         DC32     0x8040000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x24 0x46          DC8 "$FILE_FNAME$"
   \              0x49 0x4C    
   \              0x45 0x5F    
   \              0x46 0x4E    
   \              0x41 0x4D    
   \              0x45 0x24    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    288          
    289          ///////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   getTokenAddress
       0   getTokenArraySize
       0   getTokenSize
      24   halInternalGetTokenData
        24   -> halInternalGetTokenData
        24   -> halInternalSimEeGetData
       0   halInternalIncrementCounterToken
         0   -> halInternalSimEeIncrementCounter
      24   halInternalSetTokenData
        24   -> halInternalAssertFailed
        24   -> halInternalSimEeSetData
      16   halStackInitTokens
        16   -> halInternalGetTokenData
        16   -> halInternalSimEeStartup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable32
       4  ??DataTable32_1
      16  ?_0
       2  TOKEN_MFG_1V8_REG_VOLTAGE
       2  TOKEN_MFG_ANALOG_TRIM_BOOST
       2  TOKEN_MFG_ANALOG_TRIM_BOTH
       2  TOKEN_MFG_ANALOG_TRIM_NORMAL
       2  TOKEN_MFG_ASH_CONFIG
       2  TOKEN_MFG_BOARD_NAME
       2  TOKEN_MFG_BOOTLOAD_AES_KEY
       2  TOKEN_MFG_CBKE_DATA
       2  TOKEN_MFG_CHIP_DATA
       2  TOKEN_MFG_CIB_OBS
       2  TOKEN_MFG_CUSTOM_EUI_64
       2  TOKEN_MFG_CUSTOM_VERSION
       2  TOKEN_MFG_EMBER_EUI_64
       2  TOKEN_MFG_EUI_64
       2  TOKEN_MFG_EZSP_STORAGE
       2  TOKEN_MFG_FIB_CHECKSUM
       2  TOKEN_MFG_FIB_OBS
       2  TOKEN_MFG_FIB_VERSION
       2  TOKEN_MFG_INSTALLATION_CODE
       2  TOKEN_MFG_MANUF_ID
       2  TOKEN_MFG_OSC24M_BIAS_TRIM
       2  TOKEN_MFG_PART_DATA
       2  TOKEN_MFG_PHY_CONFIG
       2  TOKEN_MFG_REG_TRIM
       2  TOKEN_MFG_STRING
       2  TOKEN_MFG_TEMP_CAL
       2  TOKEN_MFG_TESTER_DATA
       2  TOKEN_MFG_VREF_VOLTAGE
     532  getTokenAddress
     248  getTokenArraySize
     310  getTokenSize
     160  halInternalGetTokenData
      14  halInternalIncrementCounterToken
      78  halInternalSetTokenData
     106  halStackInitTokens
       2  tokensActive
          simEeSetDataActiveSemaphore

 
     2 bytes in section .bss
    56 bytes in section .rodata
 1 472 bytes in section .text
 
 1 472 bytes of CODE  memory
    56 bytes of CONST memory
     2 bytes of DATA  memory

Errors: none
Warnings: none
