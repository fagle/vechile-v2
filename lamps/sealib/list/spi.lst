###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\lamp\spi.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\lamp\spi.c -D ENABLE_GATEWAY
#        -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\spi.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\spi.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\lamp\spi.c
      1          #include "spi.h"
      2          #include "serial.h"
      3          #include "network.h"
      4          
      5          /////////////////////////////////////////////////////////////////////////////////////////////
      6          //
      7          //* 函数名      : SPI_Configuration
      8          //* 功能        : SPI初始化
      9          //* 输入参数    : 无
     10          //* 输出参数    : 无
     11          //* 修改记录    : 无
     12          //* 备注        : 无
     13          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     14          void SPI_Configuration ( void )
     15          {
   \                     SPI_Configuration: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable5
   \   00000004   0x....             LDR.N    R4,??DataTable5_1  ;; 0x4000b010
   \   00000006   0x7C81             LDRB     R1,[R0, #+18]
   \   00000008   0x....             LDR.N    R0,??DataTable5_2  ;; 0x4000c050
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD121             BNE.N    ??SPI_Configuration_0
     16              if (network_info.type == EMBER_COORDINATOR)       // 网关-协调器  
     17              {
     18                  SC2_MODE       = 0x02;                        // SC2使用SPI
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x6041             STR      R1,[R0, #+4]
     19                  SC2_SPICFG    |= SC_SPIMST;                   // SPI主模式
   \   00000012   0x6881             LDR      R1,[R0, #+8]
   \   00000014   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000018   0x6081             STR      R1,[R0, #+8]
     20                  SC2_TWICTRL2  |= SC_TWIACK;
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000020   0x6001             STR      R1,[R0, #+0]
     21            
     22                  SC2_RATEEXP   = 0x03;  // 0x01;                         // 0x03 时钟频率设置xMb/s  3 9, speed 100k
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x6141             STR      R1,[R0, #+20]
     23                  SC2_RATELIN   = 0x09;                         // 0x09
   \   00000026   0x2109             MOVS     R1,#+9
   \   00000028   0x6101             STR      R1,[R0, #+16]
     24            
     25                  SC2_SPICFG   &= ~SC_SPIPOL_MASK;              // 帧格式选择
   \   0000002A   0x.... 0x....      BL       ?Subroutine2
     26                  SC2_SPICFG   &= ~SC_SPIPHA_MASK;
     27                  SC2_SPICFG   &= ~SC_SPIORD_MASK;
     28                  SC2_SPICFG   &= ~SC_SPIRPT_MASK;
     29                  
     30                  halGpioConfig(PORTA_PIN(0x00), 0x9u);         // 将PA0设为复用输出（推挽）
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000002E   0x2109             MOVS     R1,#+9
   \   00000030   0x.... 0x....      BL       halGpioConfig
     31                  halGpioConfig(PORTA_PIN(0x01), 0x8u);         // 将PA1设为输入(上拉)
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       halGpioConfig
     32                  halGpioConfig(PORTA_PIN(0x02), 0xBu);         // 将PA2设为复用输出（推挽）特殊SCLK
   \   0000003C   0x210B             MOVS     R1,#+11
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       halGpioConfig
     33                  halGpioConfig(PORTA_PIN(0x03), 0x1u);         // PA3主模式下不用,这里设为输出
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x.... 0x....      BL       halGpioConfig
     34            
     35                  GPIO_PASET_REG = (0x01 << PA1_BIT);           // PA1上拉 
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x6020             STR      R0,[R4, #+0]
     36            
     37                  Debug("\r\n---spi cfg(co)---");
   \   00000050   0xBD10             POP      {R4,PC}
     38              }
     39              else if (network_info.type == EMBER_ROUTER)       // 网关-路由  
   \                     ??SPI_Configuration_0: (+1)
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD11B             BNE.N    ??SPI_Configuration_1
     40              {
     41                  SC2_MODE       = 0x02;                        // SC2使用SPI
   \   00000056   0x6041             STR      R1,[R0, #+4]
     42                  SC2_SPICFG    &= ~SC_SPIMST_MASK;             // SPI从模式 
   \   00000058   0x6881             LDR      R1,[R0, #+8]
   \   0000005A   0xF021 0x0110      BIC      R1,R1,#0x10
   \   0000005E   0x6081             STR      R1,[R0, #+8]
     43            
     44                  SC2_SPICFG    &= ~SC_SPIPOL_MASK;             // 帧格式选择(从主设备获得)
   \   00000060   0x.... 0x....      BL       ?Subroutine2
     45                  SC2_SPICFG    &= ~SC_SPIPHA_MASK;
     46                  SC2_SPICFG    &= ~SC_SPIORD_MASK;
     47                  SC2_SPICFG    &= ~SC_SPIRPT_MASK;
     48                  
     49                  halGpioConfig(PORTA_PIN(0x00), 0x8u);         // 将PA0设为输入（上拉）
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000064   0x2108             MOVS     R1,#+8
   \   00000066   0x.... 0x....      BL       halGpioConfig
     50                  halGpioConfig(PORTA_PIN(0x01), 0x9u);         // 将PA1设为服用输出（推挽）
   \   0000006A   0x2109             MOVS     R1,#+9
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       halGpioConfig
     51                  halGpioConfig(PORTA_PIN(0x02), 0x8u);         // 将PA2设为输入
   \   00000072   0x2108             MOVS     R1,#+8
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0x.... 0x....      BL       halGpioConfig
     52                  halGpioConfig(PORTA_PIN(0x03), 0x8u);         // 将PA3设为输入SSEL
   \   0000007A   0x2108             MOVS     R1,#+8
   \   0000007C   0x2003             MOVS     R0,#+3
   \   0000007E   0x.... 0x....      BL       halGpioConfig
     53            
     54                  GPIO_PASET_REG = (0x01 << PA0_BIT);           // PA0上拉 
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x6020             STR      R0,[R4, #+0]
     55                  GPIO_PASET_REG = (0x01 << PA2_BIT);           // PA2上拉 
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x6020             STR      R0,[R4, #+0]
     56                  GPIO_PACLR_REG = (0x01 << PA3_BIT);           // PA3下拉 
   \   0000008A   0x2008             MOVS     R0,#+8
   \   0000008C   0x6060             STR      R0,[R4, #+4]
     57            
     58                  Debug("\r\n---spi cfg(zr)---");
     59              }
     60          //    Debug("\r\nSC2_MODE: 0x%x, SC2_SPICFG: 0x%x, SC2_TWICTRL2: 0x%x", (u16)(SC2_MODE), (u16)(SC2_SPICFG), (u16)(SC2_TWICTRL2));
     61              Debug("\r\nGPIO_PACFGL: 0x%x", GPIO_PACFGL);
     62          //    Debug("\r\nGPIO_PAOUT: 0x%x, GPIO_PAIN: 0x%x", GPIO_PAOUT, GPIO_PAIN);
     63          }
   \                     ??SPI_Configuration_1: (+1)
   \   0000008E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0x0849             LSRS     R1,R1,#+1
   \   00000004   0x0049             LSLS     R1,R1,#+1
   \   00000006   0x6081             STR      R1,[R0, #+8]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0xF021 0x0102      BIC      R1,R1,#0x2
   \   0000000E   0x6081             STR      R1,[R0, #+8]
   \   00000010   0x6881             LDR      R1,[R0, #+8]
   \   00000012   0xF021 0x0104      BIC      R1,R1,#0x4
   \   00000016   0x6081             STR      R1,[R0, #+8]
   \   00000018   0x6881             LDR      R1,[R0, #+8]
   \   0000001A   0xF021 0x0108      BIC      R1,R1,#0x8
   \   0000001E   0x6081             STR      R1,[R0, #+8]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4770             BX       LR
     64          
     65          /////////////////////////////////////////////////////////////////////////////////////////////
     66          //
     67          //* 函数名      : void spi_start( void )
     68          //* 功能        : 开始SPI传输，SSEL引脚置低
     69          //* 输入参数    : 无
     70          //* 输出参数    : 无
     71          //* 修改记录    : 无
     72          //* 备注        : 无
     73          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     74          void spi_start ( void )
     75          {
     76          //    Debug("\r\nspi_start:GPIO_PAOUT is %x", GPIO_PAOUT_REG);
     77              GPIO_PACLR_REG = (0x01 << PA3_BIT);
   \                     spi_start: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4000b014
   \   00000002   0x....             B.N      ?Subroutine1
     78          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x6008             STR      R0,[R1, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     79          
     80          /////////////////////////////////////////////////////////////////////////////////////////////
     81          //
     82          //* 函数名      : void spi_end( void )
     83          //* 功能        : 结束SPI传输，SSEL引脚置高
     84          //* 输入参数    : 无
     85          //* 输出参数    : 无
     86          //* 修改记录    : 无
     87          //* 备注        : 无
     88          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     89          void spi_end ( void )
     90          {
     91          //    Debug("\r\nspi end:GPIO_PAOUT is %x", GPIO_PAOUT_REG);
     92              GPIO_PASET_REG = (0x01 << PA3_BIT);
   \                     spi_end: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_1  ;; 0x4000b010
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1
     93          }
     94          
     95          /////////////////////////////////////////////////////////////////////////////////////////////
     96          //
     97          //* 函数名      : bool spi_iselect ( void )
     98          //* 功能        : 
     99          //* 输入参数    : 无
    100          //* 输出参数    : 无
    101          //* 修改记录    : 无
    102          //* 备注        : 无
    103          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    104          bool spi_iselect ( void )
    105          {
    106              if (GPIO_PAOUT & 0x08)
   \                     spi_iselect: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4  ;; 0x4000b00c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2001             MOVNE    R0,#+1
    107                  return (bool)TRUE;
    108              return (bool)FALSE;
   \   0000000C   0x4770             BX       LR               ;; return
    109          }
    110          
    111          /////////////////////////////////////////////////////////////////////////////////////////////
    112          //
    113          //* 函数名      : bool spi_isnotempty ( void )
    114          //* 功能        : 
    115          //* 输入参数    : 无
    116          //* 输出参数    : 无
    117          //* 修改记录    : 无
    118          //* 备注        : last function name : bool spi_isrxovf ( void )
    119          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    120          bool spi_isnotempty ( void )
    121          {
    122          //    if ((SC2_SPISTAT & SC_SPIRXOVF_MASK) >> SC_SPIRXOVF_BIT == 0x01)
    123              if (((SC2_SPISTAT & SC_SPIRXVAL_MASK) >> SC_SPIRXVAL_BIT == 0x01))
   \                     spi_isnotempty: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5  ;; 0x4000c040
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000008   0xB100             CBZ.N    R0,??spi_isnotempty_0
   \   0000000A   0x2001             MOVS     R0,#+1
    124                  return (bool)TRUE;
    125              return (bool)FALSE;
   \                     ??spi_isnotempty_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    126          }
    127          
    128          /////////////////////////////////////////////////////////////////////////////////////////////
    129          //
    130          //* 函数名      : static bool spi_ready ( void )
    131          //* 功能        : spi ready to read
    132          //* 输入参数    : 无
    133          //* 输出参数    : bool
    134          //* 修改记录    : 无
    135          //* 备注        : last function name : bool spi_isrxovf ( void )
    136          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    137          static bool spi_notready ( void )
    138          {
   \                     spi_notready: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139              vu32 timeout = SPITIMEOUT;
   \   00000002   0xF44F 0x2000      MOV      R0,#+524288
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0xE001             B.N      ??spi_notready_0
    140          
    141          //    while ((SC2_SPISTAT & SC_SPITXIDLE) != SC_SPITXIDLE && timeout --) ;
    142          //    while ((SC2_SPISTAT & SC_SPIRXVAL) !=  SC_SPIRXVAL)   // Wait until the Rx FIFO buffer will become not empty 
    143              while ((SC2_SPISTAT & SC_SPIRXVAL) !=  SC_SPIRXVAL  && --timeout )   // Wait until the Rx FIFO buffer will become not empty 
    144                  sea_feedwatchdog();
   \                     ??spi_notready_1: (+1)
   \   0000000A   0x.... 0x....      BL       sea_feedwatchdog
   \                     ??spi_notready_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable5_5  ;; 0x4000c040
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x0780             LSLS     R0,R0,#+30
   \   00000014   0xD403             BMI.N    ??spi_notready_2
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x1E40             SUBS     R0,R0,#+1
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0xD1F5             BNE.N    ??spi_notready_1
    145              
    146          //    return (bool)(FALSE);
    147              Debug("timeout%8x",timeout);
    148              
    149              return (bool)(timeout == 0x00 ? TRUE : FALSE);
   \                     ??spi_notready_2: (+1)
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0x4180             SBCS     R0,R0,R0
   \   00000024   0x0FC0             LSRS     R0,R0,#+31
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    150          }
    151          
    152          /////////////////////////////////////////////////////////////////////////////////////////////
    153          //
    154          //* 函数名      : u8 spi_writebyte ( u16 data )
    155          //* 功能        : Write a byte over the SPI
    156          //* 输入参数    : 无
    157          //* 输出参数    : 无
    158          //* 修改记录    : 无
    159          //* 备注        : 无
    160          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    161          u8 spi_writebyte ( u8 data )
    162          {
   \                     spi_writebyte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    163              SC2_DATA = data;
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    164              if (spi_notready())
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000006   0xB108             CBZ.N    R0,??spi_writebyte_0
    165                  return SPIEMPTY;
   \   00000008   0x20FF             MOVS     R0,#+255
   \   0000000A   0xBD10             POP      {R4,PC}
    166              return SC2_DATA;     // Read a data
   \                     ??spi_writebyte_0: (+1)
   \   0000000C   0x....             B.N      ?Subroutine0
    167          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x6820             LDR      R0,[R4, #+0]
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x....             LDR.N    R4,??DataTable5_6  ;; 0x4000c03c
   \   00000002   0x6020             STR      R0,[R4, #+0]
   \   00000004   0x....             B.N      spi_notready
    168          
    169          /////////////////////////////////////////////////////////////////////////////////////////////
    170          //
    171          //* 函数名      : u16 spi_readbyte ( void )
    172          //* 功能        : Read a byte over the SPI
    173          //* 输入参数    : 无
    174          //* 输出参数    : 无
    175          //* 修改记录    : 无
    176          //* 备注        : 无
    177          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    178          u8 spi_readbyte ( void )
    179          {
   \                     spi_readbyte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    180              SC2_DATA = SPIEMPTY;                                                   // Write the 0xFF data 
   \   00000002   0x....             LDR.N    R4,??DataTable5_6  ;; 0x4000c03c
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x6020             STR      R0,[R4, #+0]
    181              if (spi_notready())
   \   00000008   0x.... 0x....      BL       spi_notready
   \   0000000C   0xB108             CBZ.N    R0,??spi_readbyte_0
    182              {
    183                  return SPIEMPTY;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0xBD10             POP      {R4,PC}
    184              }
    185              return SC2_DATA;                                                       // Read a data 
   \                     ??spi_readbyte_0: (+1)
   \   00000012                      REQUIRE ?Subroutine0
   \   00000012                      ;; // Fall through to label ?Subroutine0
    186          }
    187          
    188          /////////////////////////////////////////////////////////////////////////////////////////////
    189          //
    190          //* 函数名      : u8 spi_readwrite ( u8 write_data )
    191          //* 功能        : Read and write a byte over the SPI
    192          //* 输入参数    : 无
    193          //* 输出参数    : 无
    194          //* 修改记录    : 无
    195          //* 备注        : 无
    196          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    197          u8 spi_readwrite ( u8 write_data )
    198          {    
   \                     spi_readwrite: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    199              SC2_DATA = write_data;                                                 // Write the 0xFF data 
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    200              if (spi_notready())
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000006   0xB108             CBZ.N    R0,??spi_readwrite_0
    201                  return SPIEMPTY;
   \   00000008   0x20FF             MOVS     R0,#+255
   \   0000000A   0xBD10             POP      {R4,PC}
    202              return SC2_DATA;                                                       // Read a data 
   \                     ??spi_readwrite_0: (+1)
   \   0000000C   0x....             B.N      ?Subroutine0
    203          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     network_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4000B010         DC32     0x4000b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4000C050         DC32     0x4000c050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4000B014         DC32     0x4000b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4000B00C         DC32     0x4000b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4000C040         DC32     0x4000c040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4000C03C         DC32     0x4000c03c
    204          
    205          /////////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SPI_Configuration
         8   -> halGpioConfig
       0   spi_end
       0   spi_iselect
       0   spi_isnotempty
       8   spi_notready
         8   -> sea_feedwatchdog
       8   spi_readbyte
         8   -> spi_notready
       8   spi_readwrite
         8   -> spi_notready
       0   spi_start
       8   spi_writebyte
         8   -> spi_notready


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       6  ?Subroutine0
       6  ?Subroutine1
      36  ?Subroutine2
       6  ?Subroutine3
     144  SPI_Configuration
       2  spi_end
      14  spi_iselect
      14  spi_isnotempty
      40  spi_notready
      18  spi_readbyte
      14  spi_readwrite
       4  spi_start
      14  spi_writebyte

 
 346 bytes in section .text
 
 346 bytes of CODE memory

Errors: none
Warnings: none
