###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\lamp\console.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\lamp\console.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\console.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\console.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\lamp\console.c
      1          #include <stdlib.h>
      2          #include "network.h"
      3          
      4          /******************************************************************************
      5          * 函数名      : s8 sea_getopt ( int argc, char *argv[], char *opt )
      6          * 功能        : get option char
      7          * 输入参数    : 无
      8          * 输出参数    : option char
      9          * 修改记录    : 无
     10          * 备注        : 无
     11          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     12          s8 sea_getopt ( int argc, char *argv[], char *opt )
     13          {
   \                     sea_getopt: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4681             MOV      R9,R0
     14              int         i;
     15              char        token;
     16           
     17              cmdhd1.optarg = NULL;
   \   00000006   0x....             LDR.N    R4,??DataTable1
     18              token = *(opt + cmdhd1.optpos);
   \   00000008   0x7AE5             LDRB     R5,[R4, #+11]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x60E0             STR      R0,[R4, #+12]
   \   0000000E   0x4688             MOV      R8,R1
   \   00000010   0x5CAE             LDRB     R6,[R5, R2]
     19              if (token != '\0')
   \   00000012   0xB1D6             CBZ.N    R6,??sea_getopt_0
     20              {
     21                  for (i = 0x00; i < argc; i ++)
   \   00000014   0x2700             MOVS     R7,#+0
   \   00000016   0xE000             B.N      ??sea_getopt_1
   \                     ??sea_getopt_2: (+1)
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
   \                     ??sea_getopt_1: (+1)
   \   0000001A   0x454F             CMP      R7,R9
   \   0000001C   0xDA11             BGE.N    ??sea_getopt_3
     22          	{
     23                      if (argv[i][0] != '-')
   \   0000001E   0xF858 0x0027      LDR      R0,[R8, R7, LSL #+2]
   \   00000022   0x7801             LDRB     R1,[R0, #+0]
   \   00000024   0x292D             CMP      R1,#+45
   \   00000026   0xD1F7             BNE.N    ??sea_getopt_2
     24                          continue;
     25          
     26                      if (strchr(argv[i], token) != 0x00)
   \   00000028   0x4631             MOV      R1,R6
   \   0000002A   0x.... 0x....      BL       __iar_Strchr
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD0F2             BEQ.N    ??sea_getopt_2
     27          	    {
     28                          cmdhd1.optarg = argv[i + 0x01];
   \   00000032   0xEB08 0x0087      ADD      R0,R8,R7, LSL #+2
   \   00000036   0x6840             LDR      R0,[R0, #+4]
   \   00000038   0x60E0             STR      R0,[R4, #+12]
     29          		cmdhd1.optpos ++;
   \   0000003A   0x1C68             ADDS     R0,R5,#+1
   \   0000003C   0x72E0             STRB     R0,[R4, #+11]
     30                          return token & 0xff;
   \   0000003E   0xB270             SXTB     R0,R6
   \   00000040   0xE006             B.N      ??sea_getopt_4
     31          	    }
     32          	}
     33                  cmdhd1.optpos ++;
   \                     ??sea_getopt_3: (+1)
   \   00000042   0x1C68             ADDS     R0,R5,#+1
   \   00000044   0x72E0             STRB     R0,[R4, #+11]
     34                  return 0x00;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE002             B.N      ??sea_getopt_4
     35              }
     36            
     37              cmdhd1.optpos = 0x00;
   \                     ??sea_getopt_0: (+1)
   \   0000004A   0x72E0             STRB     R0,[R4, #+11]
     38              return -1;  
   \   0000004C   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??sea_getopt_4: (+1)
   \   00000050   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
     39          }
     40          
     41          /******************************************************************************
     42          * 函数名      : static u8 sea_parseargs ( char *cmd )
     43          * 功能        : parse input command
     44          * 输入参数    : 无
     45          * 输出参数    : count of parameters
     46          * 修改记录    : 无
     47          * 备注        : 无
     48          ******************************************************************************/
     49          static u8 sea_parseargs ( char *cmd )
     50          {
     51              char *c;
     52              int  state = 0x00;
     53          
     54              cmdhd1.argc = 0x00;
     55              if (strlen(cmd) == 0x00)
     56                  return cmdhd1.argc;
     57          
     58              c = cmd;
     59              while (*c != '\0')
     60              {
     61                  if (*c == '\t')
     62                      *c = ' ';
     63          	c ++;
     64              }
     65          	
     66              c = cmd;
     67              while (*c != '\0')
     68              {
     69                  if (state == 0x00)
     70                  {
     71                      if (*c != ' ')
     72                      {
     73                          cmdhd1.argv[cmdhd1.argc ++] = c;		
     74                          state = 0x01;
     75                      }
     76                  }
     77                  else
     78                  { 
     79                      if (*c == ' ')
     80                      {
     81                          *c = '\0';
     82                          state = 0x00;
     83                      }
     84                  }
     85                  c ++;
     86              }
     87              return cmdhd1.argc;
     88          }
     89          
     90          /******************************************************************************
     91          * 函数名      : static int sea_getcmdmatche ( char *cmd )
     92          * 功能        : match input command
     93          * 输入参数    : char *cmd
     94          * 输出参数    : index of command
     95          * 修改记录    : 无
     96          * 备注        : 无
     97          ******************************************************************************/
     98          static int sea_getcmdmatche ( char *cmd )
     99          {
    100              int i;	
    101          	
    102              for (i = 0x00; cmdhd1.menu[i].cmd != NULL; i ++)
    103              {
    104                  if (strncmp(cmdhd1.menu[i].cmd, cmd, strlen(cmdhd1.menu[i].cmd)) == 0x00)
    105                      return i;
    106              }
    107          	
    108              return -1;
    109          }
    110          
    111          /******************************************************************************
    112          * 函数名      : void sea_parsecommand ( char * cmd, u8 len )
    113          * 功能        : parse input command
    114          * 输入参数    : char * cmd, u8 len
    115          * 输出参数    : 无
    116          * 修改记录    : 无
    117          * 备注        : 无
    118          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    119          void sea_parsecommand ( char * cmd, u8 len )
    120          {
   \                     sea_parsecommand: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    121              int   index;
    122          
    123              if (sea_parseargs(cmd) == 0x00)
   \   00000004   0x....             LDR.N    R4,??DataTable1
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x4606             MOV      R6,R0
   \   0000000A   0x72A7             STRB     R7,[R4, #+10]
   \   0000000C   0x.... 0x....      BL       strlen
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD043             BEQ.N    ??sea_parsecommand_0
   \   00000014   0x4630             MOV      R0,R6
   \   00000016   0xE004             B.N      ??sea_parsecommand_1
   \                     ??sea_parsecommand_2: (+1)
   \   00000018   0x2909             CMP      R1,#+9
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2120             MOVEQ    R1,#+32
   \   0000001E   0x7001             STRBEQ   R1,[R0, #+0]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \                     ??sea_parsecommand_1: (+1)
   \   00000022   0x7801             LDRB     R1,[R0, #+0]
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD1F7             BNE.N    ??sea_parsecommand_2
   \   00000028   0xE005             B.N      ??sea_parsecommand_3
   \                     ??sea_parsecommand_4: (+1)
   \   0000002A   0x2820             CMP      R0,#+32
   \   0000002C   0xD102             BNE.N    ??sea_parsecommand_5
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x7030             STRB     R0,[R6, #+0]
   \   00000032   0x2700             MOVS     R7,#+0
   \                     ??sea_parsecommand_5: (+1)
   \   00000034   0x1C76             ADDS     R6,R6,#+1
   \                     ??sea_parsecommand_3: (+1)
   \   00000036   0x7AA1             LDRB     R1,[R4, #+10]
   \   00000038   0x7830             LDRB     R0,[R6, #+0]
   \   0000003A   0x4688             MOV      R8,R1
   \   0000003C   0xB158             CBZ.N    R0,??sea_parsecommand_6
   \   0000003E   0x2F00             CMP      R7,#+0
   \   00000040   0xD1F3             BNE.N    ??sea_parsecommand_4
   \   00000042   0x2820             CMP      R0,#+32
   \   00000044   0xD0F6             BEQ.N    ??sea_parsecommand_5
   \   00000046   0xEB04 0x0088      ADD      R0,R4,R8, LSL #+2
   \   0000004A   0x2701             MOVS     R7,#+1
   \   0000004C   0x6106             STR      R6,[R0, #+16]
   \   0000004E   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x72A0             STRB     R0,[R4, #+10]
   \   00000054   0xE7EE             B.N      ??sea_parsecommand_5
   \                     ??sea_parsecommand_6: (+1)
   \   00000056   0xB309             CBZ.N    R1,??sea_parsecommand_0
    124                  return;
    125          	
    126              if ((index = sea_getcmdmatche(cmdhd1.argv[0x00])) >= 0x00)
   \   00000058   0x6926             LDR      R6,[R4, #+16]
   \   0000005A   0x6825             LDR      R5,[R4, #+0]
   \   0000005C   0x2700             MOVS     R7,#+0
   \   0000005E   0xE000             B.N      ??sea_parsecommand_7
   \                     ??sea_parsecommand_8: (+1)
   \   00000060   0x1C7F             ADDS     R7,R7,#+1
   \                     ??sea_parsecommand_7: (+1)
   \   00000062   0x200C             MOVS     R0,#+12
   \   00000064   0xFB00 0xF907      MUL      R9,R0,R7
   \   00000068   0xF859 0x0005      LDR      R0,[R9, R5]
   \   0000006C   0xB1B0             CBZ.N    R0,??sea_parsecommand_0
   \   0000006E   0x.... 0x....      BL       strlen
   \   00000072   0x4602             MOV      R2,R0
   \   00000074   0xF859 0x0005      LDR      R0,[R9, R5]
   \   00000078   0x4631             MOV      R1,R6
   \   0000007A   0x.... 0x....      BL       strncmp
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD1EE             BNE.N    ??sea_parsecommand_8
   \   00000082   0x2F00             CMP      R7,#+0
   \   00000084   0xD40A             BMI.N    ??sea_parsecommand_0
   \   00000086   0xEB09 0x0005      ADD      R0,R9,R5
   \   0000008A   0x6882             LDR      R2,[R0, #+8]
   \   0000008C   0x0010             MOVS     R0,R2
   \   0000008E   0xD005             BEQ.N    ??sea_parsecommand_0
    127              {	
    128                  if (cmdhd1.menu[index].proc != NULL)	
    129          	    cmdhd1.menu[index].proc(cmdhd1.argc, cmdhd1.argv);
   \   00000090   0xF104 0x0110      ADD      R1,R4,#+16
   \   00000094   0x4640             MOV      R0,R8
   \   00000096   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000009A   0x4710             BX       R2
    130              }
    131          }
   \                     ??sea_parsecommand_0: (+1)
   \   0000009C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     cmdhd1
    132          
    133          ///////////////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   sea_getopt
        32   -> __iar_Strchr
      32   sea_parsecommand
        32   -> strlen
        32   -> strncmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      84  sea_getopt
     160  sea_parsecommand

 
 248 bytes in section .text
 
 248 bytes of CODE memory

Errors: none
Warnings: none
