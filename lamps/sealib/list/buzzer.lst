###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\hal\buzzer.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\hal\buzzer.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\buzzer.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\buzzer.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\hal\buzzer.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "hal.h"
      5          
      6          // Tune state

   \                                 In section .data, align 4
      7          int8u PGM *currentTune = NULL;
      8          int8u tunePos = 0;
   \                     tunePos:
   \   00000000   0x00               DC8 0
      9          int16u currentDuration = 0;
     10          boolean tuneDone=TRUE;
   \                     tuneDone:
   \   00000001   0x01               DC8 1
   \                     currentDuration:
   \   00000002   0x0000             DC16 0
   \                     currentTune:
   \   00000004   0x00000000         DC32 0H
     11          
     12          // Keep the defaults if not defined on the board file. Default is TMR1
     13          #ifndef BUZZER_CLK
     14          #define BUZZER_CLK TIM1_OR
     15          #endif
     16          
     17          #ifndef BUZZER_PSC
     18          #define BUZZER_PSC TIM1_PSC
     19          #endif
     20          
     21          #ifndef BUZZER_UPDATE
     22          #define BUZZER_UPDATE TIM1_EGR
     23          #endif
     24          
     25          #ifndef BUZZER_OUTPUT_CFG 
     26          #define BUZZER_OUTPUT_CFG TIM1_CCMR1
     27          #endif
     28          
     29          #ifndef BUZZER_OUTPUT_MODE
     30          #define BUZZER_OUTPUT_MODE (0x3 << TIM_OC2M_BIT)
     31          #endif
     32          
     33          #ifndef BUZZER_OUTPUT_ENABLE 
     34          #define BUZZER_OUTPUT_ENABLE TIM1_CCER
     35          #endif
     36          
     37          #ifndef BUZZER_TOP
     38          #define BUZZER_TOP TIM1_ARR
     39          #endif 
     40          
     41          #ifndef BUZZER_COMPARE
     42          #define BUZZER_COMPARE TIM1_CCR2
     43          #endif 
     44          
     45          #ifndef BUZZER_CNT
     46          #define BUZZER_CNT TIM1_CNT
     47          #endif 
     48          
     49          #ifndef BUZZER_INT_MASK
     50          #define BUZZER_INT_MASK INT_TIM1CFG
     51          #endif
     52          
     53          #ifndef BUZZER_INT
     54          #define BUZZER_INT INT_TIM1FLAG
     55          #endif
     56          
     57          #ifndef BUZZER_BIT
     58          #define BUZZER_BIT INT_TIMUIF
     59          #endif
     60          
     61          #ifndef BUZZER_ENABLE
     62          #define BUZZER_ENABLE TIM1_CR1
     63          #endif
     64          
     65          #ifndef BUZZER_TEMPO
     66          #define BUZZER_TEMPO 200
     67          #endif
     68          
     69          // EO defaults
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void halPlayTune_P(int8u PGM *tune, boolean bkg)
     72          {
   \                     halPlayTune_P: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
     73            //According to emulator.h, buzzer is on pin 15 which is mapped 
     74            //to channel 2 of TMR1
     75            BUZZER_CLK = 0; //use 12MHz clock
   \   00000004   0x....             LDR.N    R5,??DataTable1  ;; 0x4000e000
     76            BUZZER_PSC = 5; //2^5=32 -> 12MHz/32 = 375kHz = 2.6us tick
     77            BUZZER_UPDATE = 1; //trigger update event to load new prescaler value
     78            BUZZER_OUTPUT_CFG  = 0; //start from a zeroed configuration
     79            //Output waveform. Toggle on CNT = COMPARE which is configured to be 
     80            //the same as TOP.
     81            BUZZER_OUTPUT_CFG |= BUZZER_OUTPUT_MODE; 
     82            
     83            currentTune = tune; 
   \   00000006   0x....             LDR.N    R6,??DataTable1_1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6529             STR      R1,[R5, #+80]
     84            BUZZER_TOP = tune[0]*13; //magical conversion to match our tick period
   \   0000000C   0x220D             MOVS     R2,#+13
   \   0000000E   0x2105             MOVS     R1,#+5
   \   00000010   0x62A9             STR      R1,[R5, #+40]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x6169             STR      R1,[R5, #+20]
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x61A9             STR      R1,[R5, #+24]
   \   0000001A   0x69A9             LDR      R1,[R5, #+24]
   \   0000001C   0xF441 0x5140      ORR      R1,R1,#0x3000
   \   00000020   0x61A9             STR      R1,[R5, #+24]
   \   00000022   0x6070             STR      R0,[R6, #+4]
   \   00000024   0x7801             LDRB     R1,[R0, #+0]
   \   00000026   0x4351             MULS     R1,R2,R1
   \   00000028   0x62E9             STR      R1,[R5, #+44]
     85            BUZZER_COMPARE = BUZZER_TOP; //set both compare and reload to be the same
     86            BUZZER_CNT = 0; //force the counter back to zero to prevent missing BUZZER_TOP
     87            
     88            // Magic duration calculation based on frequency
     89            currentDuration = ((int16u)BUZZER_TEMPO*(int16u)tune[1])/(tune[0]/15);
   \   0000002A   0x220F             MOVS     R2,#+15
   \   0000002C   0x6AE9             LDR      R1,[R5, #+44]
   \   0000002E   0x63A9             STR      R1,[R5, #+56]
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6269             STR      R1,[R5, #+36]
   \   00000034   0x7801             LDRB     R1,[R0, #+0]
   \   00000036   0x7840             LDRB     R0,[R0, #+1]
   \   00000038   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000003C   0x22C8             MOVS     R2,#+200
   \   0000003E   0x4350             MULS     R0,R2,R0
   \   00000040   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000044   0x8070             STRH     R0,[R6, #+2]
     90            tunePos = 2;  // First note is already set up
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x7030             STRB     R0,[R6, #+0]
     91            tuneDone = FALSE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7070             STRB     R0,[R6, #+1]
     92            ATOMIC(
     93              BUZZER_INT_MASK = BUZZER_BIT; //enable the Timer 1, CNT ?= TOP interrupt
     94              INT_CFGSET |= INT_TIM1; //enable top level timer interrupts
     95              BUZZER_OUTPUT_ENABLE = TIM_CC2E; //enable output on channel 2
     96              BUZZER_ENABLE |= TIM_CEN; //enable counting
     97            )
   \   0000004E   0x.... 0x....      BL       _disableBasePri
   \   00000052   0x....             LDR.N    R2,??DataTable1_2  ;; 0x4000a840
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x6011             STR      R1,[R2, #+0]
   \   00000058   0x....             LDR.N    R1,??DataTable1_3  ;; 0xe000e100
   \   0000005A   0x680A             LDR      R2,[R1, #+0]
   \   0000005C   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000060   0x600A             STR      R2,[R1, #+0]
   \   00000062   0x2110             MOVS     R1,#+16
   \   00000064   0x6229             STR      R1,[R5, #+32]
   \   00000066   0x6829             LDR      R1,[R5, #+0]
   \   00000068   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000006C   0x6029             STR      R1,[R5, #+0]
   \   0000006E   0x.... 0x....      BL       _writeBasePri
   \   00000072   0xE001             B.N      ??halPlayTune_P_0
     98            while( (!bkg) && (!tuneDone)) {
     99              halResetWatchdog();
   \                     ??halPlayTune_P_1: (+1)
   \   00000074   0x.... 0x....      BL       halInternalResetWatchDog
    100            }
   \                     ??halPlayTune_P_0: (+1)
   \   00000078   0x7870             LDRB     R0,[R6, #+1]
   \   0000007A   0x4320             ORRS     R0,R0,R4
   \   0000007C   0xD0FA             BEQ.N    ??halPlayTune_P_1
    101          }
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return
    102          
    103          #if 0
    104          void halTimer1Isr(void)
    105          {
    106            if(currentDuration-- == 0) {
    107              if(currentTune[tunePos+1]) {
    108                if(currentTune[tunePos]) {
    109                  // generate a note
    110                  BUZZER_TOP = currentTune[tunePos]*13; //magical conversion
    111                  BUZZER_COMPARE = BUZZER_TOP;
    112                  BUZZER_CNT = 0; //force the counter back to zero to prevent missing BUZZER_TOP
    113                  BUZZER_OUTPUT_ENABLE = TIM_CC2E; //enable output on channel 2
    114                  // work some magic to determine the duration based upon the frequency
    115                  // of the note we are currently playing.
    116                  currentDuration = ((int16u)BUZZER_TEMPO*(int16u)currentTune[tunePos+1])
    117                                    /(currentTune[tunePos]/15);
    118                } else {
    119                  // generate a pause
    120                  BUZZER_TOP = 403; //simulated a note (NOTE_B4*13), but output is disabled
    121                  BUZZER_CNT = 0; //force the counter back to zero to prevent missing BUZZER_TOP
    122                  BUZZER_OUTPUT_ENABLE = 0; //Output waveform disabled for silence
    123                  currentDuration = ((int16u)BUZZER_TEMPO*(int16u)currentTune[tunePos+1])/(31/15);
    124                }
    125                tunePos += 2;
    126              } else {
    127                // End tune
    128                BUZZER_INT_MASK &= ~BUZZER_BIT; //disable the Timer, CNT ?= TOP interrupt
    129                INT_CFGSET &= ~INT_TIM1; //stop the interrupts
    130                BUZZER_OUTPUT_ENABLE  = 0; //disable output
    131                BUZZER_ENABLE = 0;; //disable timer
    132                tuneDone = TRUE;
    133              }
    134            }
    135            //clear interrupt
    136            BUZZER_INT = 0xFFFFFFFF;
    137          }
    138          #endif
    139          

   \                                 In section .text, align 4, keep-with-next
    140          int8u PGM hereIamTune[] = {
   \                     hereIamTune:
   \   00000000   0x1F 0x01          DC8 31, 1, 0, 1, 31, 1, 0, 1, 31, 1, 0, 1, 15, 5, 0, 0
   \              0x00 0x01    
   \              0x1F 0x01    
   \              0x00 0x01    
   \              0x1F 0x01    
   \              0x00 0x01    
   \              0x0F 0x05    
   \              0x00 0x00    
    141            NOTE_B4,  1,
    142            0,        1,
    143            NOTE_B4,  1,
    144            0,        1,
    145            NOTE_B4,  1,
    146            0,        1,
    147            NOTE_B5,  5,
    148            0,        0
    149          };
    150          

   \                                 In section .text, align 2, keep-with-next
    151          void halStackIndicatePresence(void)
    152          {
    153            halPlayTune_P(hereIamTune,TRUE);
   \                     halStackIndicatePresence: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x.... 0x....      ADR.W    R0,hereIamTune
   \   00000006   0x....             B.N      halPlayTune_P
    154          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x4000E000         DC32     0x4000e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     tunePos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x4000A840         DC32     0x4000a840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E100         DC32     0xe000e100
    155          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   halPlayTune_P
        16   -> _disableBasePri
        16   -> _writeBasePri
        16   -> halInternalResetWatchDog
       0   halStackIndicatePresence
         0   -> halPlayTune_P


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
     128  halPlayTune_P
       8  halStackIndicatePresence
      16  hereIamTune
       8  tunePos
          tuneDone
          currentDuration
          currentTune

 
   8 bytes in section .data
 168 bytes in section .text
 
 168 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
