###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\util\security-address-cache.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\util\security-address-cache.c
#        -D ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\security-address-cache.lst
#    Object file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\obj\security-address-cache.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\util\security-address-cache.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "error.h"
      5          #include "hal.h"
      6          #include "serial.h"
      7          #include "security.h"
      8          
      9          //------------------------------------------------------------------------------
     10          

   \                                 In section .bss, align 1
     11          int8u addressCacheSize = 0;             
   \                     addressCacheSize:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
     12          static int8u addressCacheStartIndex;
     13          static int8u nextIndex;                 // relative to addressCacheStartIndex
     14          
     15          //------------------------------------------------------------------------------
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void securityAddressCacheInit(int8u securityAddressCacheStartIndex,
     18                                        int8u securityAddressCacheSize)
     19          {
     20            addressCacheStartIndex = securityAddressCacheStartIndex;
   \                     securityAddressCacheInit: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable1
   \   00000002   0x7050             STRB     R0,[R2, #+1]
     21            addressCacheSize = securityAddressCacheSize;
     22            nextIndex = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7011             STRB     R1,[R2, #+0]
   \   00000008   0x7090             STRB     R0,[R2, #+2]
     23          }
   \   0000000A   0x4770             BX       LR               ;; return
     24          
     25          //------------------------------------------------------------------------------
     26          // The Trust Center Address cache keeps track of EUI64s for the purpose of
     27          // sending APS Encrypted commands.  During joining the Trust Center
     28          // will send an APS Encrypted command to the parent of the device and needs to 
     29          // know their long address for creating the Nonce used in encryption.
     30          
     31          // We simply loop through our cache and overwrite the last one received.
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void securityAddToAddressCache(EmberNodeId nodeId, EmberEUI64 nodeEui64)
     34          {
   \                     securityAddToAddressCache: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
     35            int8u index = nextIndex;
   \   00000004   0x....             LDR.N    R6,??DataTable1
   \   00000006   0x78B7             LDRB     R7,[R6, #+2]
   \   00000008   0x4604             MOV      R4,R0
     36            int8u i;
     37          
     38            if (addressCacheSize == 0) {
   \   0000000A   0x7830             LDRB     R0,[R6, #+0]
   \   0000000C   0x4688             MOV      R8,R1
   \   0000000E   0xB350             CBZ.N    R0,??securityAddToAddressCache_0
     39              return;
     40            }
     41          
     42            // Search through our cache for an existing IEEE with the same info.
     43            // If it exists update that.
     44            for (i = 0; i < addressCacheSize; i++) {
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE000             B.N      ??securityAddToAddressCache_1
   \                     ??securityAddToAddressCache_2: (+1)
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \                     ??securityAddToAddressCache_1: (+1)
   \   00000016   0x7830             LDRB     R0,[R6, #+0]
   \   00000018   0xB2ED             UXTB     R5,R5
   \   0000001A   0x4285             CMP      R5,R0
   \   0000001C   0xD20D             BCS.N    ??securityAddToAddressCache_3
     45              EmberEUI64 eui64;
     46              emberGetAddressTableRemoteEui64(addressCacheStartIndex + i, eui64);
   \   0000001E   0x7870             LDRB     R0,[R6, #+1]
   \   00000020   0x1828             ADDS     R0,R5,R0
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
     47              if (MEMCOMPARE(eui64, nodeEui64, EUI64_SIZE) == 0) {
   \   0000002A   0x2208             MOVS     R2,#+8
   \   0000002C   0x4641             MOV      R1,R8
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x.... 0x....      BL       halCommonMemCompare
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD1ED             BNE.N    ??securityAddToAddressCache_2
     48                index = i;
   \   00000038   0x462F             MOV      R7,R5
     49                break;
     50              }
     51            }
     52          
     53            if (index == nextIndex) {
   \                     ??securityAddToAddressCache_3: (+1)
   \   0000003A   0x78B0             LDRB     R0,[R6, #+2]
   \   0000003C   0x4601             MOV      R1,R0
   \   0000003E   0x4287             CMP      R7,R0
   \   00000040   0xBF01             ITTTT    EQ 
   \   00000042   0x1C49             ADDEQ    R1,R1,#+1
   \   00000044   0x7830             LDRBEQ   R0,[R6, #+0]
   \   00000046   0xB2C9             UXTBEQ   R1,R1
   \   00000048   0x4281             CMPEQ    R1,R0
     54              nextIndex += 1;
     55              if (nextIndex == addressCacheSize)
   \   0000004A   0xBF08             IT       EQ 
   \   0000004C   0x2100             MOVEQ    R1,#+0
     56                nextIndex = 0;
     57            }
     58          
     59            index += addressCacheStartIndex;
   \   0000004E   0x7870             LDRB     R0,[R6, #+1]
   \   00000050   0x70B1             STRB     R1,[R6, #+2]
   \   00000052   0x19C7             ADDS     R7,R0,R7
     60            if (emberSetAddressTableRemoteEui64(index, nodeEui64)
     61                == EMBER_SUCCESS) {
   \   00000054   0x4641             MOV      R1,R8
   \   00000056   0xB2F8             UXTB     R0,R7
   \   00000058   0x.... 0x....      BL       emberSetAddressTableRemoteEui64
   \   0000005C   0xB918             CBNZ.N   R0,??securityAddToAddressCache_0
     62              emberSetAddressTableRemoteNodeId(index, nodeId);
   \   0000005E   0x4621             MOV      R1,R4
   \   00000060   0xB2F8             UXTB     R0,R7
   \   00000062   0x.... 0x....      BL       emberSetAddressTableRemoteNodeId
     63            }
     64          }
   \                     ??securityAddToAddressCache_0: (+1)
   \   00000066   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     addressCacheSize

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   securityAddToAddressCache
        32   -> emberGetAddressTableRemoteEui64
        32   -> emberSetAddressTableRemoteEui64
        32   -> emberSetAddressTableRemoteNodeId
        32   -> halCommonMemCompare
       0   securityAddressCacheInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       3  addressCacheSize
          addressCacheStartIndex
          nextIndex
     106  securityAddToAddressCache
      12  securityAddressCacheInit

 
   3 bytes in section .bss
 122 bytes in section .text
 
 122 bytes of CODE memory
   3 bytes of DATA memory

Errors: none
Warnings: none
