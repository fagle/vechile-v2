###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\hal\random.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\hal\random.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\random.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\random.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\hal\random.c
      1          
      2          #include "config.h"
      3          #include "ember-types.h"
      4          #include "hal.h"
      5          
      6          //////////////////////////////////////////////////////////////////////////////////////
      7          //

   \                                 In section .data, align 2
      8          static int16u seed0 = 0xbeef;
   \                     seed0:
   \   00000000   0xBEEF             DC16 48879
   \   00000002   0xFACE             DC16 64206
      9          static int16u seed1 = 0xface;
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void halStackSeedRandom ( int32u seed ) 
     12          {
     13              seed0 = (int16u) seed;
     14              if (seed0 == 0x00)
   \                     halStackSeedRandom: (+1)
   \   00000000   0xB281             UXTH     R1,R0
   \   00000002   0xB909             CBNZ.N   R1,??halStackSeedRandom_0
     15                  seed0 = 0xbeef;
   \   00000004   0xF64B 0x61EF      MOVW     R1,#+48879
   \                     ??halStackSeedRandom_0: (+1)
   \   00000008   0x....             LDR.N    R2,??DataTable1
     16              seed1 = (int16u)(seed >> 16);
   \   0000000A   0x0C00             LSRS     R0,R0,#+16
     17              if (seed1 == 0x00)
   \   0000000C   0xBF08             IT       EQ 
   \   0000000E   0xF64F 0x20CE      MOVWEQ   R0,#+64206
   \   00000012   0x8011             STRH     R1,[R2, #+0]
     18                  seed1 = 0xface;
   \   00000014   0x8050             STRH     R0,[R2, #+2]
     19          }
   \   00000016   0x4770             BX       LR               ;; return
     20          
     21          /*
     22            the stdlib rand() takes about 2.25ms @3.68MHz on the AVR
     23            hell- you can run an software implimentation AES cipher block in 1.5ms!
     24            obviously an LFSR method is much faster (12us on a 4MHz 128AVR actually).
     25            in the FPGA we did the first poly you see here but on a 32bit seed, 
     26            taking only the msb word, but we quickly noticed a sequential nature 
     27            in the output. so at each random number generation we actually ran the 
     28            LFSR 16 times. we can avoid that but still remove the sequential nature 
     29            and get a good looking spread by running two LFSRs and XORing them.
     30          */
     31          
     32          // ** NOTE: we might consider replacing the pseudo rng generation by
     33          // LFSR with something like SCG, LCG, or ACG - if the time trade off
     34          // is acceptable.

   \                                 In section .text, align 2, keep-with-next
     35          static int16u shift ( int16u *val, int16u taps )
     36          {
     37              int16u newVal = *val;
   \                     shift: (+1)
   \   00000000   0x8802             LDRH     R2,[R0, #+0]
     38          
     39              if (newVal & 0x8000)
   \   00000002   0x0413             LSLS     R3,R2,#+16
   \   00000004   0xBF48             IT       MI 
   \   00000006   0x404A             EORMI    R2,R1,R2
     40                  newVal ^= taps;
     41              *val = newVal << 0x01;
   \   00000008   0x0051             LSLS     R1,R2,#+1
   \   0000000A   0x8001             STRH     R1,[R0, #+0]
     42              return newVal;
   \   0000000C   0x4610             MOV      R0,R2
   \   0000000E   0x4770             BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          int16u halCommonGetRandom ( void )
     46          {
   \                     halCommonGetRandom: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     47              return (shift(&seed0, 0x0062) ^ shift(&seed1, 0x100B));
   \   00000002   0x....             LDR.N    R4,??DataTable1
   \   00000004   0x2162             MOVS     R1,#+98
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       shift
   \   0000000C   0x4605             MOV      R5,R0
   \   0000000E   0xF241 0x010B      MOVW     R1,#+4107
   \   00000012   0x1CA0             ADDS     R0,R4,#+2
   \   00000014   0x.... 0x....      BL       shift
   \   00000018   0x4068             EORS     R0,R0,R5
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     48          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     seed0
     49          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   halCommonGetRandom
        16   -> shift
       0   halStackSeedRandom
       0   shift


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      28  halCommonGetRandom
      24  halStackSeedRandom
       4  seed0
          seed1
      16  shift

 
  4 bytes in section .data
 72 bytes in section .text
 
 72 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
