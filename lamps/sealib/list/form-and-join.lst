###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\util\form-and-join.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\util\form-and-join.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\form-and-join.lst
#    Object file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\obj\form-and-join.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\util\form-and-join.c
      1          
      2          #include "config.h"
      3          
      4          #define __FORM_AND_JOIN_C__
      5          
      6          #include "ember-types.h"
      7          #include "error.h"
      8          #include "hal.h" 
      9          #include "mem.h"
     10          #include "serial.h"
     11          #include "form-and-join.h"
     12          #include "form-and-join-adapter.h"
     13          #include "sysinfo.h"
     14          #include "network.h"
     15          
     16          //////////////////////////////////////////////////////////////////////////////////////////
     17          // We can't include ember.h or ezsp.h from this file since it is used
     18          // for both host and node-size libraries.  However the emberStartScan()
     19          // API is identical in both.
     20          extern EmberStatus emberStartScan ( int8u scanType, int32u channelMask, int8u duraiton );
     21          
     22          extern panid_t panid_info[];
     23          
     24          enum {
     25            FORM_AND_JOIN_NOT_SCANNING,
     26            FORM_AND_JOIN_NEXT_NETWORK,
     27            FORM_AND_JOIN_ENERGY_SCAN,      
     28            FORM_AND_JOIN_PAN_ID_SCAN,      
     29            FORM_AND_JOIN_JOINABLE_SCAN,    
     30            FORM_AND_JOIN_DUAL_CHANNEL_SCAN 
     31          };
     32          
     33          #define SCAN_START    0x00
     34          #define SCAN_DUAL     0x01
     35          #define SCAN_COMPLETE 0x02
     36          #define SCAN_LEISURE  0x03
     37          
     38          #if 1

   \                                 In section .data, align 4
     39          static int8u formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
   \                     formAndJoinScanType:
   \   00000000   0x00               DC8 0
   \   00000001   0x03               DC8 3
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00               DC8 0
   \   00000007   0x00               DC8 0
   \   00000008   0x00               DC8 0
   \   00000009   0x00               DC8 0
   \   0000000A   0x00               DC8 0
   \   0000000B   0x00               DC8 0
     40          
     41          static int8u *dataContents;
     42          #define panIdCandidates ((int16u *)dataContents)
     43          #define channelEnergies (dataContents)
     44          
     45          static int8u extendedPanIdCache[EXTENDED_PAN_ID_SIZE];
     46          static int8u scanStatus = SCAN_LEISURE;
     47          static int8u  scanFail;
     48          static int8u  scanWait;
     49          static int8u  currentChannel;
     50          static int8u  lastChannel;
     51          
     52          static int8u  scanSingnal;
     53          
     54          static int8u  scanChannel[18];
     55          static int8u  channelOut;
     56          static int8u  channelIn;
     57          static int8u  readError;
     58          
     59          
     60          static int8u channelCache;
     61          //static int8u lastChannelCache = 0;
     62          static boolean ignoreExtendedPanId;
     63          
     64          int8u networkCount;  // The number of NetworkInfo records.
   \                     networkCount:
   \   0000000C   0x00               DC8 0
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     65          

   \                                 In section .bss, align 4
     66          NetworkInfo2 networkInfo2[MAXNETBUF];
   \                     networkInfo2:
   \   00000000                      DS8 48
     67          
     68          #else
     69          typedef struct
     70          {
     71              u8   type;
     72              u8   channel;
     73              u8   ignore;
     74              u8   count;
     75              u32  mask;
     76              u8 * content;    
     77              u8   expanid[EXTENDED_PAN_ID_SIZE];
     78          } formjion_t;
     79          
     80          static formjion_t formjion1 = { FORM_AND_JOIN_NOT_SCANNING, 0x00, 0x00, 0x00, 0x00, 0x00, };
     81          
     82          #define panIdCandidates ((int16u *)formjion1.content)
     83          #define channelEnergies (formjion1.content)
     84          
     85          #endif
     86          
     87          //////////////////////////////////////////////////////////////////////////////////////////
     88          // The dual channel code is only present on the EM250 and EM260.

   \                                 In section .data, align 1
     89          boolean emberEnableDualChannelScan = TRUE;
   \                     emberEnableDualChannelScan:
   \   00000000   0x01               DC8 1
     90          
     91          //////////////////////////////////////////////////////////////////////////////////////////
     92          // The minimum significant difference between energy scan results.
     93          // Results that differ by less than this are treated as identical.
     94          #define ENERGY_SCAN_FUZZ        (25)
     95          #define NUM_PAN_ID_CANDIDATES   (16)          // Must fit into one packet buffer on the node
     96          #define INVALID_PAN_ID          (0xFFFF)
     97          
     98          //////////////////////////////////////////////////////////////////////////////////////////
     99          // ZigBee specifies that active scans have a duration of 3 (138 msec).
    100          // See documentation for emberStartScan in include/network-formation.h
    101          // for more info on duration values.
    102          #define ACTIVE_SCAN_DURATION    (3)
    103          
    104          //////////////////////////////////////////////////////////////////////////////////////////
    105          // Forward declarations for the benefit of the compiler.
    106          static void saveNetwork    ( EmberZigbeeNetwork *network, int8u lqi, int8s rssi );
    107          static boolean setup       ( int8u scanType );
    108          static void startScan      ( EmberNetworkScanType type, int32u mask, int8u duration );
    109          static void startPanIdScan ( void );
    110          
    111          //////////////////////////////////////////////////////////////////////////////////////////
    112          // Finding unused PAN ids.

   \                                 In section .text, align 2, keep-with-next
    113          void emberScanForUnusedPanId ( int32u channelMask, int8u duration )
    114          {
   \                     emberScanForUnusedPanId: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    115              if (setup(FORM_AND_JOIN_ENERGY_SCAN)) 
   \   00000006   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   0000000A   0xB120             CBZ.N    R0,??emberScanForUnusedPanId_0
   \   0000000C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000010   0x203D             MOVS     R0,#+61
   \   00000012   0x.... 0x....      B.W      emberScanErrorHandler
   \                     ??emberScanForUnusedPanId_0: (+1)
   \   00000016   0x.... 0x....      BL       emberFormAndJoinCleanup
   \   0000001A   0x.... 0x....      LDR.W    R6,??DataTable17
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7330             STRB     R0,[R6, #+12]
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x7030             STRB     R0,[R6, #+0]
   \   00000026   0x.... 0x....      BL       formAndJoinAllocateBuffer
   \   0000002A   0x6270             STR      R0,[R6, #+36]
   \   0000002C   0xB918             CBNZ.N   R0,??emberScanForUnusedPanId_1
   \   0000002E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000032   0x2018             MOVS     R0,#+24
   \   00000034   0x....             B.N      emberFormAndJoinCleanup
    116              {
    117                  sea_memset(channelEnergies, 0xFF, EMBER_NUM_802_15_4_CHANNELS);
   \                     ??emberScanForUnusedPanId_1: (+1)
   \   00000036   0x2210             MOVS     R2,#+16
   \   00000038   0x21FF             MOVS     R1,#+255
   \   0000003A   0x.... 0x....      BL       sea_memset
    118                  startScan(EMBER_ENERGY_SCAN, channelMask, duration);
   \   0000003E   0x462A             MOV      R2,R5
   \   00000040   0x4621             MOV      R1,R4
   \   00000042   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             B.N      startScan
    119              }
    120          }
    121          
    122          //////////////////////////////////////////////////////////////////////////////////////////
    123          // Pick a channel from among those with the lowest energy and then look for
    124          // a PAN ID not in use on that channel.
    125          // 
    126          // The energy scans are not particularly accurate, especially as we don't run
    127          // them for very long, so we add in some slop to the measurements and then pick
    128          // a random channel from the least noisy ones.  This avoids having several
    129          // coordinators pick the same slightly quieter channel.

   \                                 In section .text, align 2, keep-with-next
    130          static void energyScanComplete ( void )
    131          {
   \                     energyScanComplete: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    132              int8u cutoff = 0xFF;
    133              int8u candidateCount = 0x00;
    134              int8u channelIndex;
    135              int8u i;
    136          
    137              for (i = 0x00; i < EMBER_NUM_802_15_4_CHANNELS; i ++) 
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17
   \   00000006   0x6A61             LDR      R1,[R4, #+36]
   \   00000008   0x25FF             MOVS     R5,#+255
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x2000             MOVS     R0,#+0
    138              {
    139                  if (channelEnergies[i] < cutoff - ENERGY_SCAN_FUZZ) 
   \                     ??energyScanComplete_0: (+1)
   \   0000000E   0x5C42             LDRB     R2,[R0, R1]
   \   00000010   0xF1A5 0x0319      SUB      R3,R5,#+25
   \   00000014   0x429A             CMP      R2,R3
   \   00000016   0xBFBC             ITT      LT 
   \   00000018   0xF102 0x0519      ADDLT    R5,R2,#+25
   \   0000001C   0xB2ED             UXTBLT   R5,R5
    140                  {
    141                      cutoff = channelEnergies[i] + ENERGY_SCAN_FUZZ;
    142                  }
    143              }
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x2810             CMP      R0,#+16
   \   00000022   0xDBF4             BLT.N    ??energyScanComplete_0
    144              for (i = 0x00; i < EMBER_NUM_802_15_4_CHANNELS; i ++)   // There must be at least one channel, so there will be at least one candidate.
   \   00000024   0x2000             MOVS     R0,#+0
    145              {
    146                  if (channelEnergies[i] < cutoff) 
   \                     ??energyScanComplete_1: (+1)
   \   00000026   0x5C42             LDRB     R2,[R0, R1]
   \   00000028   0x42AA             CMP      R2,R5
   \   0000002A   0xBFBC             ITT      LT 
   \   0000002C   0x1C76             ADDLT    R6,R6,#+1
   \   0000002E   0xB2F6             UXTBLT   R6,R6
    147                  {
    148                      candidateCount += 0x01;
    149                  }
    150              }
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x2810             CMP      R0,#+16
   \   00000034   0xDBF7             BLT.N    ??energyScanComplete_1
    151              channelIndex = halCommonGetRandom() % candidateCount;
   \   00000036   0x.... 0x....      BL       halCommonGetRandom
   \   0000003A   0xFB90 0xF1F6      SDIV     R1,R0,R6
   \   0000003E   0xFB06 0x0011      MLS      R0,R6,R1,R0
   \   00000042   0xB2C0             UXTB     R0,R0
    152          
    153              for (i = 0x00; i < EMBER_NUM_802_15_4_CHANNELS; i ++) 
   \   00000044   0x2100             MOVS     R1,#+0
    154              {
    155                  if (channelEnergies[i] < cutoff) 
   \                     ??energyScanComplete_2: (+1)
   \   00000046   0x6A62             LDR      R2,[R4, #+36]
   \   00000048   0x5C8A             LDRB     R2,[R1, R2]
   \   0000004A   0x42AA             CMP      R2,R5
   \   0000004C   0xDA07             BGE.N    ??energyScanComplete_3
    156                  {
    157                      if (channelIndex == 0x00) 
   \   0000004E   0x0002             MOVS     R2,R0
   \   00000050   0xD103             BNE.N    ??energyScanComplete_4
    158                      {
    159                          channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER + i;
   \   00000052   0xF101 0x000B      ADD      R0,R1,#+11
   \   00000056   0x72A0             STRB     R0,[R4, #+10]
    160                          break;
   \   00000058   0xE005             B.N      ??energyScanComplete_5
    161                      }
    162                      channelIndex -= 0x01;
   \                     ??energyScanComplete_4: (+1)
   \   0000005A   0x1E40             SUBS     R0,R0,#+1
   \   0000005C   0xB2C0             UXTB     R0,R0
    163                  }
    164              }
   \                     ??energyScanComplete_3: (+1)
   \   0000005E   0x1C49             ADDS     R1,R1,#+1
   \   00000060   0xB2C9             UXTB     R1,R1
   \   00000062   0x2910             CMP      R1,#+16
   \   00000064   0xDBEF             BLT.N    ??energyScanComplete_2
    165              startPanIdScan();
   \                     ??energyScanComplete_5: (+1)
   \   00000066   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006A                      REQUIRE startPanIdScan
   \   0000006A                      ;; // Fall through to label startPanIdScan
    166          }
    167          
    168          #if 0
    169          //////////////////////////////////////////////////////////////////////////////////////////
    170          //
    171          static boolean expanisnull ( int8u * array, int8u size )
    172          {
    173              for (int8u i = 0x00; i < size; i ++) 
    174                  if (array[i] != 0x00) 
    175                      return FALSE;
    176              return TRUE;
    177          }
    178          #endif
    179          
    180          //////////////////////////////////////////////////////////////////////////////////////////
    181          // PAN IDs can be 0..0xFFFE.  We pick some trial candidates and then do a scan
    182          // to find one that is not in use.

   \                                 In section .text, align 2, keep-with-next
    183          static void startPanIdScan ( void )
    184          {
   \                     startPanIdScan: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    185              int8u i;
    186          
    187              for (i = 0x00; i < NUM_PAN_ID_CANDIDATES;) 
   \   00000002   0x2400             MOVS     R4,#+0
    188              {
    189                  int16u panId = halCommonGetRandom() & 0xFFFF;
   \                     ??startPanIdScan_0: (+1)
   \   00000004   0x.... 0x....      BL       halCommonGetRandom
    190                  if (panId != 0xFFFF) 
   \   00000008   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000000C   0x4290             CMP      R0,R2
   \   0000000E   0x....             LDR.N    R1,??DataTable17
   \   00000010   0xD003             BEQ.N    ??startPanIdScan_1
    191                  {
    192                      panIdCandidates[i] = panId;
   \   00000012   0x6A4A             LDR      R2,[R1, #+36]
   \   00000014   0xF822 0x0014      STRH     R0,[R2, R4, LSL #+1]
    193                      i++;
   \   00000018   0x1C64             ADDS     R4,R4,#+1
    194                  }
    195              }
   \                     ??startPanIdScan_1: (+1)
   \   0000001A   0x2C10             CMP      R4,#+16
   \   0000001C   0xDBF2             BLT.N    ??startPanIdScan_0
    196              formAndJoinScanType = FORM_AND_JOIN_PAN_ID_SCAN;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    197              startScan(EMBER_ACTIVE_SCAN, BIT32(channelCache), ACTIVE_SCAN_DURATION);
   \   00000022   0x7A89             LDRB     R1,[R1, #+10]
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x2203             MOVS     R2,#+3
   \   0000002C   0xFA00 0xF101      LSL      R1,R0,R1
   \   00000030   0x....             B.N      startScan
    198          }
    199          
    200          //////////////////////////////////////////////////////////////////////////////////////////
    201          // Form a network using one of the unused PAN IDs.  If we got unlucky we
    202          // pick some more and try again.
    203          static void panIdScanComplete ( void )
    204          {
    205              int8u i;
    206          
    207              for (i = 0x00; i < NUM_PAN_ID_CANDIDATES; i ++) 
    208              {
    209                  EmberStatus status = EMBER_SUCCESS;
    210                  if (panIdCandidates[i] != 0xFFFF) 
    211                  {
    212                      emberUnusedPanIdFoundHandler(panIdCandidates[i], channelCache);
    213                      emberFormAndJoinCleanup(status);
    214                      return;
    215                  }
    216              }
    217              startPanIdScan();     // Start over with new candidates.
    218          }
    219          

   \                                 In section .text, align 2, keep-with-next
    220          boolean isScanRunning(void)
    221          {
   \                     isScanRunning: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x2801             CMPNE    R0,#+1
   \   0000000A   0xD101             BNE.N    ??isScanRunning_0
    222              if(scanStatus==SCAN_START||scanStatus==SCAN_DUAL)
    223                  return TRUE;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x4770             BX       LR
    224              else
    225                  return FALSE;
   \                     ??isScanRunning_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
    226          }
    227          

   \                                 In section .text, align 2, keep-with-next
    228          boolean isScanComplete(void)
    229          {
    230              if(scanStatus==SCAN_COMPLETE)
   \                     isScanComplete: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x2802             CMP      R0,#+2
   \   00000006   0xD101             BNE.N    ??isScanComplete_0
    231                  return TRUE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
    232              else
    233                  return FALSE;
   \                     ??isScanComplete_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void scanPrintStatus( void )
    237          {
    238              switch(scanStatus)
    239              {
    240                  case SCAN_START:
    241                    Debug("[status]SCAN_START");
    242                    break;
    243                  case SCAN_DUAL:
    244                    Debug("[status]SCAN_DUAL");
    245                    break;
    246                  case SCAN_COMPLETE:
    247                    Debug("[status]SCAN_COMPLETE");
    248                    break;
    249                  case SCAN_LEISURE:
    250                    Debug("[status]SCAN_LEISURE");
    251                    break;
    252                  default:
    253                    Debug("[status]unknow status");
    254                    break;
    255              }
    256          }
   \                     scanPrintStatus: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    257          

   \                                 In section .text, align 2, keep-with-next
    258          int8u readArray( void )
    259          {
   \                     readArray: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    260              int8u temp;
    261              if( channelIn == channelOut )
   \   00000002   0x....             LDR.N    R1,??DataTable17
   \   00000004   0x79CA             LDRB     R2,[R1, #+7]
   \   00000006   0x7A08             LDRB     R0,[R1, #+8]
   \   00000008   0x4290             CMP      R0,R2
   \   0000000A   0xD103             BNE.N    ??readArray_0
    262              {
    263                  readError = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x7248             STRB     R0,[R1, #+9]
    264                  return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD10             POP      {R4,PC}
    265              }
    266              else
    267              {
    268                  temp = scanChannel[channelOut];
   \                     ??readArray_0: (+1)
   \   00000014   0x1850             ADDS     R0,R2,R1
    269                  channelOut ++;
    270                  channelOut %= 18;
   \   00000016   0x1C52             ADDS     R2,R2,#+1
   \   00000018   0xB2D2             UXTB     R2,R2
   \   0000001A   0x2312             MOVS     R3,#+18
   \   0000001C   0x7C00             LDRB     R0,[R0, #+16]
   \   0000001E   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000022   0x2412             MOVS     R4,#+18
   \   00000024   0xFB04 0x2213      MLS      R2,R4,R3,R2
   \   00000028   0x71CA             STRB     R2,[R1, #+7]
    271                  return temp;
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    272              }
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          void writeArray( int8u temp )
    276          {
    277              scanChannel[channelIn] = temp;
   \                     writeArray: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable17
   \   00000002   0x7A0A             LDRB     R2,[R1, #+8]
   \   00000004   0x1853             ADDS     R3,R2,R1
   \   00000006   0x7418             STRB     R0,[R3, #+16]
    278              channelIn ++;
    279              channelIn %= 18;
   \   00000008   0x1C50             ADDS     R0,R2,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x2212             MOVS     R2,#+18
   \   0000000E   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   00000012   0x2312             MOVS     R3,#+18
   \   00000014   0xFB03 0x0012      MLS      R0,R3,R2,R0
   \   00000018   0x7208             STRB     R0,[R1, #+8]
    280          }
   \   0000001A   0x4770             BX       LR               ;; return
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void scanErrorHandler( void )
    283          {
    284              scanSingnal = 1;
   \                     scanErrorHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x7181             STRB     R1,[R0, #+6]
    285              writeArray( currentChannel );
   \   00000006   0x7900             LDRB     R0,[R0, #+4]
   \   00000008   0x....             B.N      writeArray
    286          }
    287          

   \                                 In section .text, align 2, keep-with-next
    288          void scanInitial( void )
    289          {
   \                     scanInitial: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    290              int8u i;
    291              scanOpenTimeOutEvent();             
   \   00000002   0x.... 0x....      BL       scanOpenTimeOutEvent
    292              Debug("\r\n[scan]scan Initial");
    293              
    294              for(i = 0;i < 16;i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R4,??DataTable17
    295              {
    296                  scanChannel[i] = i + 11;
   \                     ??scanInitial_0: (+1)
   \   0000000A   0x1902             ADDS     R2,R0,R4
   \   0000000C   0xF100 0x010B      ADD      R1,R0,#+11
    297              }
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x2810             CMP      R0,#+16
   \   00000014   0x7411             STRB     R1,[R2, #+16]
   \   00000016   0xDBF8             BLT.N    ??scanInitial_0
    298              channelOut = 0;
    299              channelIn = 16;
    300              readError = 0;
    301              
    302              scanFail = 0;   
    303              scanWait = 0;
    304              
    305              networkCount = 0;
    306              
    307              currentChannel = 0;
    308              lastChannel = 0;
    309              
    310              formAndJoinScanType = FORM_AND_JOIN_JOINABLE_SCAN;
    311              
    312              scanStatus = SCAN_DUAL;
    313              
    314              scanSingnal = 1;        // 1 scan avail
    315              
    316              sea_memcpy(extendedPanIdCache, DEF_EXPAN, EXTENDED_PAN_ID_SIZE);
   \   00000018   0x.... 0x....      ADR.W    R1,?_0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x71E0             STRB     R0,[R4, #+7]
   \   00000020   0x2208             MOVS     R2,#+8
   \   00000022   0x2010             MOVS     R0,#+16
   \   00000024   0x7220             STRB     R0,[R4, #+8]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7260             STRB     R0,[R4, #+9]
   \   0000002A   0x70A0             STRB     R0,[R4, #+2]
   \   0000002C   0x70E0             STRB     R0,[R4, #+3]
   \   0000002E   0x7320             STRB     R0,[R4, #+12]
   \   00000030   0x7120             STRB     R0,[R4, #+4]
   \   00000032   0x7160             STRB     R0,[R4, #+5]
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x7020             STRB     R0,[R4, #+0]
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x7060             STRB     R0,[R4, #+1]
   \   0000003C   0x71A0             STRB     R0,[R4, #+6]
   \   0000003E   0xF104 0x0028      ADD      R0,R4,#+40
   \   00000042   0x.... 0x....      BL       sea_memcpy
    317                                             
    318              ignoreExtendedPanId = 1;  //!!
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x72E0             STRB     R0,[R4, #+11]
    319              
    320              emberScanForNextJoinableNetwork();
   \   0000004A                      REQUIRE ?Subroutine0
   \   0000004A                      ;; // Fall through to label ?Subroutine0
    321          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      emberScanForNextJoinableNetwork
    322          

   \                                 In section .text, align 2, keep-with-next
    323          void scanDual( void )
    324          {
   \                     scanDual: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    325              if( readError == 1 )
   \   00000002   0x....             LDR.N    R4,??DataTable17
   \   00000004   0x7A60             LDRB     R0,[R4, #+9]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD105             BNE.N    ??scanDual_0
    326              {
    327                  scanStatus = SCAN_COMPLETE;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x7060             STRB     R0,[R4, #+1]
    328                  scanCloseTimeOutEvent();
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      scanCloseTimeOutEvent
    329                  return;
    330              }
    331              
    332              if( scanFail >= 3 )    
   \                     ??scanDual_0: (+1)
   \   00000016   0x78A0             LDRB     R0,[R4, #+2]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xBFA8             IT       GE 
    333              {
    334                  halReboot();
   \   0000001C   0x.... 0x....      BLGE     halReboot
    335              }
    336              
    337              Debug("\r\n[scan]currentChannel =%d, lastChannel =%d",currentChannel,lastChannel);
    338              if( lastChannel == currentChannel )
   \   00000020   0x7920             LDRB     R0,[R4, #+4]
   \   00000022   0x7961             LDRB     R1,[R4, #+5]
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xBF07             ITTEE    EQ 
   \   00000028   0x78E0             LDRBEQ   R0,[R4, #+3]
   \   0000002A   0x1C40             ADDEQ    R0,R0,#+1
   \   0000002C   0x7160             STRBNE   R0,[R4, #+5]
   \   0000002E   0x2000             MOVNE    R0,#+0
    339              { 
    340                  
    341                  scanWait ++;
    342                  Debug("\r\n[scan]scan error,times = %d",scanWait);
    343              }
    344              else
    345              {
    346                  lastChannel = currentChannel;
    347                  scanWait = 0;
   \   00000030   0x70E0             STRB     R0,[R4, #+3]
    348              }
    349              
    350              if( scanWait >= 2 )   
   \   00000032   0x78E0             LDRB     R0,[R4, #+3]
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xDB07             BLT.N    ??scanDual_1
    351              {
    352                  scanWait = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x70E0             STRB     R0,[R4, #+3]
    353                  scanFail++;
   \   0000003C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x70A0             STRB     R0,[R4, #+2]
    354                  Debug("[scan]goto scan continue");
    355                  scanErrorHandler();
   \   00000042   0x.... 0x....      BL       scanErrorHandler
    356                  emberScanForNextJoinableNetwork();
   \   00000046   0x....             B.N      ?Subroutine0
    357              } 
    358          }
   \                     ??scanDual_1: (+1)
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    359          

   \                                 In section .text, align 2, keep-with-next
    360          void scanSet( void )
    361          {
    362              if( scanStatus == SCAN_COMPLETE || scanStatus == SCAN_LEISURE )
   \                     scanSet: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7841             LDRB     R1,[R0, #+1]
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0xBF12             ITEE     NE 
   \   00000008   0x2903             CMPNE    R1,#+3
   \   0000000A   0x2100             MOVEQ    R1,#+0
   \   0000000C   0x7041             STRBEQ   R1,[R0, #+1]
    363              {
    364                  scanStatus = SCAN_START;
    365              }
    366              else
    367              {
    368                  Debug("\r\n[scan]scan is running, could not start");
    369              }
    370          }
   \   0000000E   0x4770             BX       LR               ;; return
    371          

   \                                 In section .text, align 2, keep-with-next
    372          int8u scaningStatus( void )
    373          {
    374              return scanStatus;
   \                     scaningStatus: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x4770             BX       LR               ;; return
    375          }
    376          
    377          //////////////////////////////////////////////////////////////////////////////////////////
    378          // Finding joinable networks

   \                                 In section .text, align 2, keep-with-next
    379          void emberScanForJoinableNetwork ( int32u channelMask, int8u* extendedPanId )
    380          {
    381              switch (scanStatus) 
   \                     emberScanForJoinableNetwork: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0xB110             CBZ.N    R0,??emberScanForJoinableNetwork_0
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD001             BEQ.N    ??emberScanForJoinableNetwork_1
   \   0000000A   0x4770             BX       LR
    382              {
    383                  case SCAN_START:
    384                    Debug("\r\n[scan]goto scan_start");
    385                    scanInitial();
   \                     ??emberScanForJoinableNetwork_0: (+1)
   \   0000000C   0x....             B.N      scanInitial
    386                    break;
    387                    
    388                  case SCAN_DUAL:
    389                    Debug("\r\n[scan]goto scan_dual");
    390                    scanDual();
   \                     ??emberScanForJoinableNetwork_1: (+1)
   \   0000000E   0x....             B.N      scanDual
    391                    break;
    392                    
    393                  case SCAN_COMPLETE:
    394                    break;
    395                    
    396                  case SCAN_LEISURE:
    397                    break;
    398                    
    399                  default:
    400                    break;
    401              }
    402              /*
    403              Debug("\r\nemberScanForJoinableNetwork START!!");
    404              if (!setup(FORM_AND_JOIN_NEXT_NETWORK)) 
    405                  return;
    406              Debug("\r\n emberScanForJoinableNetwork END!!");
    407              channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER - 0x01;  // Init the channel to 10, gets incremented in call to next joinable network.
    408              channelMaskCache = channelMask;
    409              if (extendedPanId == NULL || expanisnull(extendedPanId, EXTENDED_PAN_ID_SIZE)) 
    410                  ignoreExtendedPanId = TRUE;
    411              else 
    412              {
    413                  ignoreExtendedPanId = FALSE;
    414                  sea_memcpy(extendedPanIdCache, extendedPanId, EXTENDED_PAN_ID_SIZE);
    415              }
    416              emberScanForNextJoinableNetwork();*/
    417          }
    418          
    419          
    420          //////////////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    421          void emberScanForNextJoinableNetwork ( void )
    422          {
   \                     emberScanForNextJoinableNetwork: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    423            /*Debug("\r\nemberScanForNextJoinableNetwork START!!  formAndJoinScanType = %d", formAndJoinScanType);
    424              if (formAndJoinScanType != FORM_AND_JOIN_NEXT_NETWORK) 
    425              {
    426                  emberScanErrorHandler(EMBER_INVALID_CALL);
    427                  return;
    428              }
    429              while (networkCount && (channelCache == EMBER_MAX_802_15_4_CHANNEL_NUMBER))     
    430              {
    431                  NetworkInfo *finger = formAndJoinGetNetworkPointer(0);  
    432                  if (finger->network.panId != 0xFFFF) 
    433                  {
    434                      formAndJoinSetBufferLength(0);
    435                      formAndJoinSetCleanupTimeout();
    436                      return;
    437                  }
    438                  formAndJoinSetBufferLength(0);
    439              }
    440              channelCache += 0x01;  // Find the next channel in the mask and start scanning.
    441              for (; channelCache <= EMBER_MAX_802_15_4_CHANNEL_NUMBER; channelCache ++) 
    442              {
    443                  int32u bitMask = BIT32(channelCache);
    444                  if (bitMask & channelMaskCache) 
    445                  {
    446                           
    447                      if(lastChannelCache == channelCache)
    448                      {
    449                          network_info.scanError++;
    450                      }
    451                      else
    452                      {
    453                          network_info.scanError = 0;
    454                      }
    455                      lastChannelCache = channelCache;
    456                      formAndJoinScanType = FORM_AND_JOIN_JOINABLE_SCAN;
    457          
    458                      Debug("\r\n[scan]: start channelCache %d ...", channelCache);
    459                      startScan(EMBER_ACTIVE_SCAN, bitMask, ACTIVE_SCAN_DURATION);
    460                      Debug("completed!\n");
    461                      return;
    462                  }
    463              }
    464              emberFormAndJoinCleanup(EMBER_NO_BEACONS);  */
    465              int8u scanEnable = 0;
    466              ATOMIC(
    467                  if( scanSingnal == 1 )
    468                  {
    469                      scanSingnal = 0;
    470                      scanEnable = 1;
    471                  }
    472              )
   \   00000002   0x.... 0x....      BL       _disableBasePri
   \   00000006   0x....             LDR.N    R5,??DataTable17
   \   00000008   0x79A9             LDRB     R1,[R5, #+6]
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xBF04             ITT      EQ 
   \   00000010   0x71AC             STRBEQ   R4,[R5, #+6]
   \   00000012   0x2401             MOVEQ    R4,#+1
   \   00000014   0x.... 0x....      BL       _writeBasePri
    473              
    474              if( scanEnable == 1 )
   \   00000018   0xB16C             CBZ.N    R4,??emberScanForNextJoinableNetwork_0
    475              {
    476                  Debug("\r\n[scan]scan TRUE,scan");
    477                  scanEnable = 0;
    478              }
    479              else
    480              {
    481                  Debug("\r\n[scan]scan FALSE,return");
    482                  return;
    483              }
    484          
    485                
    486              currentChannel = readArray();
   \   0000001A   0x.... 0x....      BL       readArray
    487              
    488              if( currentChannel < 11 ||currentChannel > 26 )
   \   0000001E   0xF1A0 0x010B      SUB      R1,R0,#+11
   \   00000022   0x2910             CMP      R1,#+16
   \   00000024   0x7128             STRB     R0,[R5, #+4]
   \   00000026   0xD206             BCS.N    ??emberScanForNextJoinableNetwork_0
    489              {
    490                  return;
    491              }
    492              
    493              Debug("\r\n[scan]startScan channel =%d",currentChannel);
    494              startScan(EMBER_ACTIVE_SCAN, BIT32(currentChannel), ACTIVE_SCAN_DURATION);
   \   00000028   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x4081             LSLS     R1,R1,R0
   \   00000030   0x2203             MOVS     R2,#+3
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x....             B.N      startScan
   \                     ??emberScanForNextJoinableNetwork_0: (+1)
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    495          }
    496          
    497          //////////////////////////////////////////////////////////////////////////////////////////
    498          // Callbacks

   \                                 In section .text, align 2, keep-with-next
    499          boolean emberFormAndJoinScanCompleteHandler ( int8u channel, EmberStatus status )
    500          { 
   \                     emberFormAndJoinScanCompleteHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    501              Debug("\r\n[scan]CompleteHandler");
    502              if (status != EMBER_SUCCESS) 
   \   00000002   0xB109             CBZ.N    R1,??emberFormAndJoinScanCompleteHandler_0
    503              {
    504                  emberFormAndJoinCleanup(status);
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xE02B             B.N      ??emberFormAndJoinScanCompleteHandler_1
    505                  return TRUE;
    506              }
    507              
    508              int8u completeTrue = 0;
    509              
    510              ATOMIC(
    511                  if( scanSingnal == 0 )
    512                  {
    513                      scanSingnal = 1;
    514                      completeTrue = 1;
    515                  }
    516              )
   \                     ??emberFormAndJoinScanCompleteHandler_0: (+1)
   \   00000008   0x.... 0x....      BL       _disableBasePri
   \   0000000C   0x....             LDR.N    R4,??DataTable17
   \   0000000E   0x79A1             LDRB     R1,[R4, #+6]
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xB911             CBNZ.N   R1,??emberFormAndJoinScanCompleteHandler_2
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x71A1             STRB     R1,[R4, #+6]
   \   00000018   0x2501             MOVS     R5,#+1
   \                     ??emberFormAndJoinScanCompleteHandler_2: (+1)
   \   0000001A   0x.... 0x....      BL       _writeBasePri
    517                
    518              if(completeTrue == 1)
   \   0000001E   0xB155             CBZ.N    R5,??emberFormAndJoinScanCompleteHandler_3
    519              {
    520                  completeTrue = 0;
    521                  Debug("\r\n[scan]complete TRUE,continue");
    522              }
    523              else
    524              {
    525                  Debug("\r\n[scan]complete FALSE,return");
    526                  return FALSE;
    527              }
    528                
    529              switch (formAndJoinScanType) 
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD004             BEQ.N    ??emberFormAndJoinScanCompleteHandler_4
   \   00000026   0xD320             BCC.N    ??emberFormAndJoinScanCompleteHandler_5
   \   00000028   0x2804             CMP      R0,#+4
   \   0000002A   0xD01C             BEQ.N    ??emberFormAndJoinScanCompleteHandler_6
   \   0000002C   0xD305             BCC.N    ??emberFormAndJoinScanCompleteHandler_7
   \   0000002E   0xE01C             B.N      ??emberFormAndJoinScanCompleteHandler_5
    530              {
    531                  case FORM_AND_JOIN_ENERGY_SCAN:    
    532                      energyScanComplete();    
   \                     ??emberFormAndJoinScanCompleteHandler_4: (+1)
   \   00000030   0x.... 0x....      BL       energyScanComplete
    533                      break;
   \   00000034   0xE019             B.N      ??emberFormAndJoinScanCompleteHandler_5
   \                     ??emberFormAndJoinScanCompleteHandler_3: (+1)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}
    534                  case FORM_AND_JOIN_PAN_ID_SCAN:    
    535                      panIdScanComplete();     
   \                     ??emberFormAndJoinScanCompleteHandler_7: (+1)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF64F 0x72FF      MOVW     R2,#+65535
   \                     ??emberFormAndJoinScanCompleteHandler_8: (+1)
   \   00000040   0x6A60             LDR      R0,[R4, #+36]
   \   00000042   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   00000046   0x4290             CMP      R0,R2
   \   00000048   0xD106             BNE.N    ??emberFormAndJoinScanCompleteHandler_9
   \   0000004A   0x1C49             ADDS     R1,R1,#+1
   \   0000004C   0xB2C9             UXTB     R1,R1
   \   0000004E   0x2910             CMP      R1,#+16
   \   00000050   0xDBF6             BLT.N    ??emberFormAndJoinScanCompleteHandler_8
   \   00000052   0x.... 0x....      BL       startPanIdScan
   \   00000056   0xE008             B.N      ??emberFormAndJoinScanCompleteHandler_5
   \                     ??emberFormAndJoinScanCompleteHandler_9: (+1)
   \   00000058   0x7AA1             LDRB     R1,[R4, #+10]
   \   0000005A   0x.... 0x....      BL       emberUnusedPanIdFoundHandler
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??emberFormAndJoinScanCompleteHandler_1: (+1)
   \   00000060   0x.... 0x....      BL       emberFormAndJoinCleanup
   \   00000064   0xE001             B.N      ??emberFormAndJoinScanCompleteHandler_5
    536                      break;
    537                  case FORM_AND_JOIN_JOINABLE_SCAN: 
    538          /*#if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    539                      if (emberEnableDualChannelScan && (channelCache < 15 || channelCache > 22) && networkCount) 
    540                      {
    541                          int8u dualChannel = (channelCache + (channelCache < 15 ? 12 : -12));
    542                          formAndJoinScanType = FORM_AND_JOIN_DUAL_CHANNEL_SCAN;
    543                          startScan(EMBER_ACTIVE_SCAN, BIT32(dualChannel), ACTIVE_SCAN_DURATION);
    544                          break;
    545                      }
    546          #endif      // If no dual scan, fall through to save a little flash.
    547                  case FORM_AND_JOIN_DUAL_CHANNEL_SCAN:   */
    548                      //formAndJoinScanType = FORM_AND_JOIN_NEXT_NETWORK;
    549                      emberScanForNextJoinableNetwork(); 
   \                     ??emberFormAndJoinScanCompleteHandler_6: (+1)
   \   00000066   0x.... 0x....      BL       emberScanForNextJoinableNetwork
    550                      break;
    551              }
    552              return TRUE;
   \                     ??emberFormAndJoinScanCompleteHandler_5: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    553          }
    554          
    555          //////////////////////////////////////////////////////////////////////////////////////////
    556          // We are either looking for PAN IDs or for joinable networks.  In the first
    557          // case we just check the found PAN ID against our list of candidates. 

   \                                 In section .text, align 2, keep-with-next
    558          boolean emberFormAndJoinNetworkFoundHandler ( EmberZigbeeNetwork *networkFound, int8u lqi, int8s rssi )
    559          {
   \                     emberFormAndJoinNetworkFoundHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    560              int8u i;
    561            
    562              Debug("\r\nNetworkFoundHandler ");
    563              switch (formAndJoinScanType) 
   \   00000002   0x....             LDR.N    R5,??DataTable17
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0x460E             MOV      R6,R1
   \   0000000C   0x4617             MOV      R7,R2
   \   0000000E   0xD002             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_0
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD00F             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_1
   \   00000014   0xE030             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    564              {
    565                  case FORM_AND_JOIN_PAN_ID_SCAN:
    566                      for (i = 0x00; i < NUM_PAN_ID_CANDIDATES; i ++)
   \                     ??emberFormAndJoinNetworkFoundHandler_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
    567                          if (panIdCandidates[i] == networkFound->panId)
   \                     ??emberFormAndJoinNetworkFoundHandler_3: (+1)
   \   00000018   0x6A69             LDR      R1,[R5, #+36]
   \   0000001A   0x8863             LDRH     R3,[R4, #+2]
   \   0000001C   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   00000020   0x429A             CMP      R2,R3
   \   00000022   0xBF04             ITT      EQ 
   \   00000024   0xF64F 0x72FF      MOVWEQ   R2,#+65535
   \   00000028   0xF821 0x2010      STRHEQ   R2,[R1, R0, LSL #+1]
    568                      panIdCandidates[i] = 0xFFFF;
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x2810             CMP      R0,#+16
   \   00000030   0xDBF2             BLT.N    ??emberFormAndJoinNetworkFoundHandler_3
   \   00000032   0xE021             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    569                      break;
    570              
    571                  case FORM_AND_JOIN_JOINABLE_SCAN:    // check for a beacon with permit join on...the same stack profile as this application...
    572                  {                                    // ...a matching Extended PAN ID...and ignore the Extended PAN ID, or...
    573                      u8 status, index;
    574                      
    575                      status = formAndJoinStackProfile();
   \                     ??emberFormAndJoinNetworkFoundHandler_1: (+1)
   \   00000034   0x.... 0x....      BL       formAndJoinStackProfile
    576                      Debug("\r\nfound network allowingJoin %02x, stackProfile %02x, formAndJoinStackProfile %02x", 
    577                                 networkFound->allowingJoin, networkFound->stackProfile, status);
    578                       //if (networkFound->allowingJoin && networkFound->stackProfile == formAndJoinStackProfile()
    579                       //   && (ignoreExtendedPanId || (MEMCOMPARE(extendedPanIdCache, networkFound->extendedPanId, EXTENDED_PAN_ID_SIZE) == 0x00))) 
    580                        if (networkFound->stackProfile == status && (ignoreExtendedPanId || 
    581                           (sea_memcomp(extendedPanIdCache, networkFound->extendedPanId, EXTENDED_PAN_ID_SIZE) == 0x00))) 
   \   00000038   0x7B61             LDRB     R1,[R4, #+13]
   \   0000003A   0x4281             CMP      R1,R0
   \   0000003C   0xD11C             BNE.N    ??emberFormAndJoinNetworkFoundHandler_2
   \   0000003E   0x7AE8             LDRB     R0,[R5, #+11]
   \   00000040   0xB930             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_4
   \   00000042   0x2208             MOVS     R2,#+8
   \   00000044   0x1D21             ADDS     R1,R4,#+4
   \   00000046   0xF105 0x0028      ADD      R0,R5,#+40
   \   0000004A   0x.... 0x....      BL       sea_memcomp
   \   0000004E   0xB998             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_2
    582                      {
    583                          index = sea_findchannelindex(networkFound->channel, networkFound->panId);
   \                     ??emberFormAndJoinNetworkFoundHandler_4: (+1)
   \   00000050   0x8861             LDRH     R1,[R4, #+2]
   \   00000052   0x7820             LDRB     R0,[R4, #+0]
   \   00000054   0x.... 0x....      BL       sea_findchannelindex
    584                          if (index < MAXCHANNEL)
   \   00000058   0x2810             CMP      R0,#+16
   \   0000005A   0xDA0D             BGE.N    ??emberFormAndJoinNetworkFoundHandler_2
    585                          {
    586                              Debug("\r\n[SCAN]: nwk found ch %d, panid %04x, lqi %d, rssi %d, xpan %s", 
    587                                         networkFound->channel, networkFound->panId, lqi, rssi, networkFound->extendedPanId);
    588                              if (sys_info.channel.mask & (0x01 << index) && networkFound->channel != 26)
   \   0000005C   0x....             LDR.N    R1,??DataTable17_1
   \   0000005E   0x6C49             LDR      R1,[R1, #+68]
   \   00000060   0xFA21 0xF200      LSR      R2,R1,R0
   \   00000064   0x07D0             LSLS     R0,R2,#+31
   \   00000066   0xD507             BPL.N    ??emberFormAndJoinNetworkFoundHandler_2
   \   00000068   0x7820             LDRB     R0,[R4, #+0]
   \   0000006A   0x281A             CMP      R0,#+26
   \   0000006C   0xD004             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_2
    589                              {
    590                                  Debug("\r\n[SCAN]: save this channel %d network information", networkFound->channel); 
    591                                  saveNetwork(networkFound, lqi, rssi);
   \   0000006E   0x463A             MOV      R2,R7
   \   00000070   0x4631             MOV      R1,R6
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       saveNetwork
    592                              }
    593                          }
    594                          else
    595                              Debug("\r\n[SCAN]: can't find channel index %d", index);
    596                      } 
    597                      break;
    598                  }
    599          #if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    600                  case FORM_AND_JOIN_DUAL_CHANNEL_SCAN: 
    601                  {
    602                      NetworkInfo *finger;
    603                      for (i = 0x00; i < networkCount; i ++) 
    604                      {
    605                          finger = formAndJoinGetNetworkPointer(i);
    606                          if (MEMCOMPARE(finger->network.extendedPanId, networkFound->extendedPanId, EXTENDED_PAN_ID_SIZE) == 0x00) 
    607                          {
    608                              if (lqi > finger->lqi) 
    609                              {
    610                                  finger->network.panId = 0xFFFF;  // Invalid network;
    611                              }
    612                          }
    613                      }
    614                      break;
    615                  }
    616          #endif
    617              }
    618              return emberFormAndJoinIsScanning();
   \                     ??emberFormAndJoinNetworkFoundHandler_2: (+1)
   \   00000078   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   0000007C   0x....             B.N      emberFormAndJoinIsScanning
    619          }
    620          
    621          //////////////////////////////////////////////////////////////////////////////////////////
    622          // Just remember the result.

   \                                 In section .text, align 2, keep-with-next
    623          boolean emberFormAndJoinEnergyScanResultHandler ( int8u channel, int8s maxRssiValue )
    624          {
   \                     emberFormAndJoinEnergyScanResultHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    625              Debug("\r\nemberFormAndJoinEnergyScanResultHandler RUN!!");
    626              if (emberFormAndJoinIsScanning()) 
   \   00000006   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   0000000A   0xB128             CBZ.N    R0,??emberFormAndJoinEnergyScanResultHandler_0
    627              {
    628                  Debug("\r\n[scan]: found energy %d dBm on channel 0x%2x", (s16)maxRssiValue, (u16)channel);
    629                  channelEnergies[channel - EMBER_MIN_802_15_4_CHANNEL_NUMBER] = maxRssiValue;
   \   0000000C   0x....             LDR.N    R0,??DataTable17
   \   0000000E   0x6A40             LDR      R0,[R0, #+36]
   \   00000010   0x1820             ADDS     R0,R4,R0
   \   00000012   0xF800 0x5C0B      STRB     R5,[R0, #-11]
    630                  return TRUE;
   \   00000016   0x2001             MOVS     R0,#+1
    631              }
    632              return FALSE;
   \                     ??emberFormAndJoinEnergyScanResultHandler_0: (+1)
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    633          }
    634          
    635          //////////////////////////////////////////////////////////////////////////////////////////
    636          // Helper functions

   \                                 In section .text, align 2, keep-with-next
    637          static void saveNetwork ( EmberZigbeeNetwork *network, int8u lqi, int8s rssi )
    638          {
   \                     saveNetwork: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    639              int8u i;
    640              //NetworkInfo *finger;
    641              
    642              Debug("\r\nsaveNetwork RUN!!");
    643              for (i = 0x00; i < networkCount; i ++)   // See if we already have that network.
   \   00000004   0x....             LDR.N    R3,??DataTable17
   \   00000006   0x7B1C             LDRB     R4,[R3, #+12]
   \   00000008   0xF890 0x9000      LDRB     R9,[R0, #+0]
   \   0000000C   0x.... 0x....      LDR.W    LR,??DataTable17_2
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0x4626             MOV      R6,R4
   \   00000014   0xF04F 0x0C06      MOV      R12,#+6
   \   00000018   0xE001             B.N      ??saveNetwork_0
   \                     ??saveNetwork_1: (+1)
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0xB2ED             UXTB     R5,R5
   \                     ??saveNetwork_0: (+1)
   \   0000001E   0x42B5             CMP      R5,R6
   \   00000020   0xDA0B             BGE.N    ??saveNetwork_2
    644              {
    645                  //finger = formAndJoinGetNetworkPointer(i);
    646                  
    647                  if ((int8u)(networkInfo2[i].channel)==(int8u)(network->channel)
    648                      &&(int16u)(networkInfo2[i].panid)==(int16u)(network->panId)) 
   \   00000022   0xFB0C 0xE805      MLA      R8,R12,R5,LR
   \   00000026   0xF898 0x7003      LDRB     R7,[R8, #+3]
   \   0000002A   0x454F             CMP      R7,R9
   \   0000002C   0xBF02             ITTT     EQ 
   \   0000002E   0xF8B8 0x8004      LDRHEQ   R8,[R8, #+4]
   \   00000032   0x8847             LDRHEQ   R7,[R0, #+2]
   \   00000034   0x45B8             CMPEQ    R8,R7
   \   00000036   0xD1F0             BNE.N    ??saveNetwork_1
    649                      return;
   \   00000038   0xE01C             B.N      ??saveNetwork_3
    650              }
    651            
    652              //if (formAndJoinSetBufferLength(networkCount + 0x01) != EMBER_SUCCESS) 
    653              //    return;
    654             
    655              for (i = 0x00; i < 16; i++)
   \                     ??saveNetwork_2: (+1)
   \   0000003A   0x2500             MOVS     R5,#+0
   \   0000003C   0x.... 0x....      LDR.W    R8,??DataTable17_3
    656              {
    657                  if(network->channel == panid_info[i].channel&&network->panId == panid_info[i].panid)
   \                     ??saveNetwork_4: (+1)
   \   00000040   0xF818 0x7025      LDRB     R7,[R8, R5, LSL #+2]
   \   00000044   0x45B9             CMP      R9,R7
   \   00000046   0xBF01             ITTTT    EQ 
   \   00000048   0x8847             LDRHEQ   R7,[R0, #+2]
   \   0000004A   0xEB08 0x0A85      ADDEQ    R10,R8,R5, LSL #+2
   \   0000004E   0xF8BA 0xA002      LDRHEQ   R10,[R10, #+2]
   \   00000052   0x4557             CMPEQ    R7,R10
   \   00000054   0xD003             BEQ.N    ??saveNetwork_5
    658                    break;
    659              }
   \   00000056   0x1C6D             ADDS     R5,R5,#+1
   \   00000058   0xB2ED             UXTB     R5,R5
   \   0000005A   0x2D10             CMP      R5,#+16
   \   0000005C   0xDBF0             BLT.N    ??saveNetwork_4
    660              
    661              //finger = formAndJoinGetNetworkPointer(networkCount);
    662              networkInfo2[networkCount].lqi   = lqi;
   \                     ??saveNetwork_5: (+1)
   \   0000005E   0xFB0C 0xE606      MLA      R6,R12,R6,LR
   \   00000062   0x7031             STRB     R1,[R6, #+0]
    663              networkInfo2[networkCount].rssi  = rssi;
   \   00000064   0x7072             STRB     R2,[R6, #+1]
    664              networkInfo2[networkCount].index = i; 
   \   00000066   0x70B5             STRB     R5,[R6, #+2]
    665              networkInfo2[networkCount].channel = network->channel; 
   \   00000068   0x7801             LDRB     R1,[R0, #+0]
   \   0000006A   0x70F1             STRB     R1,[R6, #+3]
    666              networkInfo2[networkCount].panid = network->panId; 
   \   0000006C   0x8840             LDRH     R0,[R0, #+2]
   \   0000006E   0x80B0             STRH     R0,[R6, #+4]
    667          #if 1
    668              networkCount ++;
   \   00000070   0x1C60             ADDS     R0,R4,#+1
   \   00000072   0x7318             STRB     R0,[R3, #+12]
    669              //sea_memcpy(finger, network, sizeof(EmberZigbeeNetwork));
    670              //finger->lqi  = lqi;
    671              //finger->rssi = rssi;
    672          #else    
    673              sea_memcpy(&networkInfo2[networkCount].net, network, sizeof(EmberZigbeeNetwork));
    674              if (networkCount ++ >= MAXNETBUF - 0x01)
    675                  networkCount = 0x00;
    676          #endif    
    677          }
   \                     ??saveNetwork_3: (+1)
   \   00000074   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    678          
    679          //////////////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    680          boolean emberFormAndJoinIsScanning ( void )
    681          {
    682              return (formAndJoinScanType > FORM_AND_JOIN_NEXT_NETWORK);
   \                     emberFormAndJoinIsScanning: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2802             CMP      R0,#+2
   \   00000006   0xDB01             BLT.N    ??emberFormAndJoinIsScanning_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
   \                     ??emberFormAndJoinIsScanning_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
    683          }
    684          
    685          //////////////////////////////////////////////////////////////////////////////////////////
    686          static boolean setup ( int8u scanType )
    687          {
    688              if (emberFormAndJoinIsScanning()) 
    689              {
    690                  emberScanErrorHandler(EMBER_MAC_SCANNING);
    691                  return FALSE;
    692              }
    693              emberFormAndJoinCleanup(EMBER_SUCCESS);  // In case we were in NEXT_NETWORK mode.
    694              networkCount        = 0x00;    
    695              formAndJoinScanType = scanType;
    696              dataContents        = formAndJoinAllocateBuffer();
    697              if (dataContents == NULL) 
    698              {
    699                  emberFormAndJoinCleanup(EMBER_NO_BUFFERS);
    700                  return FALSE;
    701              }
    702              return TRUE;
    703          }
    704          
    705          //////////////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    706          void emberFormAndJoinCleanup ( EmberStatus status )
    707          {
    708              //formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
    709              //  formAndJoinReleaseBuffer();                                                                         
    710              if (status != EMBER_SUCCESS) 
   \                     emberFormAndJoinCleanup: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF18             IT       NE 
    711                  emberScanErrorHandler(status);
   \   00000004   0x.... 0x....      BNE.W    emberScanErrorHandler
    712          }
   \   00000008   0x4770             BX       LR               ;; return
    713          
    714          //////////////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    715          static void startScan ( EmberNetworkScanType type, int32u mask, int8u duration )
    716          {
    717              EmberStatus status = emberStartScan(type, mask, duration);
    718              if (status != EMBER_SUCCESS) 
   \                     startScan: (+1)
   \   00000000   0x.... 0x....      B.W      emberStartScan
    719                return;
    720                  //emberFormAndJoinCleanup(status);
    721          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     formAndJoinScanType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     sys_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     networkInfo2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     panid_info

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x73 0x65          DC8 73H, 65H, 61H, 72H, 65H, 6EH, 0, 0
   \              0x61 0x72    
   \              0x65 0x6E    
   \              0x00 0x00    
    722          
    723          //////////////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberFormAndJoinCleanup
         0   -> emberScanErrorHandler
      16   emberFormAndJoinEnergyScanResultHandler
        16   -> emberFormAndJoinIsScanning
       0   emberFormAndJoinIsScanning
      24   emberFormAndJoinNetworkFoundHandler
         0   -> emberFormAndJoinIsScanning
        24   -> formAndJoinStackProfile
        24   -> saveNetwork
        24   -> sea_findchannelindex
        24   -> sea_memcomp
      16   emberFormAndJoinScanCompleteHandler
        16   -> _disableBasePri
        16   -> _writeBasePri
        16   -> emberFormAndJoinCleanup
        16   -> emberScanForNextJoinableNetwork
        16   -> emberUnusedPanIdFoundHandler
        16   -> energyScanComplete
        16   -> startPanIdScan
       0   emberScanForJoinableNetwork
         0   -> scanDual
      16   emberScanForNextJoinableNetwork
        16   -> _disableBasePri
        16   -> _writeBasePri
        16   -> readArray
      16   emberScanForUnusedPanId
        16   -> emberFormAndJoinCleanup
        16   -> emberFormAndJoinIsScanning
        16   -> formAndJoinAllocateBuffer
        16   -> sea_memset
         0   -> startScan
      16   energyScanComplete
        16   -> halCommonGetRandom
         0   -> startPanIdScan
       0   isScanComplete
       0   isScanRunning
       8   readArray
      32   saveNetwork
       8   scanDual
         0   -> emberScanForNextJoinableNetwork
         8   -> halReboot
         8   -> scanErrorHandler
       0   scanErrorHandler
         0   -> writeArray
       8   scanInitial
         0   -> emberScanForNextJoinableNetwork
         8   -> scanOpenTimeOutEvent
         8   -> sea_memcpy
       0   scanPrintStatus
       0   scanSet
       0   scaningStatus
       8   startPanIdScan
         8   -> halCommonGetRandom
         0   -> startScan
       0   startScan
         0   -> emberStartScan
       0   writeArray


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       6  ?Subroutine0
       8  ?_0
       1  emberEnableDualChannelScan
      10  emberFormAndJoinCleanup
      26  emberFormAndJoinEnergyScanResultHandler
      16  emberFormAndJoinIsScanning
     126  emberFormAndJoinNetworkFoundHandler
     110  emberFormAndJoinScanCompleteHandler
      16  emberScanForJoinableNetwork
      56  emberScanForNextJoinableNetwork
      74  emberScanForUnusedPanId
     106  energyScanComplete
      48  formAndJoinScanType
          scanStatus
          scanFail
          scanWait
          currentChannel
          lastChannel
          scanSingnal
          channelOut
          channelIn
          readError
          channelCache
          ignoreExtendedPanId
          networkCount
          scanChannel
          dataContents
          extendedPanIdCache
      16  isScanComplete
      20  isScanRunning
      48  networkInfo2
      44  readArray
     120  saveNetwork
      74  scanDual
      10  scanErrorHandler
      74  scanInitial
       2  scanPrintStatus
      16  scanSet
       6  scaningStatus
      50  startPanIdScan
       4  startScan
      28  writeArray

 
    48 bytes in section .bss
    49 bytes in section .data
 1 034 bytes in section .text
 
 1 034 bytes of CODE memory
    97 bytes of DATA memory

Errors: none
Warnings: none
