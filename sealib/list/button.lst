###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\hal\button.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\hal\button.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\button.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\button.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\hal\button.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "hal.h"
      5          #include "serial.h"
      6          
      7          // This state is kept track of so the IRQ ISRs knows when to notify buttonIsrs.

   \                                 In section .bss, align 1
      8          int8u button0State, button1State;
   \                     button0State:
   \   00000000                      DS8 1
   \                     button1State:
   \   00000001                      DS8 1
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void halInternalInitButton(void)
     11          {
   \                     halInternalInitButton: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     12            //start from a fresh state just in case
     13            BUTTON0_INTCFG = 0;                   //disable BUTTON0 triggering
   \   00000002   0x....             LDR.N    R4,??DataTable4  ;; 0x4000a814
     14            BUTTON1_INTCFG = 0;                   //disable BUTTON1 triggering
     15            INT_CFGCLR = BUTTON0_INT_EN_BIT; //clear BUTTON0 top level int enable
     16            INT_CFGCLR = BUTTON1_INT_EN_BIT; //clear BUTTON1 top level int enable
     17            INT_GPIOFLAG = BUTTON0_FLAG_BIT;      //clear stale BUTTON0 interrupt
     18            INT_GPIOFLAG = BUTTON1_FLAG_BIT;      //clear stale BUTTON1 interrupt
     19            INT_MISS = BUTTON0_MISS_BIT;          //clear stale missed BUTTON0 interrupt
     20            INT_MISS = BUTTON1_MISS_BIT;          //clear stale missed BUTTON1 interrupt
     21            
     22            // Configure BUTTON0
     23            BUTTON0_SEL();                              //point IRQ at the desired pin
   \   00000004   0x....             LDR.N    R1,??DataTable4_1  ;; 0x4000bc14
     24            BUTTON0_INTCFG  = (0 << GPIO_INTFILT_BIT);  //no filter
     25            BUTTON0_INTCFG |= (3 << GPIO_INTMOD_BIT);   //3 = both edges
     26            button0State = halButtonPinState(BUTTON0);
   \   00000006   0x....             LDR.N    R7,??DataTable4_2
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6560             STR      R0,[R4, #+84]
   \   0000000C   0x65A0             STR      R0,[R4, #+88]
   \   0000000E   0xF44F 0x4580      MOV      R5,#+16384
   \   00000012   0x....             LDR.N    R0,??DataTable4_3  ;; 0xe000e180
   \   00000014   0x6005             STR      R5,[R0, #+0]
   \   00000016   0xF44F 0x4600      MOV      R6,#+32768
   \   0000001A   0x6006             STR      R6,[R0, #+0]
   \   0000001C   0x2004             MOVS     R0,#+4
   \   0000001E   0x6020             STR      R0,[R4, #+0]
   \   00000020   0x2008             MOVS     R0,#+8
   \   00000022   0x6020             STR      R0,[R4, #+0]
   \   00000024   0x60E5             STR      R5,[R4, #+12]
   \   00000026   0x60E6             STR      R6,[R4, #+12]
   \   00000028   0x2007             MOVS     R0,#+7
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x6560             STR      R0,[R4, #+84]
   \   00000030   0x6D60             LDR      R0,[R4, #+84]
   \   00000032   0xF040 0x0060      ORR      R0,R0,#0x60
   \   00000036   0x6560             STR      R0,[R4, #+84]
   \   00000038   0x2007             MOVS     R0,#+7
   \   0000003A   0x.... 0x....      BL       halButtonPinState
   \   0000003E   0x7038             STRB     R0,[R7, #+0]
     27            
     28            // Configure BUTTON1
     29            BUTTON1_SEL();                              //point IRQ at the desired pin
     30            BUTTON1_INTCFG  = (0 << GPIO_INTFILT_BIT);  //no filter
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x65A0             STR      R0,[R4, #+88]
     31            BUTTON1_INTCFG |= (3 << GPIO_INTMOD_BIT);   //3 = both edges
   \   00000044   0x6DA0             LDR      R0,[R4, #+88]
   \   00000046   0xF040 0x0060      ORR      R0,R0,#0x60
   \   0000004A   0x65A0             STR      R0,[R4, #+88]
     32            button1State = halButtonPinState(BUTTON1);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       halButtonPinState
   \   00000052   0x7078             STRB     R0,[R7, #+1]
     33            
     34            // Enable Interrupts
     35            INT_CFGSET = BUTTON0_INT_EN_BIT;  //set top level interrupt enable
   \   00000054   0x....             LDR.N    R0,??DataTable4_4  ;; 0xe000e100
   \   00000056   0x6005             STR      R5,[R0, #+0]
     36            INT_CFGSET = BUTTON1_INT_EN_BIT;  //set top level interrupt enable
   \   00000058   0x6006             STR      R6,[R0, #+0]
     37          }
   \   0000005A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     38          

   \                                 In section .text, align 2, keep-with-next
     39          int8u halButtonState(int8u button)
     40          {
     41            // Note: this returns the "soft" state rather than reading the port
     42            //  so it jives with the interrupts and their callbacks
     43            switch(button) {
   \                     halButtonState: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2
   \   00000002   0xB118             CBZ.N    R0,??halButtonState_0
   \   00000004   0x2807             CMP      R0,#+7
   \   00000006   0xD103             BNE.N    ??halButtonState_1
     44              case BUTTON0:
     45                return button0State;
   \   00000008   0x7808             LDRB     R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR
     46              case BUTTON1:
     47                return button1State;
   \                     ??halButtonState_0: (+1)
   \   0000000C   0x7848             LDRB     R0,[R1, #+1]
   \   0000000E   0x4770             BX       LR
     48              default:
     49                return BUTTON_RELEASED;
   \                     ??halButtonState_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
     50            }
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          int8u halButtonPinState(int8u button)
     54          {
     55            // Note: this returns the current state of the button's pin.  It may not
     56            // jive with the interrupts and their callbacks, but it is useful for
     57            // checking the state of the button on startup.
     58            switch(button) {
   \                     halButtonPinState: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_5  ;; 0x4000b008
   \   00000002   0xB120             CBZ.N    R0,??halButtonPinState_0
   \   00000004   0x2807             CMP      R0,#+7
   \   00000006   0xD108             BNE.N    ??halButtonPinState_1
     59              case BUTTON0:
     60                return (BUTTON0_IN & BIT(BUTTON0&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
   \   00000008   0x6808             LDR      R0,[R1, #+0]
   \   0000000A   0x09C0             LSRS     R0,R0,#+7
   \   0000000C   0xE000             B.N      ??halButtonPinState_2
     61              case BUTTON1:
     62                return (BUTTON1_IN & BIT(BUTTON1&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
   \                     ??halButtonPinState_0: (+1)
   \   0000000E   0x6808             LDR      R0,[R1, #+0]
   \                     ??halButtonPinState_2: (+1)
   \   00000010   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000014   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000018   0x4770             BX       LR
     63              default:
     64                return BUTTON_RELEASED;
   \                     ??halButtonPinState_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4770             BX       LR               ;; return
     65            }
     66          }
     67          
     68          
     69          //DEBOUNCE operation is based upon the theory that when multiple reads in a row
     70          //return the same value, we have passed any debounce created by the mechanical
     71          //action of a button.  The define "DEBOUNCE" says how many reads in a row
     72          //should return the same value.  The value '5', below, is the recommended value
     73          //since this should require the signal to have stabalized for approximately
     74          //100us which should be much longer than any debounce action.
     75          //Uncomment the following line to enable software debounce operation:
     76          //#define DEBOUNCE 5
     77          
     78          //Typically, software debounce is disabled by defaulting to a value of '0'
     79          //which will cause the preprocessor to strip out the debounce code and save
     80          //flash space.
     81          #ifndef DEBOUNCE
     82          #define DEBOUNCE 0
     83          #endif//DEBOUNCE
     84          
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void BUTTON0_ISR(void)
     87          {
   \                     halIrqCIsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     88            int8u buttonStateNow;
     89            #if (DEBOUNCE > 0)
     90              int8u buttonStatePrev;
     91              int32u debounce;
     92            #endif //(DEBOUNCE > 0)
     93          
     94            //clear int before read to avoid potential of missing interrupt
     95            INT_MISS = BUTTON0_MISS_BIT;     //clear missed BUTTON0 interrupt flag
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x4000a814
     96            INT_GPIOFLAG = BUTTON0_FLAG_BIT; //clear top level BUTTON0 interrupt flag
     97            
     98            buttonStateNow = halButtonPinState(BUTTON0);
   \   00000004   0x....             LDR.N    R4,??DataTable4_2
   \   00000006   0xF44F 0x4180      MOV      R1,#+16384
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0x2007             MOVS     R0,#+7
   \   00000012   0x.... 0x....      BL       halButtonPinState
     99            #if (DEBOUNCE > 0)
    100              //read button until get "DEBOUNCE" number of consistent readings
    101              for( debounce = 0;
    102                   debounce < DEBOUNCE;
    103                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    104                buttonStatePrev = buttonStateNow;
    105                //clear int before read to avoid potential of missing interrupt
    106                INT_GPIOFLAG = BUTTON0_FLAG_BIT; //clear top level BUTTON0 interrupt flag
    107                buttonStateNow = halButtonPinState(BUTTON0);
    108              }
    109            #endif //(DEBOUNCE > 0)
    110            if(button0State != buttonStateNow) { //state changed, notify app
   \   00000016   0x7822             LDRB     R2,[R4, #+0]
   \   00000018   0x4601             MOV      R1,R0
   \   0000001A   0x428A             CMP      R2,R1
   \   0000001C   0xBF18             IT       NE 
   \   0000001E   0x7021             STRBNE   R1,[R4, #+0]
    111              button0State = buttonStateNow;
    112              halButtonIsr(BUTTON0,  button0State);
   \   00000020   0xD10D             BNE.N    ??halIrqCIsr_0
    113            } else {  //state unchanged, then notify app of a double-transition
    114              button0State = !button0State; //invert temporarily for calling Isr
   \   00000022   0x1E50             SUBS     R0,R2,#+1
   \   00000024   0x4180             SBCS     R0,R0,R0
   \   00000026   0x0FC0             LSRS     R0,R0,#+31
   \   00000028   0x7020             STRB     R0,[R4, #+0]
    115              halButtonIsr(BUTTON0, button0State);
   \   0000002A   0x2007             MOVS     R0,#+7
   \   0000002C   0x7821             LDRB     R1,[R4, #+0]
   \   0000002E   0x.... 0x....      BL       halButtonIsr
    116              button0State = !button0State; //and put it back to current state
   \   00000032   0x7821             LDRB     R1,[R4, #+0]
   \   00000034   0x1E48             SUBS     R0,R1,#+1
   \   00000036   0x4180             SBCS     R0,R0,R0
   \   00000038   0x0FC0             LSRS     R0,R0,#+31
   \   0000003A   0x7020             STRB     R0,[R4, #+0]
    117              halButtonIsr(BUTTON0, button0State);
   \   0000003C   0x7821             LDRB     R1,[R4, #+0]
   \                     ??halIrqCIsr_0: (+1)
   \   0000003E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000042   0x2007             MOVS     R0,#+7
   \   00000044   0x.... 0x....      B.W      halButtonIsr
    118            }
    119            
    120          }
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void BUTTON1_ISR(void)
    123          {
   \                     halIrqDIsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    124            int8u buttonStateNow;
    125            #if (DEBOUNCE > 0)
    126              int8u buttonStatePrev;
    127              int32u debounce;
    128            #endif //(DEBOUNCE > 0)
    129            
    130            //clear int before read to avoid potential of missing interrupt
    131            INT_MISS = BUTTON1_MISS_BIT;     //clear missed BUTTON1 interrupt flag
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x4000a814
    132            INT_GPIOFLAG = BUTTON1_FLAG_BIT; //clear top level BUTTON1 interrupt flag
    133            
    134            buttonStateNow = halButtonPinState(BUTTON1);
   \   00000004   0x....             LDR.N    R4,??DataTable4_2
   \   00000006   0xF44F 0x4100      MOV      R1,#+32768
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
   \   0000000C   0x2108             MOVS     R1,#+8
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       halButtonPinState
    135            #if (DEBOUNCE > 0)
    136              //read button until get "DEBOUNCE" number of consistent readings
    137              for( debounce = 0;
    138                   debounce < DEBOUNCE;
    139                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    140                buttonStatePrev = buttonStateNow;
    141                //clear int before read to avoid potential of missing interrupt
    142                INT_GPIOFLAG = BUTTON1_FLAG_BIT; //clear top level BUTTON1 interrupt flag
    143                buttonStateNow = halButtonPinState(BUTTON1);
    144              }
    145            #endif //(DEBOUNCE > 0)
    146            if(button1State != buttonStateNow) { //state changed, notify app
   \   00000016   0x7862             LDRB     R2,[R4, #+1]
   \   00000018   0x4601             MOV      R1,R0
   \   0000001A   0x428A             CMP      R2,R1
   \   0000001C   0xBF18             IT       NE 
   \   0000001E   0x7061             STRBNE   R1,[R4, #+1]
    147              button1State = buttonStateNow;
    148              halButtonIsr(BUTTON1,  button1State);
   \   00000020   0xD10D             BNE.N    ??halIrqDIsr_0
    149            } else {  //state unchanged, then notify app of a double-transition
    150              button1State = !button1State; //invert temporarily for calling Isr
   \   00000022   0x1E50             SUBS     R0,R2,#+1
   \   00000024   0x4180             SBCS     R0,R0,R0
   \   00000026   0x0FC0             LSRS     R0,R0,#+31
   \   00000028   0x7060             STRB     R0,[R4, #+1]
    151              halButtonIsr(BUTTON1, button1State);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x7861             LDRB     R1,[R4, #+1]
   \   0000002E   0x.... 0x....      BL       halButtonIsr
    152              button1State = !button1State; //and put it back to current state
   \   00000032   0x7861             LDRB     R1,[R4, #+1]
   \   00000034   0x1E48             SUBS     R0,R1,#+1
   \   00000036   0x4180             SBCS     R0,R0,R0
   \   00000038   0x0FC0             LSRS     R0,R0,#+31
   \   0000003A   0x7060             STRB     R0,[R4, #+1]
    153              halButtonIsr(BUTTON1, button1State);
   \   0000003C   0x7861             LDRB     R1,[R4, #+1]
   \                     ??halIrqDIsr_0: (+1)
   \   0000003E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      B.W      halButtonIsr
    154            }
    155          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4000BC14         DC32     0x4000bc14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     button0State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4000B008         DC32     0x4000b008
    156          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halButtonPinState
       0   halButtonState
      24   halInternalInitButton
        24   -> halButtonPinState
       8   halIrqCIsr
         0   -> halButtonIsr
         8   -> halButtonIsr
         8   -> halButtonPinState
       8   halIrqDIsr
         0   -> halButtonIsr
         8   -> halButtonIsr
         8   -> halButtonPinState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       2  button0State
          button1State
      30  halButtonPinState
      20  halButtonState
      92  halInternalInitButton
      72  halIrqCIsr
      72  halIrqDIsr

 
   2 bytes in section .bss
 310 bytes in section .text
 
 310 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
