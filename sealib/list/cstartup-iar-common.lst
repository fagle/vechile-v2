###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\arch\cstartup-iar-common.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\arch\cstartup-iar-common.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\cstartup-iar-common.lst
#    Object file  =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\obj\cstartup-iar-common.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\arch\cstartup-iar-common.c
      1          
      2          #include "config.h"
      3          #include "diagnostic.h"
      4          #include "mpu.h"
      5          #include "micro.h"
      6          #include "memmap.h"
      7          #include "cstartup-iar-common.h"
      8          
      9          #include "ember-types.h"
     10          #include "bootloader-interface.h"
     11          
     12          // Exit with an error if building for a bootload type that is not yet supported
     13          // Currently this means an error will be triggered with the default (standalone)
     14          // bootloader type, which is indicated by the abscense of a build option
     15          #if !defined(APP_BTL) && !defined(SERIAL_UART_BTL) && !defined(NULL_BTL)
     16            #error Standalone bootloader not yet supported.  Must define NULL_BTL, APP_BTL, or SERIAL_UART_BTL
     17          #endif
     18          
     19          
     20          //=============================================================================
     21          // Define the size of the call stack and define a block of memory for it.
     22          // 
     23          // Place the cstack area in a segment named CSTACK.  This segment is
     24          // defined soley for the purpose of placing the stack.  Since this area
     25          // is manually placed, it cannot be part of the normal data initialization
     26          // and therefore must be declared '__no_init'.  Refer to reset handler for the
     27          //initialization code and iar-cfg-common.icf for segment placement in memory.
     28          // 
     29          // halResetInfo, used to store crash information and bootloader parameters, is
     30          // overlayed on top of the base of this segment so it can be overwritten by the 
     31          // call stack.
     32          // This assumes that the stack will not go that deep between reset and
     33          // use of the crash or the bootloader data.
     34          //=============================================================================
     35          #ifndef CSTACK_SIZE
     36            // Right now we define the stack size to be for the worst case scenario,
     37            // ECC.  The ECC library uses stack for its calculations.  Empirically I have
     38            // seen it use as much as 1504 bytes for the 'key bit generate' operation.
     39            // So we add a 25% buffer: 1504 * 1.25 = 1880
     40            // Later we may want to conditionally change the stack based on whether
     41            // or not the customer is building a Smart Energy Application.
     42            #define CSTACK_SIZE  (470)  // *4 = 1880 bytes
     43          #endif

   \                                 In section CSTACK, align 4, root
     44          __root __no_init int32u cstackMemory[CSTACK_SIZE] @ __CSTACK__;
   \                     cstackMemory:
   \   00000000                      DS8 1880
     45          
     46          // Reset cause and crash info live in a special RAM segment that is
     47          // not modified during startup.  This segment is overlayed on top of the
     48          // bottom of the cstack.

   \                                 In section RESETINFO, align 4, root
     49          __root __no_init HalResetInfoType halResetInfo @ __RESETINFO__;
   \                     halResetInfo:
   \   00000000                      DS8 148
     50          
     51          //=============================================================================
     52          // Declare the address tables which will always live at well known addresses
     53          //=============================================================================

   \                                 In section FAT, align 4, root
     54          __root __no_init const HalFixedAddressTableType halFixedAddressTable @ __FAT__; 
   \                     halFixedAddressTable:
   \   00000000                      DS8 44
     55          
     56          #ifdef NULL_BTL
     57          // In the case of a NULL_BTL application, we define a dummy BAT

   \                                 In section BAT, align 4, root
     58          __root const HalBootloaderAddressTableType halBootloaderAddressTable @ __BAT__ = {
   \                     halBootloaderAddressTable:
   \   00000000   0x........         DC32 SFE(CSTACK), halEntryPoint, halNmiIsr, halHardFaultIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x0BA7 0x0000      DC16 2983, 0
   \   00000014   0x00000000         DC32 0H
   \   00000018   0x0000 0xFFFF      DC16 0, 65535
   \   0000001C   0x........         DC32 halAppAddressTable
   \   00000020   0x04 0x03          DC8 4, 3, 3, 0
   \              0x03 0x00    
   \   00000024   0x00000000         DC32 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     59            { __section_end("CSTACK"),
     60              halEntryPoint,
     61              halNmiIsr,
     62              halHardFaultIsr,
     63              BOOTLOADER_ADDRESS_TABLE_TYPE,
     64              BAT_NULL_VERSION,
     65              NULL                    // No other vector table.
     66            },
     67            BL_EXT_TYPE_NULL,           //int16u bootloaderType;
     68            BOOTLOADER_INVALID_VERSION, //int16u bootloaderVersion;  
     69            &halAppAddressTable,
     70            PLAT,   //int8u platInfo;   // type of platform, defined in micro.h
     71            MICRO,  //int8u microInfo;  // type of micro, defined in micro.h
     72            PHY,    //int8u phyInfo;    // type of phy, defined in micro.h
     73            0,      //int8u reserved;   // reserved for future use  
     74            NULL,   // eblProcessInit
     75            NULL,   // eblProcess
     76            NULL    // eblDataFuncs
     77          };
     78          #else
     79          // otherwise we just define a variable that maps to the real bootloader BAT
     80          __root __no_init const HalBootloaderAddressTableType halBootloaderAddressTable @ __BAT__;
     81          #endif
     82          

   \                                 In section AAT, align 4, root
     83          __root const HalAppAddressTableType halAppAddressTable @ __AAT__ = {
   \                     halAppAddressTable:
   \   00000000   0x........         DC32 SFE(CSTACK), halEntryPoint, halNmiIsr, halHardFaultIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x0AA7 0x0104      DC16 2727, 260
   \   00000014   0x........         DC32 __vector_table
   \   00000018   0x04 0x03          DC8 4, 3, 3, 156
   \              0x03 0x9C    
   \   0000001C   0x4032 0x0000      DC16 16434, 0
   \   00000020   0x00000000         DC32 0
   \   00000024   0x00               DC8 ""
   \   00000025   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000035   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000044   0x00000000         DC32 0
   \   00000048   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \   00000054   0x........         DC32 SFB(SIMEE), 4294967295, 4294967295, 4294967295, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000068   0xFFFFFFFF         DC32 4294967295, 4294967295, 4294967295, 4294967295, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000007C   0xFFFFFFFF         DC32 4294967295, SFB(DEBUG_CHANNEL), SFB(`.noinit`), SFE(APP_RAM)
   \              0x........   
   \              0x........   
   \              0x........   
   \   0000008C   0x........         DC32 SFE(`.bss`), SFE(CSTACK), SFE(`.data_init`), SFE(`.text`)
   \              0x........   
   \              0x........   
   \              0x........   
     84            { __section_end("CSTACK"),
     85              halEntryPoint,
     86              halNmiIsr,
     87              halHardFaultIsr,
     88              APP_ADDRESS_TABLE_TYPE,
     89              AAT_VERSION,
     90              __vector_table
     91            },
     92            PLAT,  //int8u platInfo;   // type of platform, defined in micro.h
     93            MICRO, //int8u microInfo;  // type of micro, defined in micro.h
     94            PHY,   //int8u phyInfo;    // type of phy, defined in micro.h
     95            sizeof(HalAppAddressTableType),  // size of aat itself
     96            SOFTWARE_VERSION,   // int16u softwareVersion
     97            0,  // int16u reserved
     98            0,  //int32u timestamp; // Unix epoch time of .ebl file, filled in by ebl gen
     99            "", //int8u imageInfo[IMAGE_INFO_SZ];  // string, filled in by ebl generation
    100            0,  //int32u imageCrc;  // CRC over following pageRanges, filled in by ebl gen
    101            { {0xFF, 0xFF},   //pageRange_t pageRanges[6];  // Flash pages used by app, 
    102              {0xFF, 0xFF},                                 // filled in by ebl gen
    103              {0xFF, 0xFF}, 
    104              {0xFF, 0xFF}, 
    105              {0xFF, 0xFF}, 
    106              {0xFF, 0xFF} 
    107            }, 
    108            __section_begin(__SIMEE__),                         //void *simeeBottom;
    109            {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,    // bootloaderReserved
    110             0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF },
    111            __section_begin(__DEBUG_CHANNEL__),   //void *debugChannelBottom;
    112            __section_begin(__NO_INIT__),         //void *noInitBottom;
    113            __section_end(__APP_RAM__),           //void *appRamTop;
    114            __section_end(__BSS__),               //void *globalTop;
    115            __section_end(__CSTACK__),            //void *cstackTop;  
    116            __section_end(__DATA_INIT__),         //void *initcTop;
    117            __section_end(__TEXT__),              //void *codeTop;
    118          };
    119          
    120          
    121          
    122          //=============================================================================
    123          // Define the vector table as a HalVectorTableType.  __root ensures the compiler
    124          // will not strip the table.  const ensures the table is placed into flash.
    125          // @ "INTVEC" tells the compiler/linker to place the vector table in the INTVEC
    126          // segment which holds the reset/interrupt vectors at address 0x00000000.
    127          // 
    128          // All Handlers point to a corresponding ISR.  The ISRs are prototyped above.
    129          // The file isr-stubs.s79 provides a weak definition for all ISRs.  To
    130          // "register" its own ISR, an application simply has to define the function
    131          // and the weak stub will be overridden.
    132          //
    133          // The list of handlers are extracted from the NVIC configuration file.  The
    134          // order of the handlers in the NVIC configuration file is critical since it
    135          // translates to the order they are placed into the vector table here.
    136          //=============================================================================

   \                                 In section .intvec, align 4, root
    137          __root const HalVectorTableType __vector_table[] @ __INTVEC__ =
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), halEntryPoint, halNmiIsr, halHardFaultIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 halMemoryFaultIsr, halBusFaultIsr, halUsageFaultIsr
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 halReserved07Isr, halReserved08Isr, halReserved09Isr
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 halReserved10Isr, halSvCallIsr, halDebugMonitorIsr
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 halReserved13Isr, halPendSvIsr, SysTickIsr, halTimer1Isr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000044   0x........         DC32 halTimer2Isr, halManagementIsr, halBaseBandIsr, halSleepTimerIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000054   0x........         DC32 halSc1Isr, halSc2Isr, halSecurityIsr, halStackMacTimerIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 emRadioTransmitIsr, emRadioReceiveIsr, halAdcIsr, halIrqAIsr
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000074   0x........         DC32 halIrqBIsr, halIrqCIsr, halIrqDIsr, halDebugIsr
   \              0x........   
   \              0x........   
   \              0x........   
    138          {
    139            { .topOfStack = __section_end(__CSTACK__) },
    140            #ifndef INTERRUPT_DEBUGGING
    141              #define EXCEPTION(vectorNumber, functionName, priorityLevel) \
    142                functionName,
    143            #else //INTERRUPT_DEBUGGING  
    144              // The interrupt debug behavior inserts a special shim handler before
    145              // the actual interrupt.  The shim handler then redirects to the 
    146              // actual table, defined below
    147              #define EXCEPTION(vectorNumber, functionName, priorityLevel) \
    148                halInternalIntDebuggingIsr,
    149              // PERM_EXCEPTION is used for any vectors that cannot be redirected
    150              // throught the shim handler.  (such as the reset vector)
    151              #define PERM_EXCEPTION(vectorNumber, functionName, priorityLevel) \
    152                functionName,
    153            #endif //INTERRUPT_DEBUGGING
    154            #include NVIC_CONFIG
    155            #undef  EXCEPTION
    156            #undef PERM_EXCEPTION
    157          };
    158          
    159          // halInternalClassifyReset() records the cause of the last reset here

   \                                 In section .bss, align 2
    160          static int16u savedResetCause;
   \                     savedResetCause:
   \   00000000                      DS8 2
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void halInternalClassifyReset(void) 
    163          {
   \                     halInternalClassifyReset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    164            // Table used to convert from RESET_EVENT register bits to reset types
    165            static const int16u resetEventTable[] = {
    166              RESET_POWERON_HV,         // bit 0: RESET_PWRHV_BIT
    167              RESET_POWERON_LV,         // bit 1: RESET_PWRLV_BIT
    168              RESET_EXTERNAL_PIN,       // bit 2: RESET_NRESET_BIT
    169              RESET_WATCHDOG_EXPIRED,   // bit 3: RESET_WDOG_BIT
    170              RESET_SOFTWARE,           // bit 4: RESET_SW_BIT
    171              RESET_UNKNOWN,            // bit 5: RESET_DSLEEP_BIT
    172              RESET_FATAL_OPTIONBYTE,   // bit 6: RESET_OPTBYTEFAIL_BIT
    173              RESET_FATAL_LOCKUP,       // bit 7: RESET_CPULOCKUP_BIT
    174            };
    175            
    176            // It is possible for RSTB and POWER_HV to be set at the same time, which
    177            // happens when RSTB releases between HV power good and LV power good. (All
    178            // other reset events are mutually exclusive.) When both RSTB and POWER_HV
    179            // are set, POWER_HV should be returned as the cause. The bit test order --
    180            // from LSB to MSB -- ensures that it will.
    181            int16u resetEvent = RESET_EVENT & 
    182                                  ( RESET_CPULOCKUP_MASK   |
    183                                    RESET_OPTBYTEFAIL_MASK |
    184            // handled by cstartup  RESET_DSLEEP_MASK      |
    185                                    RESET_SW_MASK          |
    186                                    RESET_WDOG_MASK        |
    187                                    RESET_NRESET_MASK      |
    188                                    RESET_PWRLV_MASK       |
    189                                    RESET_PWRHV_MASK );
   \   00000002   0x....             LDR.N    R0,??DataTable3  ;; 0x4000002c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF000 0x03DF      AND      R3,R0,#0xDF
    190          
    191            int16u cause = RESET_UNKNOWN;
   \   0000000A   0x2100             MOVS     R1,#+0
    192            int i;
    193          
    194            for (i = 0; i < sizeof(resetEventTable)/sizeof(resetEventTable[0]); i++) {
   \   0000000C   0x2200             MOVS     R2,#+0
    195              if (resetEvent & (1 << i)) {
   \                     ??halInternalClassifyReset_0: (+1)
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x4094             LSLS     R4,R4,R2
   \   00000012   0x4223             TST      R3,R4
   \   00000014   0xD010             BEQ.N    ??halInternalClassifyReset_1
    196                cause = resetEventTable[i];
   \   00000016   0x.... 0x....      ADR.W    R0,??resetEventTable
   \   0000001A   0xF830 0x1012      LDRH     R1,[R0, R2, LSL #+1]
    197                break;
    198              }
    199            }
    200          
    201            if (cause == RESET_SOFTWARE) {
   \   0000001E   0x2906             CMP      R1,#+6
   \   00000020   0xD10D             BNE.N    ??halInternalClassifyReset_2
    202              if((halResetInfo.crash.resetSignature == RESET_VALID_SIGNATURE) &&
    203                 (RESET_BASE_TYPE(halResetInfo.crash.resetReason) < NUM_RESET_BASE_TYPES)) {
   \   00000022   0x....             LDR.N    R0,??DataTable3_1
   \   00000024   0x8841             LDRH     R1,[R0, #+2]
   \   00000026   0xF24F 0x020F      MOVW     R2,#+61455
   \   0000002A   0x4291             CMP      R1,R2
   \   0000002C   0xD10A             BNE.N    ??halInternalClassifyReset_3
   \   0000002E   0x8801             LDRH     R1,[R0, #+0]
   \   00000030   0x0A0A             LSRS     R2,R1,#+8
   \   00000032   0x2A0B             CMP      R2,#+11
   \   00000034   0xDA06             BGE.N    ??halInternalClassifyReset_3
    204                // The extended reset cause is recovered from RAM
    205                // This can be trusted because the hardware reset event was software
    206                //  and additionally because the signature is valid
    207                savedResetCause = halResetInfo.crash.resetReason;
   \   00000036   0xE007             B.N      ??halInternalClassifyReset_4
    208              } else {
   \                     ??halInternalClassifyReset_1: (+1)
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \   0000003A   0x2A08             CMP      R2,#+8
   \   0000003C   0xD3E7             BCC.N    ??halInternalClassifyReset_0
    209                savedResetCause = RESET_SOFTWARE_UNKNOWN;
    210              }
    211              // mark the signature as invalid 
    212              halResetInfo.crash.resetSignature = RESET_INVALID_SIGNATURE;
    213            } else {
    214              savedResetCause = cause;
   \                     ??halInternalClassifyReset_2: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable3_2
   \   00000040   0x8001             STRH     R1,[R0, #+0]
    215            }
    216          }  
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   \                     ??halInternalClassifyReset_3: (+1)
   \   00000044   0xF44F 0x61C0      MOV      R1,#+1536
   \                     ??halInternalClassifyReset_4: (+1)
   \   00000048   0xF24C 0x323C      MOVW     R2,#+49980
   \   0000004C   0x8042             STRH     R2,[R0, #+2]
   \   0000004E   0xE7F6             B.N      ??halInternalClassifyReset_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??resetEventTable:
   \   00000000   0x0401 0x0402      DC16 1025, 1026, 769, 1281, 6, 0, 2307, 2305
   \              0x0301 0x0501
   \              0x0006 0x0000
   \              0x0903 0x0901
    217          

   \                                 In section .text, align 2, keep-with-next
    218          int8u halGetResetInfo(void)
    219          {
    220            return RESET_BASE_TYPE(savedResetCause);
   \                     halGetResetInfo: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_2
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x0A00             LSRS     R0,R0,#+8
   \   00000006   0x4770             BX       LR               ;; return
    221          }
    222          

   \                                 In section .text, align 2, keep-with-next
    223          int16u halGetExtendedResetInfo(void)
    224          {
    225            return savedResetCause;
   \                     halGetExtendedResetInfo: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_2
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    226          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4000002C         DC32     0x4000002c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     halResetInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     savedResetCause
    227          
    228          
    229          
    230          #ifdef INTERRUPT_DEBUGGING
    231          //=============================================================================
    232          // If interrupt debugging is enabled, the actual ISRs are listed in this
    233          // secondary interrupt table.  The halInternalIntDebuggingIsr will use this
    234          // table to jump to the appropriate handler
    235          //=============================================================================
    236          __root const HalVectorTableType __real_vector_table[] = 
    237          {
    238            { .topOfStack = __section_end("CSTACK") },
    239            #define EXCEPTION(vectorNumber, functionName, priorityLevel) \
    240              functionName,
    241              #include NVIC_CONFIG
    242            #undef EXCEPTION
    243          };
    244          
    245          //[[  Macro used with the interrupt latency debugging hooks
    246            #define ISR_TX_BIT(bit)  GPIO_PAOUT = (GPIO_PAOUT&(~PA7_MASK))|((bit)<<PA7_BIT)
    247          //]]
    248          
    249          //=============================================================================
    250          // The halInternalDebuggingIsr will intercept all exceptions in order to 
    251          // set interrupt debugging IO flags so that interrupt latency and other timings
    252          // may be measured with a logic analyzer
    253          //=============================================================================
    254          void halInternalIntDebuggingIsr(void)
    255          {
    256            boolean prevState = I_STATE(I_PORT,I_PIN);
    257            int32u exception;
    258            
    259            //[[ Additional debug output for printing, via printf, the name of the
    260            //   ISR that has been invoked and the time it took (in us).  The ISR must
    261            //   exceed a time threshold to print the name.
    262            #ifdef PRINT_ISR_NAME
    263            int32u beginTime = MAC_TIMER;
    264            int32u endTime;
    265            #endif //PRINT_ISR_NAME
    266            //]]
    267           
    268            I_SET(I_PORT, I_PIN);
    269          
    270            // call the actual exception we were supposed to go to.  The exception
    271            // number is conveniently available in the SCS_ICSR register
    272            exception = (SCS_ICSR & SCS_ICSR_VECACTIVE_MASK) >> SCS_ICSR_VECACTIVE_BIT;
    273            
    274            //[[  This is a little bit of additional debug output that serially shows
    275            //     which exception was triggered, so that long ISRs can be determined
    276            //     from a logic analyzer trace
    277            #if 0
    278            {
    279              int32u byte = (exception<<3) | 0x2;
    280              int32u i;
    281              for(i=0;i<11;i++) {
    282               ISR_TX_BIT(byte&0x1); //data bit
    283                byte = (byte>>1);
    284              }
    285              ISR_TX_BIT(1); //stop bit
    286            }
    287            #endif
    288            //]]
    289          
    290            __real_vector_table[exception].ptrToHandler();
    291          
    292            // In order to deal with the possibility of nesting, only clear the status
    293            // output if it was clear when we entered
    294            if(!prevState)
    295              I_CLR(I_PORT, I_PIN);
    296            //[[ Some additional debug output to show the ISR exited
    297            #if 0
    298            else {
    299              ISR_TX_BIT(0);
    300              ISR_TX_BIT(1);
    301            }
    302            #endif
    303            //]]
    304            
    305            //[[ Additional debug output for printing, via printf, the name of the
    306            //   ISR that has been invoked and the time it took (in us).  The ISR must
    307            //   exceed a time threshold to print the name.
    308            #ifdef PRINT_ISR_NAME
    309            endTime = MAC_TIMER;
    310            if((endTime-beginTime)>150) {
    311              void Debug ( const char * format, ... );
    312              Debug( "[%d:", (endTime-beginTime));
    313              switch(INT_ACTIVE) {
    314                case INT_DEBUG:
    315                  Debug( "DEBUG");
    316                break;
    317                case INT_IRQD:
    318                  Debug( "IRQD");
    319                break;
    320                case INT_IRQC:
    321                  Debug( "IRQC");
    322                break;
    323                case INT_IRQB:
    324                  Debug( "IRQB");
    325                break;
    326                case INT_IRQA:
    327                  Debug( "IRQA");
    328                break;
    329                case INT_ADC:
    330                  Debug( "ADC");
    331                break;
    332                case INT_MACRX:
    333                  Debug( "MACRX");
    334                break;
    335                case INT_MACTX:
    336                  Debug( "MACTX");
    337                break;
    338                case INT_MACTMR:
    339                  Debug( "MACTMR");
    340                break;
    341                case INT_SEC:
    342                  Debug( "SEC");
    343                break;
    344                case INT_SC2:
    345                  Debug( "SC1");
    346                break;
    347                case INT_SC1:
    348                  Debug( "SC1");
    349                break;
    350                case INT_SLEEPTMR:
    351                  Debug( "SLEEPTMR");
    352                break;
    353                case INT_BB:
    354                  Debug( "BB");
    355                break;
    356                case INT_MGMT:
    357                  Debug( "MGMT");
    358                break;
    359                case INT_TIM2:
    360                  Debug( "TIM2");
    361                break;
    362                case INT_TIM1:
    363                  Debug( "TIM1");
    364                break;
    365              }
    366              Debug( "]");
    367            }
    368            #endif //PRINT_ISR_NAME
    369            //]]
    370          }
    371          #endif //INTERRUPT_DEBUGGING
    372          
    373          
    374          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halGetExtendedResetInfo
       0   halGetResetInfo
       8   halInternalClassifyReset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
     132  __vector_table
    1880  cstackMemory
     156  halAppAddressTable
      60  halBootloaderAddressTable
      44  halFixedAddressTable
       6  halGetExtendedResetInfo
       8  halGetResetInfo
      80  halInternalClassifyReset
     148  halResetInfo
      16  resetEventTable
       2  savedResetCause

 
     2 bytes in section .bss
   132 bytes in section .intvec
   122 bytes in section .text
   156 bytes in section AAT
    60 bytes in section BAT
 1 880 bytes in section CSTACK
    44 bytes in section FAT
   148 bytes in section RESETINFO
 
   122 bytes of CODE  memory
   348 bytes of CONST memory
 2 074 bytes of DATA  memory

Errors: none
Warnings: none
