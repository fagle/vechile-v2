###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\hal\sleep.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\hal\sleep.c -D ENABLE_GATEWAY
#        -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\sleep.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\sleep.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\hal\sleep.c
      1          
      2          #include "config.h"
      3          #include "ember.h"
      4          #include "error.h"
      5          #include "hal.h"
      6          #include "serial.h"
      7          
      8          //[[
      9          //This function is responsible for manually putting every piece of the Low
     10          //Voltage domain through a fake reset cycle.  This function is intended to
     11          //mimick a Low Voltage domain reset, with the except being any piece of
     12          //the chip that is enabled via cstartup (since cstartup will not be called
     13          //after this function).

   \                                 In section .text, align 2, keep-with-next
     14          void halInternalMimickLvReset(void)
     15          {
     16            //WBB350FIXME -- This function needs to differentiate between DS1 and DS0!!
     17            
     18            // Only three register blocks keep power across deep sleep:
     19            //  CM_HV, GPIO, SLOW_TIMERS
     20            //
     21            // All other register blocks lose their state across deep sleep and we
     22            // must force a reset of them to mimick a LV reset.  The blocks are listed
     23            // here in a loose order of importance.
     24            
     25            //// NVIC          ////
     26            //ST_CSR
     27            //ST_RVR
     28            //ST_CALVR
     29            //INT_CFGCLR
     30            //INT_PENDCLR
     31            //NVIC_IPR_3to0
     32            //NVIC_IPR_7to4
     33            //NVIC_IPR_11to8
     34            //NVIC_IPR_15to12
     35            //NVIC_IPR_19to16
     36            //SCS_VTOR
     37            //SCS_AIRCR
     38            
     39            //// EVENT         ////
     40            //// CM_LV         ////
     41            //// RAM_CTRL      ////
     42            //// FLASH_CONTROL ////
     43            //// TPIU          ////
     44            //// AUX_ADC       ////
     45            //// SERIAL        ////
     46            //// TMR1          ////
     47            //// TMR2          ////
     48            //// ITM           ////
     49            //// DWT           ////
     50            //// FPB           ////
     51            //// CAL_ADC       ////
     52            //// BASEBAND      ////
     53            //// MAC           ////
     54            //// SECURITY      ////
     55            
     56            //WBB350FIXME -- Fill out this function and complete SLEEP13 testcase to
     57            //               cover this
     58          }
   \                     halInternalMimickLvReset: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     59          
     60          
     61          #ifdef SLEEP_TRACE //WBB350FIXME -- Find a less intrusive technique
     62            extern boolean sleepTraceOn;
     63            extern int8u sleepTraceBuffer[];
     64            extern int8u sleepTraceIndex;
     65            extern int8u sleepTraceDelayPosition;
     66            #define SLEEP_TRACE_ADD_MARKER(byte)                 \
     67              do {                                               \
     68                if(sleepTraceOn) {                               \
     69                  if(sleepTraceIndex<50) {                       \
     70                    sleepTraceBuffer[sleepTraceIndex] = byte;    \
     71                  }                                              \
     72                  sleepTraceIndex++;                             \
     73                }                                                \
     74              } while(0)
     75            #define SLEEP_TRACE_1SEC_DELAY(position)             \
     76              do {                                               \
     77                if(sleepTraceDelayPosition==position) {          \
     78                  int8u delayCnt=(20*1);                         \
     79                  while(delayCnt-->0) {                          \
     80                    halCommonDelayMicroseconds(50000);           \
     81                  }                                              \
     82                }                                                \
     83              } while(0)
     84          #else //SLEEP_TRACE
     85            #define SLEEP_TRACE_ADD_MARKER(byte) do{}while(0)
     86            #define SLEEP_TRACE_1SEC_DELAY(position) do{}while(0)
     87          #endif //SLEEP_TRACE
     88          //]]
     89          
     90          
     91          //We don't have a real register to hold this composite information.
     92          //Pretend we do so halGetWakeInfo can operate like halGetResetInfo.
     93          //This "register" is only ever set by halSleep.
     94          // [31] = WakeInfoValid
     95          // [30] = SleepSkipped
     96          // [29] = CSYSPWRUPREQ
     97          // [28] = CDBGPWRUPREQ
     98          // [27] = WAKE_CORE
     99          // [26] = TIMER_WAKE_WRAP
    100          // [25] = TIMER_WAKE_COMPB
    101          // [24] = TIMER_WAKE_COMPA
    102          // [23:0] = corresponding GPIO activity
    103          #define WAKEINFOVALID_INTERNAL_WAKE_EVENT_BIT 31
    104          #define SLEEPSKIPPED_INTERNAL_WAKE_EVENT_BIT  30
    105          #define CSYSPWRUPREQ_INTERNAL_WAKE_EVENT_BIT  29
    106          #define CDBGPWRUPREQ_INTERNAL_WAKE_EVENT_BIT  28
    107          #define WAKE_CORE_INTERNAL_WAKE_EVENT_BIT     27
    108          #define WRAP_INTERNAL_WAKE_EVENT_BIT          26
    109          #define CMPB_INTERNAL_WAKE_EVENT_BIT          25
    110          #define CMPA_INTERNAL_WAKE_EVENT_BIT          24
    111          //This define shifts events from the PWRUP_EVENT register into the proper
    112          //place in the halInternalWakeEvent variable
    113          #define INTERNAL_WAKE_EVENT_BIT_SHIFT         20
    114          

   \                                 In section .bss, align 4
    115          static int32u halInternalWakeEvent=0;
   \                     halInternalWakeEvent:
   \   00000000                      DS8 4
    116          

   \                                 In section .text, align 2, keep-with-next
    117          int32u halGetWakeInfo(void)
    118          {
    119            return halInternalWakeEvent;
   \                     halGetWakeInfo: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    120          }
    121            

   \                                 In section .text, align 2, keep-with-next
    122          void halInternalSleep(SleepModes sleepMode)
    123          {
   \                     halInternalSleep: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    124            //This code assumes all wake source registers are properly configured.
    125            //As such, it should be called from halSleep() which configues the
    126            //wake sources.
    127            
    128            //The parameter gpioWakeSel is a bitfield composite of the GPIO wake
    129            //sources derived from the 3 ports, indicating which of the 24 GPIO
    130            //are configured as a wake source.
    131            int32u gpioWakeSel  = (GPIO_PAWAKE<<0);
   \   00000004   0x.... 0x....      LDR.W    R9,??DataTable2_1  ;; 0x4000bc08
    132                   gpioWakeSel |= (GPIO_PBWAKE<<8);
    133                   gpioWakeSel |= (GPIO_PCWAKE<<16);
    134            
    135            halInternalWakeEvent = 0; //clear old wake events
    136            
    137            switch ( sleepMode )
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable2_2  ;; 0x4000a014
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable2_3  ;; 0x40000004
   \   00000010   0xB099             SUB      SP,SP,#+100
   \   00000012   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   00000016   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   0000001A   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000001E   0xF8D9 0x2008      LDR      R2,[R9, #+8]
   \   00000022   0xEA41 0x4102      ORR      R1,R1,R2, LSL #+16
   \   00000026   0x9100             STR      R1,[SP, #+0]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable2
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0x6011             STR      R1,[R2, #+0]
   \   00000032   0xF000 0x81EE      BEQ.W    ??halInternalSleep_0
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD019             BEQ.N    ??halInternalSleep_1
   \   0000003A   0xF0C0 0x81EA      BCC.W    ??halInternalSleep_0
   \   0000003E   0x2803             CMP      R0,#+3
   \   00000040   0xF040 0x81FB      BNE.W    ??halInternalSleep_2
    138            {
    139              case SLEEPMODE_POWERSAVE:  // Deep Sleep, with maintaining system time
    140                //The only difference between POWERSAVE and POWERDOWN is the sleep timer.
    141                //POWERDOWN does not use the sleep timer, but POWERSAVE does.  Since
    142                //the rest of the sleep code is identical, POWERSAVE simply needs to
    143                //enable the sleep timer wake sources and then fall into
    144                //POWERDOWN's sleep code.
    145                //
    146                //NOTE: POWERSAVE will simply enable sleep timer wake events and trigger
    147                //the sleep timer ISR as appropriate.  This mode assumes the caller has
    148                //configured the *entire* sleep timer properly.
    149                //POWERSAVE uses the sleep timer interrupts to infer which wake sources
    150                //should be enabled.
    151                if(INT_SLEEPTMRCFG&INT_SLEEPTMRWRAP) {
   \   00000044   0x6C28             LDR      R0,[R5, #+64]
   \   00000046   0x07C0             LSLS     R0,R0,#+31
   \   00000048   0xD503             BPL.N    ??halInternalSleep_3
    152                  WAKE_SEL |= WAKE_SLEEPTMRWRAP;
   \   0000004A   0x69F0             LDR      R0,[R6, #+28]
   \   0000004C   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000050   0x61F0             STR      R0,[R6, #+28]
    153                }
    154                if(INT_SLEEPTMRCFG&INT_SLEEPTMRCMPB) {
   \                     ??halInternalSleep_3: (+1)
   \   00000052   0x6C28             LDR      R0,[R5, #+64]
   \   00000054   0x0740             LSLS     R0,R0,#+29
   \   00000056   0xD503             BPL.N    ??halInternalSleep_4
    155                  WAKE_SEL |= WAKE_SLEEPTMRCMPB;
   \   00000058   0x69F0             LDR      R0,[R6, #+28]
   \   0000005A   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000005E   0x61F0             STR      R0,[R6, #+28]
    156                }
    157                if(INT_SLEEPTMRCFG&INT_SLEEPTMRCMPA) {
   \                     ??halInternalSleep_4: (+1)
   \   00000060   0x6C28             LDR      R0,[R5, #+64]
   \   00000062   0x0780             LSLS     R0,R0,#+30
   \   00000064   0xD503             BPL.N    ??halInternalSleep_1
    158                  WAKE_SEL |= WAKE_SLEEPTMRCMPA;
   \   00000066   0x69F0             LDR      R0,[R6, #+28]
   \   00000068   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000006C   0x61F0             STR      R0,[R6, #+28]
    159                }
    160                //fall into POWERDOWN's sleep code:
    161                
    162              case SLEEPMODE_POWERDOWN:  // Deep Sleep, without maintaining system time
    163                // Interrupts *must* be/stay disabled for DEEP SLEEP operation
    164                // INTERRUPTS_OFF will use BASEPRI to disable all interrupts except
    165                // fault handlers and PendSV.
    166                INTERRUPTS_OFF();
   \                     ??halInternalSleep_1: (+1)
   \   0000006E   0x.... 0x....      BL       _disableBasePri
    167                // This is the point of no return.  From here on out, only the interrupt
    168                // sources available in WAKE_SEL will be captured and propagated across
    169                // deep sleep.
    170                //stick all our saved info onto stack since it's only temporary
    171                {
    172                  boolean restoreWatchdog = halInternalWatchDogEnabled();
   \   00000072   0x.... 0x....      BL       halInternalWatchDogEnabled
   \   00000076   0xF88D 0x005C      STRB     R0,[SP, #+92]
    173                  boolean skipSleep = FALSE;
   \   0000007A   0xF04F 0x0B00      MOV      R11,#+0
    174                  //If the 10kHz is to be disabled during deep sleep (DS2), save its
    175                  //state so it can restored after sleep, and turn it off for sleep.
    176                  #ifdef DISABLE_SLEEPTMR_DEEPSLEEP
    177                    boolean sleepTmrEnabled = SLEEPTMR_CLKEN&SLEEPTMR_CLK10KEN;
    178                    SLEEPTMR_CLKEN &= ~SLEEPTMR_CLK10KEN;
    179                  #endif //DISABLE_SLEEPTMR_DEEPSLEEP
    180                  
    181                  // Only three register blocks keep power across deep sleep:
    182                  //  CM_HV, GPIO, SLOW_TIMERS
    183                  //
    184                  // All other register blocks lose their state across deep sleep:
    185                  //  BASEBAND, MAC, SECURITY, SERIAL, TMR1, TMR2, EVENT, CM_LV, RAM_CTRL,
    186                  //  AUX_ADC, CAL_ADC, FLASH_CONTROL, ITM, DWT, FPB, NVIC, TPIU
    187                  //
    188                  // The sleep code will only save and restore registers where it is
    189                  // meaningful and necessary to do so.  In most cases, there must still
    190                  // be a powerup function to restore proper state.
    191                  //
    192                  // NOTE: halPowerUp() and halPowerDown() will always be called before
    193                  // and after this function.  halPowerDown and halPowerUp should leave
    194                  // the modules in a safe state and then restart the modules.
    195                  // (For example, shutting down and restarting Timer1)
    196                  //
    197                  //----BASEBAND
    198                  //        reinitialized by emberStackPowerUp()
    199                  //----MAC
    200                  //        reinitialized by emberStackPowerUp()
    201                  //----SECURITY
    202                  //        reinitialized by emberStackPowerUp()
    203                  //----SERIAL
    204                  //        reinitialized by halPowerUp() or similar
    205                  //----TMR1
    206                  //        reinitialized by halPowerUp() or similar
    207                  //----TMR2
    208                  //        reinitialized by halPowerUp() or similar
    209                  //----EVENT
    210                  //SRC or FLAG interrupts are not saved or restored
    211                  //MISS interrupts are not saved or restored
    212                  //MAC_RX_INT_MASK - reinitialized by emberStackPowerUp()
    213                  //MAC_TX_INT_MASK - reinitialized by emberStackPowerUp()
    214                  //MAC_TIMER_INT_MASK - reinitialized by emberStackPowerUp()
    215                  //BB_INT_MASK - reinitialized by emberStackPowerUp()
    216                  //SEC_INT_MASK - reinitialized by emberStackPowerUp()
    217                  int32u INT_SLEEPTMRCFG_SAVED = INT_SLEEPTMRCFG_REG;
   \   0000007E   0x6C28             LDR      R0,[R5, #+64]
    218                  int32u INT_MGMTCFG_SAVED = INT_MGMTCFG_REG;
    219                  //INT_TIM1CFG - reinitialized by halPowerUp() or similar
    220                  //INT_TIM2CFG - reinitialized by halPowerUp() or similar
    221                  //INT_SC1CFG - reinitialized by halPowerUp() or similar
    222                  //INT_SC2CFG - reinitialized by halPowerUp() or similar
    223                  //INT_ADCCFG - reinitialized by halPowerUp() or similar
    224                  int32u GPIO_INTCFGA_SAVED = GPIO_INTCFGA_REG;
   \   00000080   0x.... 0x....      LDR.W    R7,??DataTable2_4  ;; 0x4000a814
    225                  int32u GPIO_INTCFGB_SAVED = GPIO_INTCFGB_REG;
    226                  int32u GPIO_INTCFGC_SAVED = GPIO_INTCFGC_REG;
    227                  int32u GPIO_INTCFGD_SAVED = GPIO_INTCFGD_REG;
    228                  //SC1_INTMODE - reinitialized by halPowerUp() or similar
    229                  //SC2_INTMODE - reinitialized by halPowerUp() or similar
    230                  //----CM_LV
    231                  int32u OSC24M_BIASTRIM_SAVED = OSC24M_BIASTRIM_REG;
   \   00000084   0x.... 0x....      LDR.W    R8,??DataTable2_5  ;; 0x40004004
    232                  int32u OSCHF_TUNE_SAVED = OSCHF_TUNE_REG;
    233                  int32u DITHER_DIS_SAVED = DITHER_DIS_REG;
    234                  //OSC24M_CTRL - reinitialized by halPowerUp() or similar
    235                  //CPU_CLKSEL  - reinitialized by halPowerUp() or similar
    236                  //TMR1_CLK_SEL - reinitialized by halPowerUp() or similar
    237                  //TMR2_CLK_SEL - reinitialized by halPowerUp() or similar
    238                  int32u PCTRACE_SEL_SAVED = PCTRACE_SEL_REG;
    239                  //----RAM_CTRL
    240                  int32u MEM_PROT_0_SAVED = MEM_PROT_0_REG;
   \   00000088   0x.... 0x....      LDR.W    R4,??DataTable2_6  ;; 0x40005000
    241                  int32u MEM_PROT_1_SAVED = MEM_PROT_1_REG;
    242                  int32u MEM_PROT_2_SAVED = MEM_PROT_2_REG;
    243                  int32u MEM_PROT_3_SAVED = MEM_PROT_3_REG;
    244                  int32u MEM_PROT_4_SAVED = MEM_PROT_4_REG;
    245                  int32u MEM_PROT_5_SAVED = MEM_PROT_5_REG;
    246                  int32u MEM_PROT_6_SAVED = MEM_PROT_6_REG;
    247                  int32u MEM_PROT_7_SAVED = MEM_PROT_7_REG;
    248                  int32u MEM_PROT_EN_SAVED = MEM_PROT_EN_REG;
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0xe000ed04
    249                  //----AUX_ADC
    250                  //        reinitialized by halPowerUp() or similar
    251                  //----CAL_ADC
    252                  //        reinitialized by emberStackPowerUp()
    253                  //----FLASH_CONTROL
    254                  //        configured on the fly by the flash library
    255                  //----ITM
    256                  //        reinitialized by halPowerUp() or similar
    257                  //----DWT
    258                  //        not used by software on chip
    259                  //----FPB
    260                  //        not used by software on chip
    261                  //----NVIC
    262                  //ST_CSR - fixed, restored by cstartup when exiting deep sleep
    263                  //ST_RVR - fixed, restored by cstartup when exiting deep sleep
    264                  int32u INT_CFGSET_SAVED = INT_CFGSET_REG; //mask against wake sources
    265                  //INT_PENDSET - used below when overlapping interrupts and wake sources
    266                  //NVIC_IPR_3to0 - fixed, restored by cstartup when exiting deep sleep
    267                  //NVIC_IPR_7to4 - fixed, restored by cstartup when exiting deep sleep
    268                  //NVIC_IPR_11to8 - fixed, restored by cstartup when exiting deep sleep
    269                  //NVIC_IPR_15to12 - fixed, restored by cstartup when exiting deep sleep
    270                  //NVIC_IPR_19to16 - fixed, restored by cstartup when exiting deep sleep
    271                  int32u SCS_VTOR_SAVED = SCS_VTOR_REG;
    272                  //SCS_CCR - fixed, restored by cstartup when exiting deep sleep
    273                  //SCS_SHPR_7to4 - fixed, restored by cstartup when exiting deep sleep
    274                  //SCS_SHPR_11to8 - fixed, restored by cstartup when exiting deep sleep
    275                  //SCS_SHPR_15to12 - fixed, restored by cstartup when exiting deep sleep
    276                  //SCS_SHCSR - fixed, restored by cstartup when exiting deep sleep
    277                  //----TPIU
    278                  //        reinitialized by halPowerUp() or similar
    279                  
    280                  //emDebugPowerDown() should have shutdown the DWT/ITM/TPIU already.
    281                  
    282                  //freeze input to the GPIO from LV (alternate output functions freeze)
    283                  EVENT_CTRL = LV_FREEZE;
   \   00000090   0x.... 0x....      LDR.W    R2,??DataTable2_8  ;; 0x4000b408
    284                  //record GPIO state for wake monitoring purposes
    285                  //By having a snapshot of GPIO state, we can figure out after waking
    286                  //up exactly which GPIO could have woken us up.
    287                  //Reading the three IN registers is done separately to avoid warnings
    288                  //about undefined order of volatile access.
    289                  int32u GPIO_IN_SAVED =   GPIO_PAIN;
    290                         GPIO_IN_SAVED |= (GPIO_PBIN<<8);
    291                         GPIO_IN_SAVED |= (GPIO_PCIN<<16);
    292                  //reset the power up events by writing 1 to all bits.
    293                  PWRUP_EVENT = 0xFFFFFFFF;
    294                  //[[
    295                  SLEEP_TRACE_ADD_MARKER('A');
    296                  //]]
    297                  //By clearing the events, the wake up event capturing is activated.
    298                  //At this point we can safely check our interrupt flags since event
    299                  //capturing is now overlapped.  Up to now, interrupts indicate
    300                  //activity, after this point, powerup events indicate activity.
    301                  //If any of the interrupt flags are set, that means we saw a wake event
    302                  //sometime while entering sleep, so we need to skip over sleeping
    303                  //
    304                  //--possible interrupt sources for waking:
    305                  //  IRQA, IRQB, IRQC, IRQD
    306                  //  SleepTMR CMPA, CMPB, Wrap
    307                  //  WAKE_CORE (DebugIsr)
    308                  //
    309                  //check for IRQA interrupt and if IRQA (PB0) is wake source
    310                  if((INT_PENDSET&INT_IRQA) &&
    311                     (GPIO_PBWAKE&PB0) &&
    312                     (WAKE_SEL&GPIO_WAKE)) {
   \   00000094   0x.... 0x....      LDR.W    R10,??DataTable2_9  ;; 0xe000e200
   \   00000098   0x9016             STR      R0,[SP, #+88]
   \   0000009A   0x6C68             LDR      R0,[R5, #+68]
   \   0000009C   0x9015             STR      R0,[SP, #+84]
   \   0000009E   0x6CF8             LDR      R0,[R7, #+76]
   \   000000A0   0x9014             STR      R0,[SP, #+80]
   \   000000A2   0x6D38             LDR      R0,[R7, #+80]
   \   000000A4   0x9013             STR      R0,[SP, #+76]
   \   000000A6   0x6D78             LDR      R0,[R7, #+84]
   \   000000A8   0x9012             STR      R0,[SP, #+72]
   \   000000AA   0x6DB8             LDR      R0,[R7, #+88]
   \   000000AC   0x9011             STR      R0,[SP, #+68]
   \   000000AE   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000B2   0x9010             STR      R0,[SP, #+64]
   \   000000B4   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000000B8   0x900F             STR      R0,[SP, #+60]
   \   000000BA   0xF8D8 0x0014      LDR      R0,[R8, #+20]
   \   000000BE   0x900E             STR      R0,[SP, #+56]
   \   000000C0   0xF8D8 0x0024      LDR      R0,[R8, #+36]
   \   000000C4   0x900D             STR      R0,[SP, #+52]
   \   000000C6   0x6820             LDR      R0,[R4, #+0]
   \   000000C8   0x900C             STR      R0,[SP, #+48]
   \   000000CA   0x6860             LDR      R0,[R4, #+4]
   \   000000CC   0x900B             STR      R0,[SP, #+44]
   \   000000CE   0x68A0             LDR      R0,[R4, #+8]
   \   000000D0   0x900A             STR      R0,[SP, #+40]
   \   000000D2   0x68E0             LDR      R0,[R4, #+12]
   \   000000D4   0x9009             STR      R0,[SP, #+36]
   \   000000D6   0x6920             LDR      R0,[R4, #+16]
   \   000000D8   0x9008             STR      R0,[SP, #+32]
   \   000000DA   0x6960             LDR      R0,[R4, #+20]
   \   000000DC   0x9007             STR      R0,[SP, #+28]
   \   000000DE   0x69A0             LDR      R0,[R4, #+24]
   \   000000E0   0x9006             STR      R0,[SP, #+24]
   \   000000E2   0x69E0             LDR      R0,[R4, #+28]
   \   000000E4   0x9005             STR      R0,[SP, #+20]
   \   000000E6   0x6BA0             LDR      R0,[R4, #+56]
   \   000000E8   0x9004             STR      R0,[SP, #+16]
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable2_10  ;; 0xe000e100
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x6849             LDR      R1,[R1, #+4]
   \   000000F2   0x9103             STR      R1,[SP, #+12]
   \   000000F4   0x2102             MOVS     R1,#+2
   \   000000F6   0x6031             STR      R1,[R6, #+0]
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable2_11  ;; 0x4000b008
   \   000000FC   0x6809             LDR      R1,[R1, #+0]
   \   000000FE   0x6812             LDR      R2,[R2, #+0]
   \   00000100   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable2_12  ;; 0x4000b808
   \   00000108   0x6812             LDR      R2,[R2, #+0]
   \   0000010A   0xEA41 0x4102      ORR      R1,R1,R2, LSL #+16
   \   0000010E   0x9102             STR      R1,[SP, #+8]
   \   00000110   0xF04F 0x31FF      MOV      R1,#-1
   \   00000114   0x6271             STR      R1,[R6, #+36]
   \   00000116   0xF8DA 0x2000      LDR      R2,[R10, #+0]
   \   0000011A   0x....             LDR.N    R1,??DataTable2
   \   0000011C   0x6809             LDR      R1,[R1, #+0]
   \   0000011E   0x04D2             LSLS     R2,R2,#+19
   \   00000120   0xD50A             BPL.N    ??halInternalSleep_5
   \   00000122   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   00000126   0x07D2             LSLS     R2,R2,#+31
   \   00000128   0xD506             BPL.N    ??halInternalSleep_5
   \   0000012A   0x69F2             LDR      R2,[R6, #+28]
   \   0000012C   0x07D2             LSLS     R2,R2,#+31
   \   0000012E   0xBF44             ITT      MI 
   \   00000130   0xF04F 0x0B01      MOVMI    R11,#+1
   \   00000134   0xF441 0x7180      ORRMI    R1,R1,#0x100
    313                    skipSleep = TRUE;
    314                    //log IRQA as a wake event
    315                    halInternalWakeEvent |= BIT(PORTB_PIN(0));
    316                    //[[
    317                    SLEEP_TRACE_ADD_MARKER('B');
    318                    //]]
    319                  }
    320                  //check for IRQB interrupt and if IRQB (PB6) is wake source
    321                  if((INT_PENDSET&INT_IRQB) &&
    322                     (GPIO_PBWAKE&PB6) &&
    323                     (WAKE_SEL&GPIO_WAKE)) {
   \                     ??halInternalSleep_5: (+1)
   \   00000138   0xF8DA 0x2000      LDR      R2,[R10, #+0]
   \   0000013C   0x0492             LSLS     R2,R2,#+18
   \   0000013E   0xD50A             BPL.N    ??halInternalSleep_6
   \   00000140   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   00000144   0x0652             LSLS     R2,R2,#+25
   \   00000146   0xD506             BPL.N    ??halInternalSleep_6
   \   00000148   0x69F2             LDR      R2,[R6, #+28]
   \   0000014A   0x07D2             LSLS     R2,R2,#+31
   \   0000014C   0xBF44             ITT      MI 
   \   0000014E   0xF04F 0x0B01      MOVMI    R11,#+1
   \   00000152   0xF441 0x4180      ORRMI    R1,R1,#0x4000
    324                    skipSleep = TRUE;
    325                    //log IRQB as a wake event
    326                    halInternalWakeEvent |= BIT(PORTB_PIN(6));
    327                    //[[
    328                    SLEEP_TRACE_ADD_MARKER('C');
    329                    //]]
    330                  }
    331                  //check for IRQC interrupt and if IRQC (GPIO_IRQCSEL) is wake source
    332                  if((INT_PENDSET&INT_IRQC) &&
    333                     (gpioWakeSel&BIT(GPIO_IRQCSEL)) &&
    334                     (WAKE_SEL&GPIO_WAKE)) {
   \                     ??halInternalSleep_6: (+1)
   \   00000156   0xF8DA 0x3000      LDR      R3,[R10, #+0]
   \   0000015A   0x2201             MOVS     R2,#+1
   \   0000015C   0x045B             LSLS     R3,R3,#+17
   \   0000015E   0xD50F             BPL.N    ??halInternalSleep_7
   \   00000160   0x9B00             LDR      R3,[SP, #+0]
   \   00000162   0xF8D9 0xC00C      LDR      R12,[R9, #+12]
   \   00000166   0xFA23 0xF30C      LSR      R3,R3,R12
   \   0000016A   0x07DB             LSLS     R3,R3,#+31
   \   0000016C   0xD508             BPL.N    ??halInternalSleep_7
   \   0000016E   0x69F3             LDR      R3,[R6, #+28]
   \   00000170   0x07DB             LSLS     R3,R3,#+31
   \   00000172   0xD505             BPL.N    ??halInternalSleep_7
    335                    skipSleep = TRUE;
    336                    //log IRQC as a wake event
    337                    halInternalWakeEvent |= BIT(GPIO_IRQCSEL);
   \   00000174   0xF8D9 0x300C      LDR      R3,[R9, #+12]
   \   00000178   0xFA02 0xF303      LSL      R3,R2,R3
   \   0000017C   0x4693             MOV      R11,R2
   \   0000017E   0x4319             ORRS     R1,R3,R1
    338                    //[[
    339                    SLEEP_TRACE_ADD_MARKER('D');
    340                    //]]
    341                  }
    342                  //check for IRQD interrupt and if IRQD (GPIO_IRQDSEL) is wake source
    343                  if((INT_PENDSET&INT_IRQD) &&
    344                     (gpioWakeSel&BIT(GPIO_IRQDSEL)) &&
    345                     (WAKE_SEL&GPIO_WAKE)) {
   \                     ??halInternalSleep_7: (+1)
   \   00000180   0xF8DA 0x3000      LDR      R3,[R10, #+0]
   \   00000184   0x041B             LSLS     R3,R3,#+16
   \   00000186   0xD50E             BPL.N    ??halInternalSleep_8
   \   00000188   0x9B00             LDR      R3,[SP, #+0]
   \   0000018A   0xF8D9 0xC010      LDR      R12,[R9, #+16]
   \   0000018E   0xFA23 0xF30C      LSR      R3,R3,R12
   \   00000192   0x07DB             LSLS     R3,R3,#+31
   \   00000194   0xD507             BPL.N    ??halInternalSleep_8
   \   00000196   0x69F3             LDR      R3,[R6, #+28]
   \   00000198   0x07DB             LSLS     R3,R3,#+31
   \   0000019A   0xD504             BPL.N    ??halInternalSleep_8
    346                    skipSleep = TRUE;
    347                    //log IRQD as a wake event
    348                    halInternalWakeEvent |= BIT(GPIO_IRQDSEL);
   \   0000019C   0xF8D9 0x3010      LDR      R3,[R9, #+16]
   \   000001A0   0x4693             MOV      R11,R2
   \   000001A2   0x409A             LSLS     R2,R2,R3
   \   000001A4   0x4311             ORRS     R1,R2,R1
    349                    //[[
    350                    SLEEP_TRACE_ADD_MARKER('E');
    351                    //]]
    352                  }
    353                  //check for SleepTMR CMPA interrupt and if SleepTMR CMPA is wake source
    354                  if((INT_SLEEPTMR&INT_SLEEPTMRCMPA) && (WAKE_SEL&WAKE_SLEEPTMRCMPA)) {
    355                    skipSleep = TRUE;
    356                    //log SleepTMR CMPA as a wake event
    357                    halInternalWakeEvent |= BIT32(CMPA_INTERNAL_WAKE_EVENT_BIT);
    358                    //[[
    359                    SLEEP_TRACE_ADD_MARKER('F');
    360                    //]]
    361                  }
    362                  //check for SleepTMR CMPB interrupt and if SleepTMR CMPB is wake source
    363                  if((INT_SLEEPTMR&INT_SLEEPTMRCMPB) && (WAKE_SEL&WAKE_SLEEPTMRCMPB)) {
    364                    skipSleep = TRUE;
    365                    //log SleepTMR CMPB as a wake event
    366                    halInternalWakeEvent |= BIT32(CMPB_INTERNAL_WAKE_EVENT_BIT);
    367                    //[[
    368                    SLEEP_TRACE_ADD_MARKER('G');
    369                    //]]
    370                  }
    371                  //check for SleepTMR WRAP interrupt and if SleepTMR WRAP is wake source
    372                  if((INT_SLEEPTMR&INT_SLEEPTMRWRAP) && (WAKE_SEL&WAKE_SLEEPTMRWRAP)) {
    373                    skipSleep = TRUE;
    374                    //log SleepTMR WRAP as a wake event
    375                    halInternalWakeEvent |= BIT32(WRAP_INTERNAL_WAKE_EVENT_BIT);
    376                    //[[
    377                    SLEEP_TRACE_ADD_MARKER('H');
    378                    //]]
    379                  }
    380                  //check for Debug interrupt and if WAKE_CORE is wake source
    381                  if((INT_PENDSET&INT_DEBUG) && (WAKE_SEL&WAKE_WAKE_CORE)) {
   \                     ??halInternalSleep_8: (+1)
   \   000001A6   0xF8DA 0x2000      LDR      R2,[R10, #+0]
   \   000001AA   0x03D2             LSLS     R2,R2,#+15
   \   000001AC   0xD506             BPL.N    ??halInternalSleep_9
   \   000001AE   0x69F2             LDR      R2,[R6, #+28]
   \   000001B0   0x0612             LSLS     R2,R2,#+24
   \   000001B2   0xBF44             ITT      MI 
   \   000001B4   0xF04F 0x0B01      MOVMI    R11,#+1
   \   000001B8   0xF041 0x6100      ORRMI    R1,R1,#0x8000000
    382                    skipSleep = TRUE;
    383                    //log WAKE_CORE as a wake event
    384                    halInternalWakeEvent |= BIT32(WAKE_CORE_INTERNAL_WAKE_EVENT_BIT);
    385                    //[[
    386                    SLEEP_TRACE_ADD_MARKER('I');
   \                     ??halInternalSleep_9: (+1)
   \   000001BC   0x....             LDR.N    R2,??DataTable2
   \   000001BE   0x6011             STR      R1,[R2, #+0]
    387                    //]]
    388                  }
    389          
    390                  //only propagate across deep sleep the interrupts that are both
    391                  //enabled and possible wake sources
    392                  {
    393                    int32u wakeSourceInterruptMask = 0;
   \   000001C0   0x2100             MOVS     R1,#+0
   \   000001C2   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   000001C6   0x07D2             LSLS     R2,R2,#+31
    394                    
    395                    if(GPIO_PBWAKE&PB0) {
    396                      wakeSourceInterruptMask |= INT_IRQA;
    397                      //[[
    398                      SLEEP_TRACE_ADD_MARKER('J');
    399                      //]]
    400                    }
    401                    if(GPIO_PBWAKE&PB6) {
   \   000001C8   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   000001CC   0xBF48             IT       MI 
   \   000001CE   0xF44F 0x5180      MOVMI    R1,#+4096
   \   000001D2   0x0652             LSLS     R2,R2,#+25
    402                      wakeSourceInterruptMask |= INT_IRQB;
    403                      //[[
    404                      SLEEP_TRACE_ADD_MARKER('K');
    405                      //]]
    406                    }
    407                    if(gpioWakeSel&BIT(GPIO_IRQCSEL)) {
   \   000001D4   0x9A00             LDR      R2,[SP, #+0]
   \   000001D6   0xF8D9 0x300C      LDR      R3,[R9, #+12]
   \   000001DA   0xBF48             IT       MI 
   \   000001DC   0xF441 0x5100      ORRMI    R1,R1,#0x2000
   \   000001E0   0x40DA             LSRS     R2,R2,R3
   \   000001E2   0x07D2             LSLS     R2,R2,#+31
    408                      wakeSourceInterruptMask |= INT_IRQC;
    409                      //[[
    410                      SLEEP_TRACE_ADD_MARKER('L');
    411                      //]]
    412                    }
    413                    if(gpioWakeSel&BIT(GPIO_IRQDSEL)) {
   \   000001E4   0x9A00             LDR      R2,[SP, #+0]
   \   000001E6   0xF8D9 0x3010      LDR      R3,[R9, #+16]
   \   000001EA   0xBF48             IT       MI 
   \   000001EC   0xF441 0x4180      ORRMI    R1,R1,#0x4000
   \   000001F0   0x40DA             LSRS     R2,R2,R3
   \   000001F2   0x07D2             LSLS     R2,R2,#+31
    414                      wakeSourceInterruptMask |= INT_IRQD;
    415                      //[[
    416                      SLEEP_TRACE_ADD_MARKER('M');
    417                      //]]
    418                    }
    419                    if( (WAKE_SEL&WAKE_SLEEPTMRCMPA) ||
    420                        (WAKE_SEL&WAKE_SLEEPTMRCMPB) ||
    421                        (WAKE_SEL&WAKE_SLEEPTMRWRAP) ) {
   \   000001F4   0x69F2             LDR      R2,[R6, #+28]
   \   000001F6   0xBF48             IT       MI 
   \   000001F8   0xF441 0x4100      ORRMI    R1,R1,#0x8000
   \   000001FC   0x06D2             LSLS     R2,R2,#+27
   \   000001FE   0xD405             BMI.N    ??halInternalSleep_10
   \   00000200   0x69F2             LDR      R2,[R6, #+28]
   \   00000202   0x0692             LSLS     R2,R2,#+26
   \   00000204   0xD402             BMI.N    ??halInternalSleep_10
   \   00000206   0x69F2             LDR      R2,[R6, #+28]
   \   00000208   0x0652             LSLS     R2,R2,#+25
   \   0000020A   0xD501             BPL.N    ??halInternalSleep_11
    422                      wakeSourceInterruptMask |= INT_SLEEPTMR;
   \                     ??halInternalSleep_10: (+1)
   \   0000020C   0xF041 0x0110      ORR      R1,R1,#0x10
    423                      //[[
    424                      SLEEP_TRACE_ADD_MARKER('N');
    425                      //]]
    426                    }
    427                    if(WAKE_SEL&WAKE_WAKE_CORE) {
   \                     ??halInternalSleep_11: (+1)
   \   00000210   0x69F2             LDR      R2,[R6, #+28]
   \   00000212   0x0612             LSLS     R2,R2,#+24
   \   00000214   0xBF48             IT       MI 
   \   00000216   0xF441 0x3180      ORRMI    R1,R1,#0x10000
    428                      wakeSourceInterruptMask |= INT_DEBUG;
    429                      //[[
    430                      SLEEP_TRACE_ADD_MARKER('O');
    431                      //]]
    432                    }
    433                    
    434                    INT_CFGSET_SAVED &= wakeSourceInterruptMask;
   \   0000021A   0x4008             ANDS     R0,R1,R0
   \   0000021C   0x9001             STR      R0,[SP, #+4]
    435                  }
    436                  
    437                  //[[
    438                  //Since it is possible to perform a deep sleep cycle without actually
    439                  //leaving the running state (a wake source was captured while
    440                  //entering deep sleep or CSYSPWRUPREQ remained set), it is possible for
    441                  //the application to perform a sleep cycle and not have the entire
    442                  //low voltage domain reset.  In theory, the application is responsible
    443                  //for cleanly shutting down the entire chip and then bringing
    444                  //it back up around a sleep cycle (stack and hal sleep/powerup).  In
    445                  //practice, though, the safest thing to do is shut down the entire
    446                  //low voltage domain while entering deep sleep.  By doing this,
    447                  //we ensure the application always has the same sleep cycle operation
    448                  //and does not experience accidental peripheral operation that should
    449                  //not have survived.
    450                  halInternalMimickLvReset();
    451                  //]]
    452                  
    453                  //disable watchdog while sleeping (since we can't reset it asleep)
    454                  halInternalDisableWatchDog(MICRO_DISABLE_WATCH_DOG_KEY);
   \   0000021E   0x20A5             MOVS     R0,#+165
   \   00000220   0x.... 0x....      BL       halInternalDisableWatchDog
    455                  
    456                  //The chip is not allowed to enter a deep sleep mode (which could
    457                  //cause a core reset cycle) while CSYSPWRUPREQ is set.  CSYSPWRUPREQ
    458                  //indicates that the debugger is trying to access sections of the
    459                  //chip that would get reset during deep sleep.  Therefore, a reset
    460                  //cycle could very easily cause the debugger to error and we don't
    461                  //want that.  While the power management state machine will stall
    462                  //if CSYSPWRUPREQ is set (to avoid the situation just described),
    463                  //in this stalled state the chip will not be responsive to wake
    464                  //events.  To be sensitive to wake events, we must handle them in
    465                  //software instead.  To accomplish this, we request that the
    466                  //CSYSPWRUPACK be inhibited (which will indicate the debugger is not
    467                  //connected).  But, we cannot induce deep sleep until CSYSPWRUPREQ/ACK
    468                  //go low and these are under the debuggers control, so we must stall
    469                  //and wait here.  If there is a wake event during this time, break
    470                  //out and wake like normal.  If the ACK eventually clears,
    471                  //we can proceed into deep sleep.  The CSYSPWRUPACK_INHIBIT
    472                  //functionality will hold off the debugger (by holding off the ACK)
    473                  //until we are safely past and out of deep sleep.  The power management
    474                  //state machine then becomes responsible for clearing
    475                  //CSYSPWRUPACK_INHIBIT and responding to a CSYSPWRUPREQ with a
    476                  //CSYSPWRUPACK at the right/safe time.
    477                  CSYSPWRUPACK_INHIBIT = CSYSPWRUPACK_INHIBIT_CSYSPWRUPACK_INHIBIT;
   \   00000224   0x2001             MOVS     R0,#+1
   \   00000226   0x63F0             STR      R0,[R6, #+60]
    478                  {
    479                    //Use a local copy of WAKE_SEL to avoid warnings from the compiler
    480                    //about order of volatile accesses
    481                    int32u wakeSel = WAKE_SEL;
   \   00000228   0x69F0             LDR      R0,[R6, #+28]
    482                    //stall until a wake event or CSYSPWRUPREQ/ACK clears
    483                    while( (CSYSPWRUPACK_STATUS) && (!(PWRUP_EVENT&wakeSel)) ) {}
   \                     ??halInternalSleep_12: (+1)
   \   0000022A   0x6BB1             LDR      R1,[R6, #+56]
   \   0000022C   0xB111             CBZ.N    R1,??halInternalSleep_13
   \   0000022E   0x6A71             LDR      R1,[R6, #+36]
   \   00000230   0x4201             TST      R1,R0
   \   00000232   0xD0FA             BEQ.N    ??halInternalSleep_12
    484                    //if there was a wake event, allow CSYSPWRUPACK and skip sleep
    485                    if(PWRUP_EVENT&wakeSel) {
   \                     ??halInternalSleep_13: (+1)
   \   00000234   0x6A71             LDR      R1,[R6, #+36]
   \   00000236   0x4201             TST      R1,R0
   \   00000238   0xF000 0x80CE      BEQ.W    ??halInternalSleep_14
    486                      CSYSPWRUPACK_INHIBIT = CSYSPWRUPACK_INHIBIT_RESET;
   \   0000023C   0x2000             MOVS     R0,#+0
   \   0000023E   0x63F0             STR      R0,[R6, #+60]
    487                      skipSleep = TRUE;
    488                    }
    489                  }
    490                  
    491                  
    492                  //[[
    493                  SLEEP_TRACE_ADD_MARKER('P');
    494                  //]]
    495                  if(!skipSleep) {
    496                    //[[
    497                    SLEEP_TRACE_ADD_MARKER('Q');
    498                    //]]
    499                    //FogBugz 7283 states that we must switch to the OSCHF when entering
    500                    //deep sleep since using the 24MHz XTAL could result in RAM
    501                    //corruption.  This switch must occur at least 2*24MHz cycles before
    502                    //sleeping.
    503                    //FogBugz 8858 states that we cannot go into deep-sleep when the
    504                    //chip is clocked with the 24MHz XTAL with a duty cycle as low as
    505                    //70/30 since this causes power_down generation timing to fail.
    506                    OSC24M_CTRL &= ~OSC24M_CTRL_OSC24M_SEL;
    507                    //If DS12 needs to be forced regardless of state, clear
    508                    //REGEN_DSLEEP here.  This is hugely dangerous and
    509                    //should only be done in very controlled chip tests.
    510                    SCS_SCR |= SCS_SCR_SLEEPDEEP;      //enable deep sleep
    511                    extern volatile boolean halPendSvSaveContext;
    512                    halPendSvSaveContext = 1;          //1 means save context
    513                    //The INTERRUPTS_OFF used at the beginning of this function set
    514                    //BASEPRI such that the only interrupts that will fire are faults
    515                    //and PendSV.  Trigger PendSV now to induce a context save.
    516                    SCS_ICSR |= SCS_ICSR_PENDSVSET;    //pend the context save and Dsleep
    517                    //Since the interrupt will not fire immediately it is possible to
    518                    //execute a few lines of code.  To stay halted in this spot until the
    519                    //WFI instruction, spin on the context flag (which will get cleared
    520                    //during the startup sequence when restoring context).
    521                    while(halPendSvSaveContext) {}
    522                    //I AM ASLEEP.  WHEN EXECUTION RESUMES, CSTARTUP WILL RESTORE TO HERE
    523                  } else {
    524                    //Record the fact that we skipped sleep
    525                    halInternalWakeEvent |= BIT32(SLEEPSKIPPED_INTERNAL_WAKE_EVENT_BIT);
   \                     ??halInternalSleep_15: (+1)
   \   00000240   0x....             LDR.N    R0,??DataTable2
   \   00000242   0x....             LDR.N    R1,??DataTable2
   \   00000244   0x6800             LDR      R0,[R0, #+0]
   \   00000246   0xF040 0x4080      ORR      R0,R0,#0x40000000
   \   0000024A   0x6008             STR      R0,[R1, #+0]
    526                  }
    527                  //[[
    528                  SLEEP_TRACE_1SEC_DELAY(1);
    529                  //]]
    530                  //If this was a true deep sleep, we would have executed cstartup and
    531                  //PRIMASK would be set right now.  If we skipped sleep, PRIMASK is not
    532                  //set so we explicitely set it to guarantee the powerup sequence
    533                  //works cleanly and consistently with respect to interrupt
    534                  //dispatching and enabling.
    535                  _setPriMask();
   \                     ??halInternalSleep_16: (+1)
   \   0000024C   0x.... 0x....      BL       _setPriMask
    536                  
    537                  //[[
    538                  SLEEP_TRACE_ADD_MARKER('a');
    539                  //]]
    540                  
    541                  //immediately restore the registers we saved before sleeping
    542                  //so IRQ and SleepTMR capture can be reenabled as quickly as possible
    543                  //this is safe because our global interrupts are still disabled
    544                  //other registers will be restored later
    545                  INT_SLEEPTMRCFG_REG = INT_SLEEPTMRCFG_SAVED;
   \   00000250   0x9816             LDR      R0,[SP, #+88]
    546                  INT_MGMTCFG_REG = INT_MGMTCFG_SAVED;
    547                  GPIO_INTCFGA_REG = GPIO_INTCFGA_SAVED;
    548                  GPIO_INTCFGB_REG = GPIO_INTCFGB_SAVED;
    549                  GPIO_INTCFGC_REG = GPIO_INTCFGC_SAVED;
    550                  GPIO_INTCFGD_REG = GPIO_INTCFGD_SAVED;
    551                  OSC24M_BIASTRIM_REG = OSC24M_BIASTRIM_SAVED;
    552                  OSCHF_TUNE_REG = OSCHF_TUNE_SAVED;
    553                  DITHER_DIS_REG = DITHER_DIS_SAVED;
    554                  PCTRACE_SEL_REG = PCTRACE_SEL_SAVED;
    555                  MEM_PROT_0_REG = MEM_PROT_0_SAVED;
    556                  MEM_PROT_1_REG = MEM_PROT_1_SAVED;
    557                  MEM_PROT_2_REG = MEM_PROT_2_SAVED;
    558                  MEM_PROT_3_REG = MEM_PROT_3_SAVED;
    559                  MEM_PROT_4_REG = MEM_PROT_4_SAVED;
    560                  MEM_PROT_5_REG = MEM_PROT_5_SAVED;
    561                  MEM_PROT_6_REG = MEM_PROT_6_SAVED;
    562                  MEM_PROT_7_REG = MEM_PROT_7_SAVED;
    563                  MEM_PROT_EN_REG = MEM_PROT_EN_SAVED;
    564                  INT_CFGSET_REG = INT_CFGSET_SAVED;
   \   00000252   0x....             LDR.N    R1,??DataTable2_10  ;; 0xe000e100
   \   00000254   0x6428             STR      R0,[R5, #+64]
   \   00000256   0x9815             LDR      R0,[SP, #+84]
   \   00000258   0x6468             STR      R0,[R5, #+68]
   \   0000025A   0x9814             LDR      R0,[SP, #+80]
   \   0000025C   0x64F8             STR      R0,[R7, #+76]
   \   0000025E   0x9813             LDR      R0,[SP, #+76]
   \   00000260   0x6538             STR      R0,[R7, #+80]
   \   00000262   0x9812             LDR      R0,[SP, #+72]
   \   00000264   0x6578             STR      R0,[R7, #+84]
   \   00000266   0x9811             LDR      R0,[SP, #+68]
   \   00000268   0x65B8             STR      R0,[R7, #+88]
   \   0000026A   0x9810             LDR      R0,[SP, #+64]
   \   0000026C   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \   00000270   0x980F             LDR      R0,[SP, #+60]
   \   00000272   0xF8C8 0x0004      STR      R0,[R8, #+4]
   \   00000276   0x980E             LDR      R0,[SP, #+56]
   \   00000278   0xF8C8 0x0014      STR      R0,[R8, #+20]
   \   0000027C   0x980D             LDR      R0,[SP, #+52]
   \   0000027E   0xF8C8 0x0024      STR      R0,[R8, #+36]
   \   00000282   0x980C             LDR      R0,[SP, #+48]
   \   00000284   0x6020             STR      R0,[R4, #+0]
   \   00000286   0x980B             LDR      R0,[SP, #+44]
   \   00000288   0x6060             STR      R0,[R4, #+4]
   \   0000028A   0x980A             LDR      R0,[SP, #+40]
   \   0000028C   0x60A0             STR      R0,[R4, #+8]
   \   0000028E   0x9809             LDR      R0,[SP, #+36]
   \   00000290   0x60E0             STR      R0,[R4, #+12]
   \   00000292   0x9808             LDR      R0,[SP, #+32]
   \   00000294   0x6120             STR      R0,[R4, #+16]
   \   00000296   0x9807             LDR      R0,[SP, #+28]
   \   00000298   0x6160             STR      R0,[R4, #+20]
   \   0000029A   0x9806             LDR      R0,[SP, #+24]
   \   0000029C   0x61A0             STR      R0,[R4, #+24]
   \   0000029E   0x9805             LDR      R0,[SP, #+20]
   \   000002A0   0x61E0             STR      R0,[R4, #+28]
   \   000002A2   0x9804             LDR      R0,[SP, #+16]
   \   000002A4   0x63A0             STR      R0,[R4, #+56]
   \   000002A6   0x9801             LDR      R0,[SP, #+4]
   \   000002A8   0x6008             STR      R0,[R1, #+0]
    565                  SCS_VTOR_REG = SCS_VTOR_SAVED;
   \   000002AA   0x....             LDR.N    R1,??DataTable2_7  ;; 0xe000ed04
   \   000002AC   0x9803             LDR      R0,[SP, #+12]
   \   000002AE   0x6048             STR      R0,[R1, #+4]
    566                  
    567                  //Clear the interrupt flags for all wake sources.  This
    568                  //is necessary because if we don't execute an actual deep sleep cycle
    569                  //the interrupt flags will never be cleared.  By clearing the flags,
    570                  //we always mimick a real deep sleep as closely as possible and
    571                  //guard against any accidental interrupt triggering coming out
    572                  //of deep sleep.  (The interrupt dispatch code coming out of sleep
    573                  //is responsible for translating wake events into interrupt events,
    574                  //and if we don't clear interrupt flags here it's possible for an
    575                  //interrupt to trigger even if it wasn't the true wake event.)
    576                  INT_SLEEPTMRFLAG = INT_SLEEPTMRCMPA;
   \   000002B0   0x2002             MOVS     R0,#+2
   \   000002B2   0x6028             STR      R0,[R5, #+0]
    577                  INT_SLEEPTMRFLAG = INT_SLEEPTMRCMPB;
   \   000002B4   0x2004             MOVS     R0,#+4
   \   000002B6   0x6028             STR      R0,[R5, #+0]
    578                  INT_SLEEPTMRFLAG = INT_SLEEPTMRWRAP;
   \   000002B8   0x2001             MOVS     R0,#+1
   \   000002BA   0x6028             STR      R0,[R5, #+0]
    579                  INT_GPIOFLAG = INT_IRQAFLAG;
   \   000002BC   0x6038             STR      R0,[R7, #+0]
    580                  INT_GPIOFLAG = INT_IRQBFLAG;
   \   000002BE   0x2002             MOVS     R0,#+2
   \   000002C0   0x6038             STR      R0,[R7, #+0]
    581                  INT_GPIOFLAG = INT_IRQCFLAG;
   \   000002C2   0x2004             MOVS     R0,#+4
   \   000002C4   0x6038             STR      R0,[R7, #+0]
    582                  INT_GPIOFLAG = INT_IRQDFLAG;
   \   000002C6   0x2008             MOVS     R0,#+8
   \   000002C8   0x6038             STR      R0,[R7, #+0]
    583                  //we have to delay a brief moment to let the SleepTMR and GPIO flag
    584                  //writes to cross the LV/HV domain and get cleared before we clear
    585                  //the NVIC top level
    586                  halCommonDelayMicroseconds(1);
   \   000002CA   0x2001             MOVS     R0,#+1
   \   000002CC   0x.... 0x....      BL       halCommonDelayMicroseconds
    587                  //WAKE_CORE/INT_DEBUG and INT_IRQx is cleared by INT_PENDCLR below
    588                  INT_PENDCLR = 0xFFFFFFFF;
   \   000002D0   0x....             LDR.N    R1,??DataTable2_13  ;; 0xe000e280
    589                  
    590                  //Now that we're awake, normal interrupts are operational again
    591                  //Take a snapshot of the new GPIO state and the EVENT register to
    592                  //record our wake event
    593                  int32u GPIO_IN_NEW =   GPIO_PAIN;
    594                         GPIO_IN_NEW |= (GPIO_PBIN<<8);
    595                         GPIO_IN_NEW |= (GPIO_PCIN<<16);
    596                  //Only operate on power up events that are also wake events.  Power
    597                  //up events will always trigger like an interrupt flag, so we have
    598                  //to check them against events that are enabled for waking. (This is
    599                  //a two step process because we're accessing two volatile values.)
    600                  int32u powerUpEvents = PWRUP_EVENT;
    601                         powerUpEvents &= WAKE_SEL;
    602                  halInternalWakeEvent |= ((GPIO_IN_SAVED^GPIO_IN_NEW)&gpioWakeSel);
    603                  halInternalWakeEvent |= ((powerUpEvents & 
    604                                            (PWRUP_CSYSPWRUPREQ_MASK  |
    605                                             PWRUP_CDBGPWRUPREQ_MASK  |
    606                                             PWRUP_WAKECORE_MASK      |
    607                                             PWRUP_SLEEPTMRWRAP_MASK  |
    608                                             PWRUP_SLEEPTMRCOMPB_MASK |
    609                                             PWRUP_SLEEPTMRCOMPA_MASK ))
    610                                                    <<INTERNAL_WAKE_EVENT_BIT_SHIFT);
   \   000002D2   0x....             LDR.N    R3,??DataTable2
   \   000002D4   0xF04F 0x30FF      MOV      R0,#-1
   \   000002D8   0x6008             STR      R0,[R1, #+0]
   \   000002DA   0x....             LDR.N    R1,??DataTable2_8  ;; 0x4000b408
   \   000002DC   0x....             LDR.N    R0,??DataTable2_11  ;; 0x4000b008
   \   000002DE   0x6800             LDR      R0,[R0, #+0]
   \   000002E0   0x680C             LDR      R4,[R1, #+0]
   \   000002E2   0x....             LDR.N    R1,??DataTable2_12  ;; 0x4000b808
   \   000002E4   0xF8D1 0xE000      LDR      LR,[R1, #+0]
   \   000002E8   0x6A71             LDR      R1,[R6, #+36]
   \   000002EA   0x69F2             LDR      R2,[R6, #+28]
   \   000002EC   0xF8DD 0x8008      LDR      R8,[SP, #+8]
   \   000002F0   0x681B             LDR      R3,[R3, #+0]
   \   000002F2   0xEA40 0x2004      ORR      R0,R0,R4, LSL #+8
   \   000002F6   0xEA40 0x400E      ORR      R0,R0,LR, LSL #+16
   \   000002FA   0x9C00             LDR      R4,[SP, #+0]
   \   000002FC   0xEA80 0x0008      EOR      R0,R0,R8
   \   00000300   0x4011             ANDS     R1,R2,R1
   \   00000302   0x4020             ANDS     R0,R4,R0
   \   00000304   0xF401 0x717C      AND      R1,R1,#0x3F0
   \   00000308   0xEA40 0x5001      ORR      R0,R0,R1, LSL #+20
   \   0000030C   0x....             LDR.N    R1,??DataTable2
   \   0000030E   0x4318             ORRS     R0,R0,R3
   \   00000310   0x6008             STR      R0,[R1, #+0]
    611                  //at this point wake events are fully captured and interrupts have
    612                  //taken over handling all new events
    613                  
    614                  //[[
    615                  SLEEP_TRACE_1SEC_DELAY(2);
    616                  SLEEP_TRACE_ADD_MARKER('b');
    617                  //]]
    618                  
    619                  //Bring limited interrupts back online.  INTERRUPTS_OFF will use
    620                  //BASEPRI to disable all interrupts except fault handlers and PendSV.
    621                  //PRIMASK is still set though (global interrupt disable) so we need
    622                  //to clear that next.
    623                  INTERRUPTS_OFF();
   \   00000312   0x.... 0x....      BL       _disableBasePri
    624                  
    625                  //[[
    626                  SLEEP_TRACE_ADD_MARKER('c');
    627                  //]]
    628                  
    629                  //Now that BASEPRI has taken control of interrupt enable/disable,
    630                  //we can clear PRIMASK to reenable global interrupt operation.
    631                  _clearPriMask();
   \   00000316   0x.... 0x....      BL       _clearPriMask
    632                  
    633                  //[[
    634                  SLEEP_TRACE_ADD_MARKER('d');
    635                  //]]
    636                  
    637                  //wake events are saved and interrupts are back on track,
    638                  //disable gpio freeze
    639                  EVENT_CTRL = EVENT_CTRL_RESET;
   \   0000031A   0x2000             MOVS     R0,#+0
   \   0000031C   0x6030             STR      R0,[R6, #+0]
    640                  
    641                  //restart watchdog if it was running when we entered sleep
    642                  //do this before dispatching interrupts while we still have tight
    643                  //control of code execution
    644                  if(restoreWatchdog) {
   \   0000031E   0xF89D 0x005C      LDRB     R0,[SP, #+92]
   \   00000322   0xB108             CBZ.N    R0,??halInternalSleep_17
    645                    halInternalEnableWatchDog();
   \   00000324   0x.... 0x....      BL       halInternalEnableWatchDog
    646                  }
    647                  
    648                  //[[
    649                  SLEEP_TRACE_ADD_MARKER('e');
    650                  //]]
    651                  
    652                  //Restore the 10kHz if it was enabled when entering deep sleep
    653                  #ifdef DISABLE_SLEEPTMR_DEEPSLEEP
    654                    if(sleepTmrEnabled) {
    655                      SLEEPTMR_CLKEN |= SLEEPTMR_CLK10KEN;
    656                    }
    657                  #endif //DISABLE_SLEEPTMR_DEEPSLEEP
    658                  
    659                  //[[
    660                  SLEEP_TRACE_ADD_MARKER('f');
    661                  //]]
    662                  
    663                  //Pend any interrupts associated with deep sleep wake sources.  The
    664                  //restoration of INT_CFGSET above and the changing of BASEPRI below
    665                  //is responsible for proper dispatching of interrupts at the end of
    666                  //halSleep.
    667                  //
    668                  //
    669                  //The WAKE_CORE wake source triggers a Debug Interrupt.  If INT_DEBUG
    670                  //interrupt is enabled and WAKE_CORE is a wake event, then pend the
    671                  //Debug interrupt (using the wake_core bit).
    672                  if( (INT_CFGSET&INT_DEBUG) &&
    673                      (halInternalWakeEvent&BIT(WAKE_CORE_INTERNAL_WAKE_EVENT_BIT)) ) {
   \                     ??halInternalSleep_17: (+1)
   \   00000328   0x....             LDR.N    R0,??DataTable2
   \   0000032A   0x....             LDR.N    R1,??DataTable2_10  ;; 0xe000e100
   \   0000032C   0x6800             LDR      R0,[R0, #+0]
   \   0000032E   0x6809             LDR      R1,[R1, #+0]
   \   00000330   0x03C9             LSLS     R1,R1,#+15
   \   00000332   0xD503             BPL.N    ??halInternalSleep_18
   \   00000334   0x0101             LSLS     R1,R0,#+4
   \   00000336   0xBF44             ITT      MI 
   \   00000338   0x2120             MOVMI    R1,#+32
   \   0000033A   0x6231             STRMI    R1,[R6, #+32]
    674                    WAKE_CORE = WAKE_CORE_FIELD;
    675                    //[[
    676                    SLEEP_TRACE_ADD_MARKER('g');
    677                    //]]
    678                  }
    679                  //
    680                  //
    681                  //The SleepTMR CMPA is linked to a real ISR.  If the SleepTMR CMPA
    682                  //interrupt is enabled and CMPA is a wake event, then pend the CMPA
    683                  //interrupt (force the second level interrupt).
    684                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRCMPA) &&
    685                      (halInternalWakeEvent&BIT(CMPA_INTERNAL_WAKE_EVENT_BIT)) ) {
   \                     ??halInternalSleep_18: (+1)
   \   0000033C   0x6C29             LDR      R1,[R5, #+64]
   \   0000033E   0x0789             LSLS     R1,R1,#+30
   \   00000340   0xD503             BPL.N    ??halInternalSleep_19
   \   00000342   0x01C1             LSLS     R1,R0,#+7
   \   00000344   0xBF44             ITT      MI 
   \   00000346   0x2102             MOVMI    R1,#+2
   \   00000348   0x60E9             STRMI    R1,[R5, #+12]
    686                    INT_SLEEPTMRFORCE = INT_SLEEPTMRCMPA;
    687                    //[[
    688                    SLEEP_TRACE_ADD_MARKER('h');
    689                    //]]
    690                  }
    691                  //
    692                  //The SleepTMR CMPB is linked to a real ISR.  If the SleepTMR CMPB
    693                  //interrupt is enabled and CMPB is a wake event, then pend the CMPB
    694                  //interrupt (force the second level interrupt).
    695                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRCMPB) &&
    696                      (halInternalWakeEvent&BIT(CMPB_INTERNAL_WAKE_EVENT_BIT)) ) {
   \                     ??halInternalSleep_19: (+1)
   \   0000034A   0x6C29             LDR      R1,[R5, #+64]
   \   0000034C   0x0749             LSLS     R1,R1,#+29
   \   0000034E   0xD503             BPL.N    ??halInternalSleep_20
   \   00000350   0x0181             LSLS     R1,R0,#+6
   \   00000352   0xBF44             ITT      MI 
   \   00000354   0x2104             MOVMI    R1,#+4
   \   00000356   0x60E9             STRMI    R1,[R5, #+12]
    697                    INT_SLEEPTMRFORCE = INT_SLEEPTMRCMPB;
    698                    //[[
    699                    SLEEP_TRACE_ADD_MARKER('i');
    700                    //]]
    701                  }
    702                  //
    703                  //The SleepTMR WRAP is linked to a real ISR.  If the SleepTMR WRAP
    704                  //interrupt is enabled and WRAP is a wake event, then pend the WRAP
    705                  //interrupt (force the second level interrupt).
    706                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRWRAP) &&
    707                      (halInternalWakeEvent&BIT(WRAP_INTERNAL_WAKE_EVENT_BIT)) ) {
   \                     ??halInternalSleep_20: (+1)
   \   00000358   0x6C29             LDR      R1,[R5, #+64]
   \   0000035A   0x07C9             LSLS     R1,R1,#+31
   \   0000035C   0xD503             BPL.N    ??halInternalSleep_21
   \   0000035E   0x0141             LSLS     R1,R0,#+5
   \   00000360   0xBF44             ITT      MI 
   \   00000362   0x2101             MOVMI    R1,#+1
   \   00000364   0x60E9             STRMI    R1,[R5, #+12]
    708                    INT_SLEEPTMRFORCE = INT_SLEEPTMRWRAP;
    709                    //[[
    710                    SLEEP_TRACE_ADD_MARKER('j');
    711                    //]]
    712                  }
    713                  //
    714                  //
    715                  //The four IRQs are linked to a real ISR.  If any of the four IRQs
    716                  //triggered, then pend their ISR
    717                  //
    718                  //If the IRQA interrupt mode is enabled and IRQA (PB0) is wake
    719                  //event, then pend the interrupt.
    720                  if( ((GPIO_INTCFGA&GPIO_INTMOD)!=0) &&
    721                      (halInternalWakeEvent&BIT(PORTB_PIN(0))) ) {
   \                     ??halInternalSleep_21: (+1)
   \   00000366   0x6CF9             LDR      R1,[R7, #+76]
   \   00000368   0xF011 0x0FE0      TST      R1,#0xE0
   \   0000036C   0xD005             BEQ.N    ??halInternalSleep_22
   \   0000036E   0x05C1             LSLS     R1,R0,#+23
   \   00000370   0xBF44             ITT      MI 
   \   00000372   0xF44F 0x5180      MOVMI    R1,#+4096
   \   00000376   0xF8CA 0x1000      STRMI    R1,[R10, #+0]
    722                    INT_PENDSET = INT_IRQA;
    723                    //[[
    724                    SLEEP_TRACE_ADD_MARKER('k');
    725                    //]]
    726                  }
    727                  //If the IRQB interrupt mode is enabled and IRQB (PB6) is wake
    728                  //event, then pend the interrupt.
    729                  if( ((GPIO_INTCFGB&GPIO_INTMOD)!=0) &&
    730                      (halInternalWakeEvent&BIT(PORTB_PIN(6))) ) {
   \                     ??halInternalSleep_22: (+1)
   \   0000037A   0x6D39             LDR      R1,[R7, #+80]
   \   0000037C   0xF011 0x0FE0      TST      R1,#0xE0
   \   00000380   0xD005             BEQ.N    ??halInternalSleep_23
   \   00000382   0x0441             LSLS     R1,R0,#+17
   \   00000384   0xBF44             ITT      MI 
   \   00000386   0xF44F 0x5100      MOVMI    R1,#+8192
   \   0000038A   0xF8CA 0x1000      STRMI    R1,[R10, #+0]
    731                    INT_PENDSET = INT_IRQB;
    732                    //[[
    733                    SLEEP_TRACE_ADD_MARKER('l');
    734                    //]]
    735                  }
    736                  //If the IRQC interrupt mode is enabled and IRQC (GPIO_IRQCSEL) is wake
    737                  //event, then pend the interrupt.
    738                  if( ((GPIO_INTCFGC&GPIO_INTMOD)!=0) &&
    739                      (halInternalWakeEvent&BIT(GPIO_IRQCSEL)) ) {
   \                     ??halInternalSleep_23: (+1)
   \   0000038E   0x6D79             LDR      R1,[R7, #+84]
   \   00000390   0xF011 0x0FE0      TST      R1,#0xE0
   \   00000394   0xD009             BEQ.N    ??halInternalSleep_24
   \   00000396   0xF8D9 0x100C      LDR      R1,[R9, #+12]
   \   0000039A   0xFA20 0xF201      LSR      R2,R0,R1
   \   0000039E   0x07D1             LSLS     R1,R2,#+31
   \   000003A0   0xBF44             ITT      MI 
   \   000003A2   0xF44F 0x4180      MOVMI    R1,#+16384
   \   000003A6   0xF8CA 0x1000      STRMI    R1,[R10, #+0]
    740                    INT_PENDSET = INT_IRQC;
    741                    //[[
    742                    SLEEP_TRACE_ADD_MARKER('m');
    743                    //]]
    744                  }
    745                  //If the IRQD interrupt mode is enabled and IRQD (GPIO_IRQDSEL) is wake
    746                  //event, then pend the interrupt.
    747                  if( ((GPIO_INTCFGD&GPIO_INTMOD)!=0) &&
    748                      (halInternalWakeEvent&BIT(GPIO_IRQDSEL)) ) {
   \                     ??halInternalSleep_24: (+1)
   \   000003AA   0x6DB9             LDR      R1,[R7, #+88]
   \   000003AC   0xF011 0x0FE0      TST      R1,#0xE0
   \   000003B0   0xD009             BEQ.N    ??halInternalSleep_25
   \   000003B2   0xF8D9 0x1010      LDR      R1,[R9, #+16]
   \   000003B6   0xFA20 0xF201      LSR      R2,R0,R1
   \   000003BA   0x07D1             LSLS     R1,R2,#+31
   \   000003BC   0xBF44             ITT      MI 
   \   000003BE   0xF44F 0x4100      MOVMI    R1,#+32768
   \   000003C2   0xF8CA 0x1000      STRMI    R1,[R10, #+0]
    749                    INT_PENDSET = INT_IRQD;
    750                    //[[
    751                    SLEEP_TRACE_ADD_MARKER('n');
    752                    //]]
    753                  }
    754                }
    755                
    756                //[[
    757                SLEEP_TRACE_1SEC_DELAY(3);
    758                SLEEP_TRACE_ADD_MARKER('o');
    759                //]]
    760                
    761                //Mark the wake events valid just before exiting
    762                halInternalWakeEvent |= BIT32(WAKEINFOVALID_INTERNAL_WAKE_EVENT_BIT);
   \                     ??halInternalSleep_25: (+1)
   \   000003C6   0x....             LDR.N    R1,??DataTable2
   \   000003C8   0xF040 0x4000      ORR      R0,R0,#0x80000000
   \   000003CC   0x6008             STR      R0,[R1, #+0]
    763                
    764                //We are now reconfigured, appropriate ISRs are pended, and ready to go,
    765                //so enable interrupts!
    766                INTERRUPTS_ON();
   \   000003CE   0xB019             ADD      SP,SP,#+100
   \   000003D0   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000003D4   0x.... 0x....      B.W      _enableBasePri
   \                     ??halInternalSleep_14: (+1)
   \   000003D8   0xF1BB 0x0F00      CMP      R11,#+0
   \   000003DC   0xF47F 0xAF30      BNE.W    ??halInternalSleep_15
   \   000003E0   0xF8D8 0x0018      LDR      R0,[R8, #+24]
   \   000003E4   0x....             LDR.N    R1,??DataTable2_7  ;; 0xe000ed04
   \   000003E6   0x....             LDR.N    R2,??DataTable2_7  ;; 0xe000ed04
   \   000003E8   0x0840             LSRS     R0,R0,#+1
   \   000003EA   0x0040             LSLS     R0,R0,#+1
   \   000003EC   0xF8C8 0x0018      STR      R0,[R8, #+24]
   \   000003F0   0x....             LDR.N    R0,??DataTable2_7  ;; 0xe000ed04
   \   000003F2   0x68C0             LDR      R0,[R0, #+12]
   \   000003F4   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000003F8   0x60C8             STR      R0,[R1, #+12]
   \   000003FA   0x2101             MOVS     R1,#+1
   \   000003FC   0x....             LDR.N    R0,??DataTable2_14
   \   000003FE   0x7001             STRB     R1,[R0, #+0]
   \   00000400   0x....             LDR.N    R1,??DataTable2_7  ;; 0xe000ed04
   \   00000402   0x6809             LDR      R1,[R1, #+0]
   \   00000404   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \   00000408   0x6011             STR      R1,[R2, #+0]
   \                     ??halInternalSleep_26: (+1)
   \   0000040A   0x7801             LDRB     R1,[R0, #+0]
   \   0000040C   0x2900             CMP      R1,#+0
   \   0000040E   0xD1FC             BNE.N    ??halInternalSleep_26
   \   00000410   0xE71C             B.N      ??halInternalSleep_16
    767                
    768                //[[
    769                SLEEP_TRACE_ADD_MARKER('p');
    770                //]]
    771                
    772                break; //and deep sleeping is done!
    773              
    774              case SLEEPMODE_RESERVED:   // treat like idling
    775              case SLEEPMODE_IDLE:       // Idle, wakes on any interrupt
    776                {
    777                  boolean restoreWatchdog = halInternalWatchDogEnabled();
   \                     ??halInternalSleep_0: (+1)
   \   00000412   0x.... 0x....      BL       halInternalWatchDogEnabled
   \   00000416   0x4604             MOV      R4,R0
    778                  //disable watchdog while sleeping (since we can't reset it asleep)
    779                  halInternalDisableWatchDog(MICRO_DISABLE_WATCH_DOG_KEY);
   \   00000418   0x20A5             MOVS     R0,#+165
   \   0000041A   0x.... 0x....      BL       halInternalDisableWatchDog
    780                  //Normal ATOMIC/INTERRUPTS_OFF/INTERRUPTS_ON uses the BASEPRI mask
    781                  //to juggle priority levels so that the fault handlers can always
    782                  //be serviced.  But, the WFI instruction is only capable of
    783                  //working with the PRIMASK bit.  Therefore, we have to switch from
    784                  //using BASEPRI to PRIMASK to keep interrupts disabled so that the
    785                  //WFI can return on an interrupt
    786                  //Globally disable interrupts with PRIMASK
    787                  _setPriMask();
   \   0000041E   0x.... 0x....      BL       _setPriMask
    788                  //Bring the BASEPRI up to 0 to allow interrupts (but still disabled
    789                  //with PRIMASK)
    790                  INTERRUPTS_ON();
   \   00000422   0x.... 0x....      BL       _enableBasePri
    791                  //an internal function call is made here instead of injecting the
    792                  //"WFI" assembly instruction because injecting assembly code will
    793                  //cause the compiler's optimizer to reduce efficiency.
    794                  halInternalIdleSleep();
   \   00000426   0x.... 0x....      BL       halInternalIdleSleep
    795                  //The WFI instruction does not actually clear the PRIMASK bit, it
    796                  //only allows the PRIMASK bit to be bypassed.  Therefore, we must
    797                  //manually clear PRIMASK to reenable all interrupts.
    798                  _clearPriMask();
   \   0000042A   0x.... 0x....      BL       _clearPriMask
    799                  //restart watchdog if it was running when we entered sleep
    800                  if(restoreWatchdog)
   \   0000042E   0xB124             CBZ.N    R4,??halInternalSleep_2
    801                    halInternalEnableWatchDog();
   \   00000430   0xB019             ADD      SP,SP,#+100
   \   00000432   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000436   0x.... 0x....      B.W      halInternalEnableWatchDog
    802                }
    803                break;
    804                
    805            }
    806          }
   \                     ??halInternalSleep_2: (+1)
   \   0000043A   0xB019             ADD      SP,SP,#+100
   \   0000043C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    807          

   \                                 In section .text, align 2, keep-with-next
    808          void halSleep(SleepModes sleepMode)
    809          {
    810            //use the defines found in the board file to choose our wakeup source(s)
    811            WAKE_SEL = 0;  //start with no wake sources
   \                     halSleep: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable2_15  ;; 0x40000020
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x600A             STR      R2,[R1, #+0]
    812            //configure all GPIO wake sources
    813            GPIO_PAWAKE = ( (WAKE_ON_PA0 << PA0_BIT) |
    814                            (WAKE_ON_PA1 << PA1_BIT) |
    815                            (WAKE_ON_PA2 << PA2_BIT) |
    816                            (WAKE_ON_PA3 << PA3_BIT) |
    817                            (WAKE_ON_PA4 << PA4_BIT) |
    818                            (WAKE_ON_PA5 << PA5_BIT) |
    819                            (WAKE_ON_PA6 << PA6_BIT) |
    820                            (WAKE_ON_PA7 << PA7_BIT) );
   \   00000006   0x2380             MOVS     R3,#+128
   \   00000008   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4000bc08
   \   0000000A   0x6013             STR      R3,[R2, #+0]
    821            GPIO_PBWAKE = ( (WAKE_ON_PB0 << PB0_BIT) |
    822                            (WAKE_ON_PB1 << PB1_BIT) |
    823                            (WAKE_ON_PB2 << PB2_BIT) |
    824                            (WAKE_ON_PB3 << PB3_BIT) |
    825                            (WAKE_ON_PB4 << PB4_BIT) |
    826                            (WAKE_ON_PB5 << PB5_BIT) |
    827                            (WAKE_ON_PB6 << PB6_BIT) |
    828                            (WAKE_ON_PB7 << PB7_BIT) );
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x6053             STR      R3,[R2, #+4]
    829            GPIO_PCWAKE = ( (WAKE_ON_PC0 << PC0_BIT) |
    830                            (WAKE_ON_PC1 << PC1_BIT) |
    831                            (WAKE_ON_PC2 << PC2_BIT) |
    832                            (WAKE_ON_PC3 << PC3_BIT) |
    833                            (WAKE_ON_PC4 << PC4_BIT) |
    834                            (WAKE_ON_PC5 << PC5_BIT) |
    835                            (WAKE_ON_PC6 << PC6_BIT) |
    836                            (WAKE_ON_PC7 << PC7_BIT) );
   \   00000010   0x6093             STR      R3,[R2, #+8]
    837            
    838            //if any of the GPIO wakeup monitor bits are set, enable the top level
    839            //GPIO wakeup monitor
    840            if((GPIO_PAWAKE)||(GPIO_PBWAKE)||(GPIO_PCWAKE)) {
   \   00000012   0x6813             LDR      R3,[R2, #+0]
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xBF04             ITT      EQ 
   \   00000018   0x6853             LDREQ    R3,[R2, #+4]
   \   0000001A   0x2B00             CMPEQ    R3,#+0
   \   0000001C   0xD101             BNE.N    ??halSleep_0
   \   0000001E   0x6892             LDR      R2,[R2, #+8]
   \   00000020   0xB11A             CBZ.N    R2,??halSleep_1
    841              WAKE_SEL |= GPIO_WAKE;
   \                     ??halSleep_0: (+1)
   \   00000022   0x680A             LDR      R2,[R1, #+0]
   \   00000024   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000028   0x600A             STR      R2,[R1, #+0]
    842            }
    843            //always wakeup when the debugger is connected
    844            WAKE_SEL |= WAKE_CDBGPWRUPREQ;
   \                     ??halSleep_1: (+1)
   \   0000002A   0x680A             LDR      R2,[R1, #+0]
   \   0000002C   0xF442 0x7280      ORR      R2,R2,#0x100
   \   00000030   0x600A             STR      R2,[R1, #+0]
    845            //always wakeup when the debugger attempts to access the chip
    846            WAKE_SEL |= WAKE_CSYSPWRUPREQ;
   \   00000032   0x680A             LDR      R2,[R1, #+0]
   \   00000034   0xF442 0x7200      ORR      R2,R2,#0x200
   \   00000038   0x600A             STR      R2,[R1, #+0]
    847            //always wakeup when the debug channel attempts to access the chip
    848            WAKE_SEL |= WAKE_WAKE_CORE;
   \   0000003A   0x680A             LDR      R2,[R1, #+0]
   \   0000003C   0xF042 0x0280      ORR      R2,R2,#0x80
   \   00000040   0x600A             STR      R2,[R1, #+0]
    849            //the timer wakeup sources are enabled below in POWERSAVE, if needed
    850            
    851            //wake sources are configured so do the actual sleeping
    852            halInternalSleep(sleepMode);
   \   00000042   0x....             B.N      halInternalSleep
    853          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     halInternalWakeEvent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4000BC08         DC32     0x4000bc08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4000A014         DC32     0x4000a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40004004         DC32     0x40004004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40005000         DC32     0x40005000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x4000B008         DC32     0x4000b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4000B808         DC32     0x4000b808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     halPendSvSaveContext

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x40000020         DC32     0x40000020
    854          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halGetWakeInfo
       0   halInternalMimickLvReset
     136   halInternalSleep
       136   -> _clearPriMask
       136   -> _disableBasePri
       136   -> _enableBasePri
       136   -> _setPriMask
       136   -> halCommonDelayMicroseconds
       136   -> halInternalDisableWatchDog
       136   -> halInternalEnableWatchDog
       136   -> halInternalIdleSleep
       136   -> halInternalWatchDogEnabled
       0   halSleep
         0   -> halInternalSleep


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       8  halGetWakeInfo
       2  halInternalMimickLvReset
    1088  halInternalSleep
       4  halInternalWakeEvent
      68  halSleep

 
     4 bytes in section .bss
 1 230 bytes in section .text
 
 1 230 bytes of CODE memory
     4 bytes of DATA memory

Errors: none
Warnings: none
