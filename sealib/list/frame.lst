###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        25/Oct/2015  14:11:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\projects\VehicleV2\trunk\lamps\sealib\lamp\frame.c
#    Command line =  
#        D:\projects\VehicleV2\trunk\lamps\sealib\lamp\frame.c -D
#        ENABLE_GATEWAY -D NULL_BTL -D CORTEXM3_EM357 -lC
#        D:\projects\VehicleV2\trunk\lamps\sealib\list\ --diag_suppress Pa050
#        -o D:\projects\VehicleV2\trunk\lamps\sealib\obj\ --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\hal\cortexm3\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\stack\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\util\ -I
#        D:\projects\VehicleV2\trunk\lamps\sealib\..\inc\car\ -Ohz
#        --use_c++_inline
#    List file    =  D:\projects\VehicleV2\trunk\lamps\sealib\list\frame.lst
#    Object file  =  D:\projects\VehicleV2\trunk\lamps\sealib\obj\frame.o
#
###############################################################################

D:\projects\VehicleV2\trunk\lamps\sealib\lamp\frame.c
      1          #include <stdarg.h>
      2          #include "config.h"
      3          #include "ember-types.h"
      4          #include "error.h"
      5          #include "hal.h"
      6          #include "serial.h"
      7          #include "frame.h"
      8          
      9          /////////////////////////////////////////////////////////////////////////////////////////////
     10          //
     11          //* 函数名      : static pframe sea_getframe ( struct frm_t frm, pframe_t ptr )
     12          //* 功能        : receiving frame 
     13          //* 输入参数    : struct frm_t frm, pframe_t ptr
     14          //* 输出参数    : pointer of frame_t
     15          //* 修改记录    : 无
     16          //* 备注        : 无
     17          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     18          static pframe_t sea_getframe ( struct frm_t * frm, pframe_t ptr )
     19          {
   \                     sea_getframe: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     20              if (frm->out != frm->in)
   \   00000006   0x78A0             LDRB     R0,[R4, #+2]
   \   00000008   0x7861             LDRB     R1,[R4, #+1]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD010             BEQ.N    ??sea_getframe_0
     21              {
     22                  memcpy(ptr, &frm->list[frm->out], sizeof(frame_t));   
   \   0000000E   0x2244             MOVS     R2,#+68
   \   00000010   0xFB02 0x4000      MLA      R0,R2,R0,R4
   \   00000014   0xF100 0x0184      ADD      R1,R0,#+132
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
     23                  frm->out++;
   \   0000001E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
     24                  if(frm->out>=FRAMEBUFLEN)
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xBFA8             IT       GE 
   \   00000028   0x2000             MOVGE    R0,#+0
     25                      frm->out = 0x00;
   \   0000002A   0x70A0             STRB     R0,[R4, #+2]
     26                  return ptr;
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}
     27              }
     28              return NULL;
   \                     ??sea_getframe_0: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     29          }
     30          
     31          /////////////////////////////////////////////////////////////////////////////////////////////
     32          //
     33          //* 函数名      : static void sea_printframe ( struct frm_t * frm, const char * str, ... )
     34          //* 功能        : print frame infmation
     35          //* 输入参数    : struct frm_t * frm, const char * str, ...
     36          //* 输出参数    : 无
     37          //* 修改记录    : 无
     38          //* 备注        : 无
     39          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     40          static void sea_printframe ( struct frm_t * frm, const char * str, ... )
     41          {
   \                     sea_printframe: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB538             PUSH     {R3-R5,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     42              va_list v_list;
     43              u8   *  ptr;
     44              
     45              memset(frm->buf, 0x00, FRPRINTBUF);
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x1D20             ADDS     R0,R4,#+4
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
     46              va_start(v_list, str);     
   \   00000010   0xAA04             ADD      R2,SP,#+16
     47              vsprintf((char *)frm->buf, str, v_list); 
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x1D20             ADDS     R0,R4,#+4
   \   00000016   0x.... 0x....      BL       vsprintf
     48              va_end(v_list);
     49              
     50              ptr = frm->buf;
   \   0000001A   0x1D25             ADDS     R5,R4,#+4
   \   0000001C   0xE004             B.N      ??sea_printframe_0
     51              while (*ptr)
     52              {
     53                 frm->sendbyte(*ptr);
   \                     ??sea_printframe_1: (+1)
   \   0000001E   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \   00000022   0xF8D4 0x11AC      LDR      R1,[R4, #+428]
   \   00000026   0x4788             BLX      R1
     54                 ptr ++;
     55              }
   \                     ??sea_printframe_0: (+1)
   \   00000028   0x7828             LDRB     R0,[R5, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD1F7             BNE.N    ??sea_printframe_1
     56          }
   \   0000002E   0xBC31             POP      {R0,R4,R5}
   \   00000030   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
     57          
     58          /////////////////////////////////////////////////////////////////////////////////////////////
     59          //
     60          //* 函数名      : static bool sea_putstring ( struct frm_t frm, u8 cmd, u16 road, u8 * str, u8 len )
     61          //* 功能        : data output
     62          //* 输入参数    : struct frm_t frm, u8 cmd, u16 road, u8 * str, u8 len
     63          //* 输出参数    : 无
     64          //* 修改记录    : 无
     65          //* 备注        : 无
     66          //*------------------------------------------------*/
     67          static u8 sea_putstring ( struct frm_t * frm, u8 cmd, u16 road, u8 * str, u8 len )
     68          {
     69              u8   ch, sum;
     70          
     71              if (!len)   return 0x01;
     72          
     73              frm->sendbyte(PREFIX);    // PRT_DATA);
     74              frm->sendbyte(cmd);
     75              frm->sendbyte(len);      
     76              frm->sendbyte((road >> 0x08) & 0xff);
     77              frm->sendbyte(road & 0xff);
     78              sum = cmd + len + (road & 0xff) + ((road >> 0x08) & 0xff);  // len + cmd + (road >> 0x08) & 0xff + road & 0xff;
     79              for (ch = 0x00; ch < len; ch ++)
     80              {
     81          	frm->sendbyte(str[ch]);
     82                  sum += (str[ch] & 0xff);
     83              }
     84              frm->sendbyte(sum);
     85              return 0x01;
     86          }
     87          
     88          
     89          /////////////////////////////////////////////////////////////////////////////////////////////
     90          //
     91          //* 函数名      : s16 sea_putframe ( struct frm_t * frm, u8 cmd, u16 road, u8 len, u8 * str )
     92          //* 功能        : string data output
     93          //* 输入参数    : struct frm_t * frm, u8 cmd, u16 road, u8 len, u8 * str
     94          //* 输出参数    : 无
     95          //* 修改记录    : 无
     96          //* 备注        : 无
     97          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     98          s16 sea_putframe ( struct frm_t * frm, u8 cmd, u16 road, u8 len, u8 * str )
     99          {
   \                     sea_putframe: (+1)
   \   00000000   0xE92D 0x47FA      PUSH     {R1,R3-R10,LR}
    100              u8 * ptr = (u8 *)str;
   \   00000004   0xF8DD 0x9028      LDR      R9,[SP, #+40]
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0x4615             MOV      R5,R2
   \   0000000C   0x461E             MOV      R6,R3
   \   0000000E   0xE030             B.N      ??sea_putframe_0
    101              u8   size;
    102          
    103              while (len)
    104              {
    105                  size = len > FRDATASIZE ? FRDATASIZE : len;
   \                     ??sea_putframe_1: (+1)
   \   00000010   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   00000014   0x2068             MOVS     R0,#+104
   \   00000016   0x4788             BLX      R1
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   00000020   0x4788             BLX      R1
   \   00000022   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x4788             BLX      R1
   \   0000002A   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   0000002E   0x0A28             LSRS     R0,R5,#+8
   \   00000030   0x4788             BLX      R1
   \   00000032   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   00000036   0xB2E8             UXTB     R0,R5
   \   00000038   0x4788             BLX      R1
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x1828             ADDS     R0,R5,R0
   \   00000040   0xEB00 0x2015      ADD      R0,R0,R5, LSR #+8
   \   00000044   0x1827             ADDS     R7,R4,R0
   \   00000046   0xB2FF             UXTB     R7,R7
   \   00000048   0xF04F 0x0A00      MOV      R10,#+0
   \                     ??sea_putframe_2: (+1)
   \   0000004C   0xF81A 0x0009      LDRB     R0,[R10, R9]
   \   00000050   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   00000054   0x4788             BLX      R1
   \   00000056   0xF81A 0x0009      LDRB     R0,[R10, R9]
   \   0000005A   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   0000005E   0x19C7             ADDS     R7,R0,R7
   \   00000060   0x45A2             CMP      R10,R4
   \   00000062   0xB2FF             UXTB     R7,R7
   \   00000064   0xDBF2             BLT.N    ??sea_putframe_2
   \   00000066   0xF8D8 0x11AC      LDR      R1,[R8, #+428]
   \   0000006A   0x4638             MOV      R0,R7
   \   0000006C   0x4788             BLX      R1
    106                  sea_putstring(frm, cmd, road, ptr, size);
    107                  ptr += size;
   \   0000006E   0x44A1             ADD      R9,R4,R9
    108                  len -= size;
   \   00000070   0x1B36             SUBS     R6,R6,R4
   \                     ??sea_putframe_0: (+1)
   \   00000072   0xB2F6             UXTB     R6,R6
   \   00000074   0xB126             CBZ.N    R6,??sea_putframe_3
   \   00000076   0x2E41             CMP      R6,#+65
   \   00000078   0xBFAC             ITE      GE 
   \   0000007A   0x2440             MOVGE    R4,#+64
   \   0000007C   0x4634             MOVLT    R4,R6
   \   0000007E   0xE7C7             B.N      ??sea_putframe_1
    109              }
    110              return PRT_OK;
   \                     ??sea_putframe_3: (+1)
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    111          }
    112          
    113          /////////////////////////////////////////////////////////////////////////////////////////////
    114          //
    115          //* 函数名      : static s16 sea_putbyte ( struct frm_t frm, u8 cmd, u16 road, u8 value )
    116          //* 功能        : send byte data output
    117          //* 输入参数    : struct frm_t frm, u8 cmd, u16 road, u8 value
    118          //* 输出参数    : 无
    119          //* 修改记录    : 无
    120          //* 备注        : 无
    121          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    122          static s16 sea_putframebyte ( struct frm_t * frm, u8 cmd, u16 road, u8 value )
    123          {
   \                     sea_putframebyte: (+1)
   \   00000000   0xB508             PUSH     {R3,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    124              return sea_putframe(frm, cmd, road, 0x01, &value);
   \   00000004   0xAB02             ADD      R3,SP,#+8
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0x.... 0x....      BL       sea_putframe
   \   0000000E   0xBD0E             POP      {R1-R3,PC}       ;; return
    125          }
    126          
    127          /////////////////////////////////////////////////////////////////////////////////////////////
    128          //
    129          //* 函数名      : static s16 sea_putshort ( struct frm_t frm, u8 cmd, u16 road, u16 value )
    130          //* 功能        : send short data output
    131          //* 输入参数    : struct frm_t frm, u8 cmd, u16 road, u16 value
    132          //* 输出参数    : 无
    133          //* 修改记录    : 无
    134          //* 备注        : 无
    135          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    136          static s16 sea_putframeshort ( struct frm_t * frm, u8 cmd, u16 road, u16 value )
    137          {
   \                     sea_putframeshort: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    138              u8 str[0x02];
    139          
    140              str[0x00] = (value >> 0x08) & 0xff;
    141              str[0x01] = value & 0xff;
   \   00000002   0xF88D 0x3005      STRB     R3,[SP, #+5]
   \   00000006   0x0A1C             LSRS     R4,R3,#+8
    142          
    143              return sea_putframe(frm, cmd, road, 0x02, str);
   \   00000008   0xAB01             ADD      R3,SP,#+4
   \   0000000A   0x9300             STR      R3,[SP, #+0]
   \   0000000C   0xF88D 0x4004      STRB     R4,[SP, #+4]
   \   00000010   0x2302             MOVS     R3,#+2
   \   00000012   0x....             B.N      ?Subroutine0
    144          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       sea_putframe
   \   00000004   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    145          
    146          /////////////////////////////////////////////////////////////////////////////////////////////
    147          //
    148          //* 函数名      : static s16 sea_putlong ( struct frm_t frm, u8 cmd, u16 road, u32 value )
    149          //* 功能        : send long data output
    150          //* 输入参数    : struct frm_t frm, u8 cmd, u16 road, u32 value
    151          //* 输出参数    : 无
    152          //* 修改记录    : 无
    153          //* 备注        : 无
    154          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    155          static s16 sea_putframelong ( struct frm_t * frm, u8 cmd, u16 road, u32 value )
    156          {
   \                     sea_putframelong: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    157              u8 str[0x04];
    158          
    159              str[0x00] = (value >> 0x18) & 0xff;
   \   00000002   0x0E1C             LSRS     R4,R3,#+24
   \   00000004   0xF88D 0x4004      STRB     R4,[SP, #+4]
    160              str[0x01] = (value >> 0x10) & 0xff;
    161              str[0x02] = (value >> 0x08) & 0xff;
    162              str[0x03] = value & 0xff;
   \   00000008   0xF88D 0x3007      STRB     R3,[SP, #+7]
   \   0000000C   0x0C1C             LSRS     R4,R3,#+16
   \   0000000E   0xF88D 0x4005      STRB     R4,[SP, #+5]
   \   00000012   0x0A1C             LSRS     R4,R3,#+8
    163              
    164              return sea_putframe(frm, cmd, road, 0x04, str);
   \   00000014   0xAB01             ADD      R3,SP,#+4
   \   00000016   0x9300             STR      R3,[SP, #+0]
   \   00000018   0xF88D 0x4006      STRB     R4,[SP, #+6]
   \   0000001C   0x2304             MOVS     R3,#+4
   \   0000001E                      REQUIRE ?Subroutine0
   \   0000001E                      ;; // Fall through to label ?Subroutine0
    165          }
    166          
    167          /////////////////////////////////////////////////////////////////////////////////////////////
    168          //
    169          //* 函数名      : static void sea_recvbyte ( struct frm_t * frm, u8 ch )
    170          //* 功能        : receive byte from uart in sepcial protocol
    171          //* 输入参数    : struct frm_t frm, u8 ch
    172          //* 输出参数    : 无
    173          //* 修改记录    : 无
    174          //* 备注        : 无
    175          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    176          static void sea_recvbyte ( struct frm_t * frm, u8 ch )
    177          {
   \                     sea_recvbyte: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    178              static u8 sum;
    179          
    180          //    UartSendByte(CONSOLE, ch);
    181              if (ch == PREFIX && frm->state != PRT_DATA)
   \   00000002   0x7802             LDRB     R2,[R0, #+0]
   \   00000004   0x2968             CMP      R1,#+104
   \   00000006   0xD105             BNE.N    ??sea_recvbyte_0
   \   00000008   0x2A3C             CMP      R2,#+60
   \   0000000A   0xD005             BEQ.N    ??sea_recvbyte_1
    182              {
    183          	frm->idx   = 0x00;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x70C1             STRB     R1,[R0, #+3]
    184                  frm->state = PRT_DATA;
   \   00000010   0x213C             MOVS     R1,#+60
   \   00000012   0xE047             B.N      ??sea_recvbyte_2
    185              }
    186              else if (frm->state == PRT_DATA)
   \                     ??sea_recvbyte_0: (+1)
   \   00000014   0x2A3C             CMP      R2,#+60
   \   00000016   0xD144             BNE.N    ??sea_recvbyte_3
    187              {
    188                  if (frm->idx == 0x00)
   \                     ??sea_recvbyte_1: (+1)
   \   00000018   0x78C5             LDRB     R5,[R0, #+3]
   \   0000001A   0x....             LDR.N    R2,??DataTable1
   \   0000001C   0xB955             CBNZ.N   R5,??sea_recvbyte_4
    189                  {
    190                      frm->list[frm->in].cmd = ch; 
   \   0000001E   0x7843             LDRB     R3,[R0, #+1]
   \   00000020   0x2444             MOVS     R4,#+68
   \   00000022   0xFB04 0x0303      MLA      R3,R4,R3,R0
   \   00000026   0xF883 0x1084      STRB     R1,[R3, #+132]
    191                      frm->idx ++;
   \   0000002A   0x78C3             LDRB     R3,[R0, #+3]
   \   0000002C   0x1C5B             ADDS     R3,R3,#+1
   \   0000002E   0x70C3             STRB     R3,[R0, #+3]
    192                      sum = ch;
   \   00000030   0x7011             STRB     R1,[R2, #+0]
   \   00000032   0xBDF0             POP      {R4-R7,PC}
    193                  }
    194                  else 
    195                  {
    196                      if (frm->idx == 0x01)
   \                     ??sea_recvbyte_4: (+1)
   \   00000034   0x7813             LDRB     R3,[R2, #+0]
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xD108             BNE.N    ??sea_recvbyte_5
    197                      {
    198                          if (ch > MAXFRMLEN)
   \   0000003A   0x2945             CMP      R1,#+69
   \   0000003C   0xDA31             BGE.N    ??sea_recvbyte_3
    199                          {
    200                              frm->state = PRT_IDLE;
    201                              return;
    202                          }
    203                          frm->list[frm->in].len = ch;
   \   0000003E   0x7844             LDRB     R4,[R0, #+1]
   \   00000040   0x2544             MOVS     R5,#+68
   \   00000042   0xFB05 0x0404      MLA      R4,R5,R4,R0
   \   00000046   0x3484             ADDS     R4,R4,#+132
   \   00000048   0x7061             STRB     R1,[R4, #+1]
   \   0000004A   0xE024             B.N      ??sea_recvbyte_6
    204                      }
    205                      else if (frm->idx == 0x02)
   \                     ??sea_recvbyte_5: (+1)
   \   0000004C   0x7844             LDRB     R4,[R0, #+1]
   \   0000004E   0x2744             MOVS     R7,#+68
   \   00000050   0xFB07 0x0704      MLA      R7,R7,R4,R0
   \   00000054   0x2D02             CMP      R5,#+2
   \   00000056   0xF107 0x0684      ADD      R6,R7,#+132
   \   0000005A   0xBF08             IT       EQ 
   \   0000005C   0x020C             LSLEQ    R4,R1,#+8
    206                          frm->list[frm->in].road = ch << 0x08; 
   \   0000005E   0xD003             BEQ.N    ??sea_recvbyte_7
    207                      else if (frm->idx == 0x03)
   \   00000060   0x2D03             CMP      R5,#+3
   \   00000062   0xD103             BNE.N    ??sea_recvbyte_8
    208                          frm->list[frm->in].road |= ch; 
   \   00000064   0x8874             LDRH     R4,[R6, #+2]
   \   00000066   0x430C             ORRS     R4,R1,R4
   \                     ??sea_recvbyte_7: (+1)
   \   00000068   0x8074             STRH     R4,[R6, #+2]
   \   0000006A   0xE014             B.N      ??sea_recvbyte_6
    209                      else if (frm->idx <= frm->list[frm->in].len + FEXTRASIZE)
   \                     ??sea_recvbyte_8: (+1)
   \   0000006C   0x7876             LDRB     R6,[R6, #+1]
   \   0000006E   0x1D36             ADDS     R6,R6,#+4
   \   00000070   0x42AE             CMP      R6,R5
   \   00000072   0xDB0E             BLT.N    ??sea_recvbyte_9
    210                      {
    211                          if (frm->idx == frm->list[frm->in].len + FEXTRASIZE)
   \   00000074   0x42B5             CMP      R5,R6
   \   00000076   0xD108             BNE.N    ??sea_recvbyte_10
    212                          {
    213                              if ((sum & 0xff) == ch) 
   \   00000078   0x428B             CMP      R3,R1
   \   0000007A   0xD104             BNE.N    ??sea_recvbyte_11
    214                              {
    215                                  if (frm->in >= FRAMEBUFLEN - 0x01) 
   \   0000007C   0x2C03             CMP      R4,#+3
   \   0000007E   0xBFAC             ITE      GE 
   \   00000080   0x2400             MOVGE    R4,#+0
   \   00000082   0x1C64             ADDLT    R4,R4,#+1
    216                                      frm->in = 0x00;
    217                                  else
    218                                      frm->in ++;   
   \   00000084   0x7044             STRB     R4,[R0, #+1]
    219                              }
    220                              frm->state = PRT_SUM;
   \                     ??sea_recvbyte_11: (+1)
   \   00000086   0x242D             MOVS     R4,#+45
   \   00000088   0xE004             B.N      ??sea_recvbyte_12
    221                          }
    222                          else
    223          	            frm->list[frm->in].body[frm->idx - FEXTRASIZE] = ch;
   \                     ??sea_recvbyte_10: (+1)
   \   0000008A   0x19EC             ADDS     R4,R5,R7
   \   0000008C   0xF884 0x1084      STRB     R1,[R4, #+132]
   \   00000090   0xE001             B.N      ??sea_recvbyte_6
    224                      }
    225                      else
    226                          frm->state = PRT_IDLE;
   \                     ??sea_recvbyte_9: (+1)
   \   00000092   0x2400             MOVS     R4,#+0
   \                     ??sea_recvbyte_12: (+1)
   \   00000094   0x7004             STRB     R4,[R0, #+0]
    227                      sum += ch;
   \                     ??sea_recvbyte_6: (+1)
   \   00000096   0x18C9             ADDS     R1,R1,R3
   \   00000098   0x7011             STRB     R1,[R2, #+0]
    228                      frm->idx ++;
   \   0000009A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000009C   0x1C49             ADDS     R1,R1,#+1
   \   0000009E   0x70C1             STRB     R1,[R0, #+3]
   \   000000A0   0xBDF0             POP      {R4-R7,PC}
    229                  }
    230              }
    231              else
    232                  frm->state = PRT_IDLE;
   \                     ??sea_recvbyte_3: (+1)
   \   000000A2   0x2100             MOVS     R1,#+0
   \                     ??sea_recvbyte_2: (+1)
   \   000000A4   0x7001             STRB     R1,[R0, #+0]
    233          }
   \   000000A6   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .bss, align 1
   \                     ??sum:
   \   00000000                      DS8 1
    234          
    235          /////////////////////////////////////////////////////////////////////////////////////////////
    236          //
    237          //* 函数名      : void sea_initframe ( pframe_info_t ptr,  USART_TypeDef * uart )
    238          //* 功能        : initialize frame information structure body
    239          //* 输入参数    : pframe_info_t ptr,  USART_TypeDef * uart
    240          //* 输出参数    : 无
    241          //* 修改记录    : 无
    242          //* 备注        : 无
    243          //*------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    244          void sea_initframe ( pframe_info_t ptr )
    245          {   
   \                     sea_initframe: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    246              memset((void *)ptr, 0x00, sizeof(frame_info_t));
   \   00000004   0xF44F 0x71DA      MOV      R1,#+436
   \   00000008   0x.... 0x....      BL       __aeabi_memclr
    247          
    248              ptr->get      = sea_getframe;
   \   0000000C   0xF504 0x70CA      ADD      R0,R4,#+404
   \   00000010   0x....             LDR.N    R1,??DataTable1_1
   \   00000012   0x6001             STR      R1,[R0, #+0]
    249              ptr->put      = sea_putframe;
   \   00000014   0x....             LDR.N    R1,??DataTable1_2
   \   00000016   0x6081             STR      R1,[R0, #+8]
    250              ptr->recv     = sea_recvbyte;
   \   00000018   0x....             LDR.N    R1,??DataTable1_3
   \   0000001A   0x6041             STR      R1,[R0, #+4]
    251              ptr->putbyte  = sea_putframebyte;
   \   0000001C   0x....             LDR.N    R1,??DataTable1_4
   \   0000001E   0x60C1             STR      R1,[R0, #+12]
    252              ptr->putshort = sea_putframeshort;
   \   00000020   0x....             LDR.N    R1,??DataTable1_5
   \   00000022   0x6101             STR      R1,[R0, #+16]
    253              ptr->putlong  = sea_putframelong;
   \   00000024   0x....             LDR.N    R1,??DataTable1_6
   \   00000026   0x6141             STR      R1,[R0, #+20]
    254              ptr->sendbyte = sea_uartsendbyte;
   \   00000028   0x....             LDR.N    R1,??DataTable1_7
   \   0000002A   0x6181             STR      R1,[R0, #+24]
    255              ptr->print    = sea_printframe;
   \   0000002C   0x....             LDR.N    R1,??DataTable1_8
   \   0000002E   0x61C1             STR      R1,[R0, #+28]
    256          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ??sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     sea_getframe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     sea_putframe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     sea_recvbyte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     sea_putframebyte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     sea_putframeshort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     sea_putframelong

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     sea_uartsendbyte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     sea_printframe
    257          
    258          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   sea_getframe
        16   -> __aeabi_memcpy
       8   sea_initframe
         8   -> __aeabi_memclr
      24   sea_printframe
        24   -- Indirect call
        24   -> __aeabi_memclr4
        24   -> vsprintf
      40   sea_putframe
        40   -- Indirect call
      16   sea_putframebyte
        16   -> sea_putframe
      16   sea_putframelong
        16   -> sea_putframe
      16   sea_putframeshort
        16   -> sea_putframe
      20   sea_recvbyte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       6  ?Subroutine0
      52  sea_getframe
      50  sea_initframe
      52  sea_printframe
     134  sea_putframe
      16  sea_putframebyte
      30  sea_putframelong
      20  sea_putframeshort
     168  sea_recvbyte
       1  sum

 
   1 byte  in section .bss
 564 bytes in section .text
 
 564 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
